
sound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075dc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08007720  08007720  00017720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08007aa0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004a0  20000010  08007aac  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004b0  08007aac  000204b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017df6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c33  00000000  00000000  00037e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001640  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001560  00000000  00000000  0003c0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021acf  00000000  00000000  0003d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014364  00000000  00000000  0005f0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d7bb7  00000000  00000000  00073443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0014affa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006140  00000000  00000000  0014b050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08007704 	.word	0x08007704

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08007704 	.word	0x08007704

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d84:	f023 0218 	bic.w	r2, r3, #24
 8000d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4013      	ands	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b0a4      	sub	sp, #144	; 0x90
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f000 fd91 	bl	8001934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f9c7 	bl	80011a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e16:	f000 fa3b 	bl	8001290 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 fb2b 	bl	8001474 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e1e:	f000 faa1 	bl	8001364 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000e22:	f000 fb15 	bl	8001450 <MX_DMA_Init>
  MX_SAI1_Init();
 8000e26:	f000 fa65 	bl	80012f4 <MX_SAI1_Init>
  MX_USB_PCD_Init();
 8000e2a:	f000 fae9 	bl	8001400 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  double dur = 1.0;
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4ba5      	ldr	r3, [pc, #660]	; (80010c8 <main+0x2c0>)
 8000e34:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   double fs = 16000.0;
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	4ba3      	ldr	r3, [pc, #652]	; (80010cc <main+0x2c4>)
 8000e3e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   double f0 = 261.63; // Middle C
 8000e42:	a39b      	add	r3, pc, #620	; (adr r3, 80010b0 <main+0x2a8>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   double delta_t = 1.0 / fs;
 8000e4c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000e50:	f04f 0000 	mov.w	r0, #0
 8000e54:	499c      	ldr	r1, [pc, #624]	; (80010c8 <main+0x2c0>)
 8000e56:	f7ff fc79 	bl	800074c <__aeabi_ddiv>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   double volume = 12000.0;
 8000e62:	a395      	add	r3, pc, #596	; (adr r3, 80010b8 <main+0x2b0>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
   double c_scale[] = {261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25};
 8000e6c:	4b98      	ldr	r3, [pc, #608]	; (80010d0 <main+0x2c8>)
 8000e6e:	463c      	mov	r4, r7
 8000e70:	461d      	mov	r5, r3
 8000e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Frequencies corresponding to C scale: C4-D4-E4-F4-G4-A4-B4-C5
   int numberOfSamples = 2.0 * dur * fs; // 2 channels * duration (sec) * samples per sec
 8000e86:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	f7ff f97d 	bl	800018c <__adddf3>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000e9e:	f7ff fb2b 	bl	80004f8 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fdbf 	bl	8000a2c <__aeabi_d2iz>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   int16_t signal[numberOfSamples];
 8000eb2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8000eb4:	1e63      	subs	r3, r4, #1
 8000eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eb8:	4623      	mov	r3, r4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	010b      	lsls	r3, r1, #4
 8000eca:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000ece:	0102      	lsls	r2, r0, #4
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f04f 0100 	mov.w	r1, #0
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	010b      	lsls	r3, r1, #4
 8000ee2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000ee6:	0102      	lsls	r2, r0, #4
 8000ee8:	4623      	mov	r3, r4
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	3307      	adds	r3, #7
 8000eee:	08db      	lsrs	r3, r3, #3
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ef6:	466b      	mov	r3, sp
 8000ef8:	3301      	adds	r3, #1
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	647b      	str	r3, [r7, #68]	; 0x44
   // Single tone
   double t = 0;
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
   int count = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   while (count < numberOfSamples) {
 8000f12:	e045      	b.n	8000fa0 <main+0x198>
   signal[count] = volume * sin(2.0 * PI * f0 * t); // left
 8000f14:	a36a      	add	r3, pc, #424	; (adr r3, 80010c0 <main+0x2b8>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000f1e:	f7ff faeb 	bl	80004f8 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8000f2e:	f7ff fae3 	bl	80004f8 <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	ec43 2b17 	vmov	d7, r2, r3
 8000f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f3e:	eef0 0a67 	vmov.f32	s1, s15
 8000f42:	f005 fba9 	bl	8006698 <sin>
 8000f46:	ec51 0b10 	vmov	r0, r1, d0
 8000f4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f4e:	f7ff fad3 	bl	80004f8 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f7ff fd67 	bl	8000a2c <__aeabi_d2iz>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b219      	sxth	r1, r3
 8000f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f64:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
   signal[count + 1] = signal[count]; // right
 8000f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f74:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000f78:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 8000f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
   count += 2;
 8000f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f86:	3302      	adds	r3, #2
 8000f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   t += delta_t;
 8000f8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000f90:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000f94:	f7ff f8fa 	bl	800018c <__adddf3>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
   while (count < numberOfSamples) {
 8000fa0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	dbb4      	blt.n	8000f14 <main+0x10c>
   }
   HAL_SAI_Transmit_DMA(&hsai_BlockA1, signal, numberOfSamples);
 8000faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4848      	ldr	r0, [pc, #288]	; (80010d4 <main+0x2cc>)
 8000fb4:	f004 faf8 	bl	80055a8 <HAL_SAI_Transmit_DMA>
   HAL_Delay(1000);
 8000fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbc:	f000 fd40 	bl	8001a40 <HAL_Delay>
   // Plays a "C" scale
   for (int k = 0; k < 8; k++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fc4:	e064      	b.n	8001090 <main+0x288>
   t = 0;
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
   count = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   while (count < numberOfSamples) {
 8000fd8:	e04b      	b.n	8001072 <main+0x26a>
   signal[count] = volume * sin(2.0 * PI * c_scale[k] * t); // left
 8000fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3b90      	subs	r3, #144	; 0x90
 8000fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fea:	a335      	add	r3, pc, #212	; (adr r3, 80010c0 <main+0x2b8>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fa82 	bl	80004f8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001000:	f7ff fa7a 	bl	80004f8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	ec43 2b17 	vmov	d7, r2, r3
 800100c:	eeb0 0a47 	vmov.f32	s0, s14
 8001010:	eef0 0a67 	vmov.f32	s1, s15
 8001014:	f005 fb40 	bl	8006698 <sin>
 8001018:	ec51 0b10 	vmov	r0, r1, d0
 800101c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001020:	f7ff fa6a 	bl	80004f8 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fcfe 	bl	8000a2c <__aeabi_d2iz>
 8001030:	4603      	mov	r3, r0
 8001032:	b219      	sxth	r1, r3
 8001034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001036:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800103a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
   signal[count + 1] = signal[count]; // right
 800103e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001046:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800104a:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 800104e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001050:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
   count += 2;
 8001054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001058:	3302      	adds	r3, #2
 800105a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   t += delta_t;
 800105e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001062:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001066:	f7ff f891 	bl	800018c <__adddf3>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
   while (count < numberOfSamples) {
 8001072:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001078:	429a      	cmp	r2, r3
 800107a:	dbae      	blt.n	8000fda <main+0x1d2>
   }
   HAL_SAI_Transmit_DMA(&hsai_BlockA1, signal, numberOfSamples);
 800107c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800107e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001080:	b292      	uxth	r2, r2
 8001082:	4619      	mov	r1, r3
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <main+0x2cc>)
 8001086:	f004 fa8f 	bl	80055a8 <HAL_SAI_Transmit_DMA>
   for (int k = 0; k < 8; k++) {
 800108a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800108c:	3301      	adds	r3, #1
 800108e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001092:	2b07      	cmp	r3, #7
 8001094:	dd97      	ble.n	8000fc6 <main+0x1be>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   for (int k = 0; k < 8; k++) {
 8001096:	2300      	movs	r3, #0
 8001098:	67bb      	str	r3, [r7, #120]	; 0x78
 800109a:	e078      	b.n	800118e <main+0x386>
	   t = 0;
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	   count = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	   while (count < numberOfSamples) {
 80010ae:	e05f      	b.n	8001170 <main+0x368>
 80010b0:	7ae147ae 	.word	0x7ae147ae
 80010b4:	40705a14 	.word	0x40705a14
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40c77000 	.word	0x40c77000
 80010c0:	53c8d4f1 	.word	0x53c8d4f1
 80010c4:	401921fb 	.word	0x401921fb
 80010c8:	3ff00000 	.word	0x3ff00000
 80010cc:	40cf4000 	.word	0x40cf4000
 80010d0:	08007720 	.word	0x08007720
 80010d4:	20000120 	.word	0x20000120
	   signal[count] = volume * sin(2.0 * PI * c_scale[k] * t); // left
 80010d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80010e0:	4413      	add	r3, r2
 80010e2:	3b90      	subs	r3, #144	; 0x90
 80010e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e8:	a32c      	add	r3, pc, #176	; (adr r3, 800119c <main+0x394>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fa03 	bl	80004f8 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80010fe:	f7ff f9fb 	bl	80004f8 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	ec43 2b17 	vmov	d7, r2, r3
 800110a:	eeb0 0a47 	vmov.f32	s0, s14
 800110e:	eef0 0a67 	vmov.f32	s1, s15
 8001112:	f005 fac1 	bl	8006698 <sin>
 8001116:	ec51 0b10 	vmov	r0, r1, d0
 800111a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800111e:	f7ff f9eb 	bl	80004f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fc7f 	bl	8000a2c <__aeabi_d2iz>
 800112e:	4603      	mov	r3, r0
 8001130:	b219      	sxth	r1, r3
 8001132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001134:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001138:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	   signal[count + 1] = signal[count]; // right
 800113c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001144:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001148:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 800114c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800114e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	   count += 2;
 8001152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001156:	3302      	adds	r3, #2
 8001158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	   t += delta_t;
 800115c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001160:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001164:	f7ff f812 	bl	800018c <__adddf3>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	   while (count < numberOfSamples) {
 8001170:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001176:	429a      	cmp	r2, r3
 8001178:	dbae      	blt.n	80010d8 <main+0x2d0>
	   }
	   HAL_SAI_Transmit_DMA(&hsai_BlockA1, signal, numberOfSamples);
 800117a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800117e:	b292      	uxth	r2, r2
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <main+0x390>)
 8001184:	f004 fa10 	bl	80055a8 <HAL_SAI_Transmit_DMA>
	   for (int k = 0; k < 8; k++) {
 8001188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800118a:	3301      	adds	r3, #1
 800118c:	67bb      	str	r3, [r7, #120]	; 0x78
 800118e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001190:	2b07      	cmp	r3, #7
 8001192:	dd83      	ble.n	800109c <main+0x294>
 8001194:	e77f      	b.n	8001096 <main+0x28e>
 8001196:	bf00      	nop
 8001198:	20000120 	.word	0x20000120
 800119c:	53c8d4f1 	.word	0x53c8d4f1
 80011a0:	401921fb 	.word	0x401921fb

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b09a      	sub	sp, #104	; 0x68
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2248      	movs	r2, #72	; 0x48
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f005 fa66 	bl	8006684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011d8:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f023 0303 	bic.w	r3, r3, #3
 80011e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011ee:	f001 fa67 	bl	80026c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fdbe 	bl	8000d74 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <SystemClock_Config+0xe8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001200:	4a22      	ldr	r2, [pc, #136]	; (800128c <SystemClock_Config+0xe8>)
 8001202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <SystemClock_Config+0xe8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001214:	2327      	movs	r3, #39	; 0x27
 8001216:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800121e:	2301      	movs	r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2340      	movs	r3, #64	; 0x40
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001230:	2300      	movs	r3, #0
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001234:	2360      	movs	r3, #96	; 0x60
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fdd1 	bl	8002de8 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800124c:	f000 f95a 	bl	8001504 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001250:	236f      	movs	r3, #111	; 0x6f
 8001252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2101      	movs	r1, #1
 8001270:	4618      	mov	r0, r3
 8001272:	f002 f945 	bl	8003500 <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800127c:	f000 f942 	bl	8001504 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001280:	f003 fd09 	bl	8004c96 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001284:	bf00      	nop
 8001286:	3768      	adds	r7, #104	; 0x68
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58000400 	.word	0x58000400

08001290 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2250      	movs	r2, #80	; 0x50
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f005 f9f1 	bl	8006684 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_SAI1
 80012a2:	f44f 5305 	mov.w	r3, #8512	; 0x2140
 80012a6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80012a8:	2318      	movs	r3, #24
 80012aa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80012ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80012b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80012b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <PeriphCommonClock_Config+0x60>)
 80012c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 ff50 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80012e2:	f000 f90f 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	; 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	01010000 	.word	0x01010000

080012f4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_SAI1_Init+0x68>)
 80012fa:	4a19      	ldr	r2, [pc, #100]	; (8001360 <MX_SAI1_Init+0x6c>)
 80012fc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_SAI1_Init+0x68>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_SAI1_Init+0x68>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_SAI1_Init+0x68>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_SAI1_Init+0x68>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_SAI1_Init+0x68>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_SAI1_Init+0x68>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_SAI1_Init+0x68>)
 8001324:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001328:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_SAI1_Init+0x68>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_SAI1_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_SAI1_Init+0x68>)
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_SAI1_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001342:	2302      	movs	r3, #2
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_SAI1_Init+0x68>)
 800134a:	f003 ff69 	bl	8005220 <HAL_SAI_InitProtocol>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8001354:	f000 f8d6 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000120 	.word	0x20000120
 8001360:	40015404 	.word	0x40015404

08001364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 800136a:	4a24      	ldr	r2, [pc, #144]	; (80013fc <MX_USART1_UART_Init+0x98>)
 800136c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 8001378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800137c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 800138c:	220c      	movs	r2, #12
 800138e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ae:	4812      	ldr	r0, [pc, #72]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 80013b0:	f004 fbfa 	bl	8005ba8 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80013ba:	f000 f8a3 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013be:	2100      	movs	r1, #0
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 80013c2:	f005 f835 	bl	8006430 <HAL_UARTEx_SetTxFifoThreshold>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80013cc:	f000 f89a 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4809      	ldr	r0, [pc, #36]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 80013d4:	f005 f86a 	bl	80064ac <HAL_UARTEx_SetRxFifoThreshold>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80013de:	f000 f891 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_USART1_UART_Init+0x94>)
 80013e4:	f004 ffeb 	bl	80063be <HAL_UARTEx_DisableFifoMode>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80013ee:	f000 f889 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000090 	.word	0x20000090
 80013fc:	40013800 	.word	0x40013800

08001400 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USB_PCD_Init+0x48>)
 8001406:	4a11      	ldr	r2, [pc, #68]	; (800144c <MX_USB_PCD_Init+0x4c>)
 8001408:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_USB_PCD_Init+0x48>)
 800140c:	2208      	movs	r2, #8
 800140e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <MX_USB_PCD_Init+0x48>)
 8001412:	2202      	movs	r2, #2
 8001414:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USB_PCD_Init+0x48>)
 8001418:	2202      	movs	r2, #2
 800141a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_USB_PCD_Init+0x48>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USB_PCD_Init+0x48>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_USB_PCD_Init+0x48>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USB_PCD_Init+0x48>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_USB_PCD_Init+0x48>)
 8001436:	f001 f833 	bl	80024a0 <HAL_PCD_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001440:	f000 f860 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200001b8 	.word	0x200001b8
 800144c:	40006800 	.word	0x40006800

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001454:	2004      	movs	r0, #4
 8001456:	f7ff fca3 	bl	8000da0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fca0 	bl	8000da0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	200b      	movs	r0, #11
 8001466:	f000 fbea 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800146a:	200b      	movs	r0, #11
 800146c:	f000 fc01 	bl	8001c72 <HAL_NVIC_EnableIRQ>

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	2004      	movs	r0, #4
 800148a:	f7ff fca2 	bl	8000dd2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fc9f 	bl	8000dd2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fc9c 	bl	8000dd2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	2008      	movs	r0, #8
 800149c:	f7ff fc99 	bl	8000dd2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2123      	movs	r1, #35	; 0x23
 80014a4:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MX_GPIO_Init+0x84>)
 80014a6:	f000 ffe3 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014aa:	2310      	movs	r3, #16
 80014ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4810      	ldr	r0, [pc, #64]	; (80014fc <MX_GPIO_Init+0x88>)
 80014bc:	f000 fe68 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80014c0:	2323      	movs	r3, #35	; 0x23
 80014c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <MX_GPIO_Init+0x84>)
 80014d6:	f000 fe5b 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80014da:	2303      	movs	r3, #3
 80014dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_GPIO_Init+0x8c>)
 80014ec:	f000 fe50 	bl	8002190 <HAL_GPIO_Init>

}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48000800 	.word	0x48000800
 8001500:	48000c00 	.word	0x48000c00

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>

0800150e <LL_AHB2_GRP1_EnableClock>:
{
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800151c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4313      	orrs	r3, r2
 8001524:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4013      	ands	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800154e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4313      	orrs	r3, r2
 8001556:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001564:	68fb      	ldr	r3, [r7, #12]
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4013      	ands	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b09c      	sub	sp, #112	; 0x70
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2250      	movs	r2, #80	; 0x50
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 f855 	bl	8006684 <memset>
  if(huart->Instance==USART1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <HAL_UART_MspInit+0x84>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d124      	bne.n	800162e <HAL_UART_MspInit+0x7a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 fdc3 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015fc:	f7ff ff82 	bl	8001504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001600:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001604:	f7ff ffb5 	bl	8001572 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	2002      	movs	r0, #2
 800160a:	f7ff ff80 	bl	800150e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800160e:	23c0      	movs	r3, #192	; 0xc0
 8001610:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800161e:	2307      	movs	r3, #7
 8001620:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001626:	4619      	mov	r1, r3
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <HAL_UART_MspInit+0x88>)
 800162a:	f000 fdb1 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3770      	adds	r7, #112	; 0x70
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40013800 	.word	0x40013800
 800163c:	48000400 	.word	0x48000400

08001640 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_PCD_MspInit+0x5c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d118      	bne.n	8001694 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2001      	movs	r0, #1
 8001664:	f7ff ff53 	bl	800150e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001668:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800166c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800167a:	230a      	movs	r3, #10
 800167c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001688:	f000 fd82 	bl	8002190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800168c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001690:	f7ff ff56 	bl	8001540 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40006800 	.word	0x40006800

080016a0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a3c      	ldr	r2, [pc, #240]	; (80017a0 <HAL_SAI_MspInit+0x100>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d172      	bne.n	8001798 <HAL_SAI_MspInit+0xf8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80016b2:	4b3c      	ldr	r3, [pc, #240]	; (80017a4 <HAL_SAI_MspInit+0x104>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016ba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016be:	f7ff ff58 	bl	8001572 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_SAI_MspInit+0x104>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4a36      	ldr	r2, [pc, #216]	; (80017a4 <HAL_SAI_MspInit+0x104>)
 80016ca:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PB9     ------> SAI1_FS_A
    PC3     ------> SAI1_SD_A
    PA8     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016de:	230d      	movs	r3, #13
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4619      	mov	r1, r3
 80016e8:	482f      	ldr	r0, [pc, #188]	; (80017a8 <HAL_SAI_MspInit+0x108>)
 80016ea:	f000 fd51 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ee:	2308      	movs	r3, #8
 80016f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016fe:	230d      	movs	r3, #13
 8001700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4619      	mov	r1, r3
 8001708:	4828      	ldr	r0, [pc, #160]	; (80017ac <HAL_SAI_MspInit+0x10c>)
 800170a:	f000 fd41 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800170e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001712:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001720:	230d      	movs	r3, #13
 8001722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f000 fd2f 	bl	8002190 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel1;
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_SAI_MspInit+0x114>)
 8001736:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 800173a:	2212      	movs	r2, #18
 800173c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001740:	2210      	movs	r2, #16
 8001742:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001756:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 800175a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800175e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800176c:	4810      	ldr	r0, [pc, #64]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 800176e:	f000 fa9b 	bl	8001ca8 <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 8001778:	f7ff fec4 	bl	8001504 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 800178e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_SAI_MspInit+0x110>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6293      	str	r3, [r2, #40]	; 0x28

    }
}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40015404 	.word	0x40015404
 80017a4:	2000002c 	.word	0x2000002c
 80017a8:	48000400 	.word	0x48000400
 80017ac:	48000800 	.word	0x48000800
 80017b0:	20000030 	.word	0x20000030
 80017b4:	40020008 	.word	0x40020008

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 f8f0 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA1_Channel1_IRQHandler+0x10>)
 8001812:	f000 fb6c 	bl	8001eee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000030 	.word	0x20000030

08001820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <SystemInit+0x98>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182a:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <SystemInit+0x98>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800184c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <SystemInit+0x9c>)
 800185a:	4013      	ands	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186a:	f023 0305 	bic.w	r3, r3, #5
 800186e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001876:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <SystemInit+0xa0>)
 800188c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <SystemInit+0xa0>)
 8001894:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	faf6fefb 	.word	0xfaf6fefb
 80018c0:	22041000 	.word	0x22041000

080018c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80018c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c8:	3304      	adds	r3, #4

080018ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80018ce:	d3f9      	bcc.n	80018c4 <CopyDataInit>
  bx lr
 80018d0:	4770      	bx	lr

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80018d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018d4:	3004      	adds	r0, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>
  bx lr
 80018da:	4770      	bx	lr

080018dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80018de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e0:	f7ff ff9e 	bl	8001820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018e4:	480b      	ldr	r0, [pc, #44]	; (8001914 <LoopForever+0x8>)
 80018e6:	490c      	ldr	r1, [pc, #48]	; (8001918 <LoopForever+0xc>)
 80018e8:	4a0c      	ldr	r2, [pc, #48]	; (800191c <LoopForever+0x10>)
 80018ea:	2300      	movs	r3, #0
 80018ec:	f7ff ffed 	bl	80018ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <LoopForever+0x14>)
 80018f2:	490c      	ldr	r1, [pc, #48]	; (8001924 <LoopForever+0x18>)
 80018f4:	2300      	movs	r3, #0
 80018f6:	f7ff ffee 	bl	80018d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80018fa:	480b      	ldr	r0, [pc, #44]	; (8001928 <LoopForever+0x1c>)
 80018fc:	490b      	ldr	r1, [pc, #44]	; (800192c <LoopForever+0x20>)
 80018fe:	2300      	movs	r3, #0
 8001900:	f7ff ffe9 	bl	80018d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001904:	f004 fe9a 	bl	800663c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001908:	f7ff fa7e 	bl	8000e08 <main>

0800190c <LoopForever>:

LoopForever:
  b LoopForever
 800190c:	e7fe      	b.n	800190c <LoopForever>
 800190e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001910:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001914:	20000004 	.word	0x20000004
 8001918:	20000010 	.word	0x20000010
 800191c:	08007aa0 	.word	0x08007aa0
  INIT_BSS _sbss, _ebss
 8001920:	20000010 	.word	0x20000010
 8001924:	200004b0 	.word	0x200004b0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001928:	20030000 	.word	0x20030000
 800192c:	20030000 	.word	0x20030000

08001930 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC1_IRQHandler>
	...

08001934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_Init+0x3c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_Init+0x3c>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194a:	2003      	movs	r0, #3
 800194c:	f000 f96c 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001950:	2000      	movs	r0, #0
 8001952:	f000 f80f 	bl	8001974 <HAL_InitTick>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	e001      	b.n	8001966 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001962:	f7ff fe1f 	bl	80015a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001966:	79fb      	ldrb	r3, [r7, #7]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58004000 	.word	0x58004000

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_InitTick+0x6c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d024      	beq.n	80019d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001988:	f001 ff66 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <HAL_InitTick+0x6c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001998:	fbb3 f3f1 	udiv	r3, r3, r1
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f974 	bl	8001c8e <HAL_SYSTICK_Config>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10f      	bne.n	80019cc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b0f      	cmp	r3, #15
 80019b0:	d809      	bhi.n	80019c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b2:	2200      	movs	r2, #0
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	f04f 30ff 	mov.w	r0, #4294967295
 80019ba:	f000 f940 	bl	8001c3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_InitTick+0x70>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e007      	b.n	80019d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	e004      	b.n	80019d6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e001      	b.n	80019d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	200004ac 	.word	0x200004ac

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200004ac 	.word	0x200004ac

08001a28 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetTickPrio+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffe2 	bl	8001a10 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffd2 	bl	8001a10 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
    {
    }
  }
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000000c 	.word	0x2000000c

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff40 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff90 	bl	8001b7c <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5f 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff33 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffa4 	bl	8001be4 <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e08e      	b.n	8001dd8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_DMA_Init+0x138>)
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d80f      	bhi.n	8001ce6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <HAL_DMA_Init+0x13c>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a45      	ldr	r2, [pc, #276]	; (8001de8 <HAL_DMA_Init+0x140>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	009a      	lsls	r2, r3, #2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a42      	ldr	r2, [pc, #264]	; (8001dec <HAL_DMA_Init+0x144>)
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ce4:	e00e      	b.n	8001d04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_DMA_Init+0x148>)
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a3d      	ldr	r2, [pc, #244]	; (8001de8 <HAL_DMA_Init+0x140>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	009a      	lsls	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a3c      	ldr	r2, [pc, #240]	; (8001df4 <HAL_DMA_Init+0x14c>)
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f9b6 	bl	80020c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d64:	d102      	bne.n	8001d6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001d78:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d82:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d010      	beq.n	8001dae <HAL_DMA_Init+0x106>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d80c      	bhi.n	8001dae <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f9d5 	bl	8002144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	e008      	b.n	8001dc0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40020407 	.word	0x40020407
 8001de4:	bffdfff8 	.word	0xbffdfff8
 8001de8:	cccccccd 	.word	0xcccccccd
 8001dec:	40020000 	.word	0x40020000
 8001df0:	bffdfbf8 	.word	0xbffdfbf8
 8001df4:	40020400 	.word	0x40020400

08001df8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_DMA_Start_IT+0x20>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e066      	b.n	8001ee6 <HAL_DMA_Start_IT+0xee>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d155      	bne.n	8001ed8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f8fb 	bl	800204c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d008      	beq.n	8001e70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 020e 	orr.w	r2, r2, #14
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e00f      	b.n	8001e90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 020a 	orr.w	r2, r2, #10
 8001e8e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e005      	b.n	8001ee4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f003 031c 	and.w	r3, r3, #28
 8001f0e:	2204      	movs	r2, #4
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d026      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x7a>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d021      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d107      	bne.n	8001f42 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0204 	bic.w	r2, r2, #4
 8001f40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f003 021c 	and.w	r2, r3, #28
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2104      	movs	r1, #4
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d071      	beq.n	8002042 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001f66:	e06c      	b.n	8002042 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f003 031c 	and.w	r3, r3, #28
 8001f70:	2202      	movs	r2, #2
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d02e      	beq.n	8001fda <HAL_DMA_IRQHandler+0xec>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d029      	beq.n	8001fda <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020a 	bic.w	r2, r2, #10
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f003 021c 	and.w	r2, r3, #28
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	2102      	movs	r1, #2
 8001fba:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d038      	beq.n	8002042 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001fd8:	e033      	b.n	8002042 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f003 031c 	and.w	r3, r3, #28
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02a      	beq.n	8002044 <HAL_DMA_IRQHandler+0x156>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d025      	beq.n	8002044 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 020e 	bic.w	r2, r2, #14
 8002006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	f003 021c 	and.w	r2, r3, #28
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002042:	bf00      	nop
 8002044:	bf00      	nop
}
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002062:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002074:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 021c 	and.w	r2, r3, #28
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b10      	cmp	r3, #16
 8002098:	d108      	bne.n	80020ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020aa:	e007      	b.n	80020bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80020d8:	429a      	cmp	r2, r3
 80020da:	d80a      	bhi.n	80020f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020e8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6493      	str	r3, [r2, #72]	; 0x48
 80020f0:	e007      	b.n	8002102 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	009a      	lsls	r2, r3, #2
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80020fc:	4413      	add	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3b08      	subs	r3, #8
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002118:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2201      	movs	r2, #1
 8002122:	409a      	lsls	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40020407 	.word	0x40020407
 8002138:	4002081c 	.word	0x4002081c
 800213c:	cccccccd 	.word	0xcccccccd
 8002140:	40020880 	.word	0x40020880

08002144 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002154:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002168:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3b01      	subs	r3, #1
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2201      	movs	r2, #1
 8002174:	409a      	lsls	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	1000823f 	.word	0x1000823f
 800218c:	40020940 	.word	0x40020940

08002190 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	e14c      	b.n	800243a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 813e 	beq.w	8002434 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d005      	beq.n	80021d0 <HAL_GPIO_Init+0x40>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d130      	bne.n	8002232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002206:	2201      	movs	r2, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	f003 0201 	and.w	r2, r3, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b03      	cmp	r3, #3
 800223c:	d017      	beq.n	800226e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d123      	bne.n	80022c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	6939      	ldr	r1, [r7, #16]
 80022be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0203 	and.w	r2, r3, #3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8098 	beq.w	8002434 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002304:	4a54      	ldr	r2, [pc, #336]	; (8002458 <HAL_GPIO_Init+0x2c8>)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800232e:	d019      	beq.n	8002364 <HAL_GPIO_Init+0x1d4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a4a      	ldr	r2, [pc, #296]	; (800245c <HAL_GPIO_Init+0x2cc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_GPIO_Init+0x1d0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a49      	ldr	r2, [pc, #292]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00d      	beq.n	800235c <HAL_GPIO_Init+0x1cc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_GPIO_Init+0x2d4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <HAL_GPIO_Init+0x1c8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a47      	ldr	r2, [pc, #284]	; (8002468 <HAL_GPIO_Init+0x2d8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_GPIO_Init+0x1c4>
 8002350:	2304      	movs	r3, #4
 8002352:	e008      	b.n	8002366 <HAL_GPIO_Init+0x1d6>
 8002354:	2307      	movs	r3, #7
 8002356:	e006      	b.n	8002366 <HAL_GPIO_Init+0x1d6>
 8002358:	2303      	movs	r3, #3
 800235a:	e004      	b.n	8002366 <HAL_GPIO_Init+0x1d6>
 800235c:	2302      	movs	r3, #2
 800235e:	e002      	b.n	8002366 <HAL_GPIO_Init+0x1d6>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_GPIO_Init+0x1d6>
 8002364:	2300      	movs	r3, #0
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	f002 0203 	and.w	r2, r2, #3
 800236c:	0092      	lsls	r2, r2, #2
 800236e:	4093      	lsls	r3, r2
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002376:	4938      	ldr	r1, [pc, #224]	; (8002458 <HAL_GPIO_Init+0x2c8>)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002384:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_GPIO_Init+0x2dc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023a8:	4a30      	ldr	r2, [pc, #192]	; (800246c <HAL_GPIO_Init+0x2dc>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023ae:	4b2f      	ldr	r3, [pc, #188]	; (800246c <HAL_GPIO_Init+0x2dc>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023d2:	4a26      	ldr	r2, [pc, #152]	; (800246c <HAL_GPIO_Init+0x2dc>)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_GPIO_Init+0x2dc>)
 80023da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023fe:	4a1b      	ldr	r2, [pc, #108]	; (800246c <HAL_GPIO_Init+0x2dc>)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_GPIO_Init+0x2dc>)
 8002408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_GPIO_Init+0x2dc>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f aeab 	bne.w	80021a0 <HAL_GPIO_Init+0x10>
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40010000 	.word	0x40010000
 800245c:	48000400 	.word	0x48000400
 8002460:	48000800 	.word	0x48000800
 8002464:	48000c00 	.word	0x48000c00
 8002468:	48001000 	.word	0x48001000
 800246c:	58000800 	.word	0x58000800

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800248c:	e002      	b.n	8002494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a2:	b08b      	sub	sp, #44	; 0x2c
 80024a4:	af06      	add	r7, sp, #24
 80024a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0d7      	b.n	8002662 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff f8ba 	bl	8001640 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 f873 	bl	80065c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e04c      	b.n	800257e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	3301      	adds	r3, #1
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	b298      	uxth	r0, r3
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	3336      	adds	r3, #54	; 0x36
 8002522:	4602      	mov	r2, r0
 8002524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	3303      	adds	r3, #3
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	3338      	adds	r3, #56	; 0x38
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	333c      	adds	r3, #60	; 0x3c
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3340      	adds	r3, #64	; 0x40
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	3301      	adds	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3ad      	bcc.n	80024e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e044      	b.n	8002618 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	f203 1369 	addw	r3, r3, #361	; 0x169
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	440b      	add	r3, r1
 80025c8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	440b      	add	r3, r1
 80025de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	3301      	adds	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d3b5      	bcc.n	800258e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	687e      	ldr	r6, [r7, #4]
 800262a:	466d      	mov	r5, sp
 800262c:	f106 0410 	add.w	r4, r6, #16
 8002630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	602b      	str	r3, [r5, #0]
 8002638:	1d33      	adds	r3, r6, #4
 800263a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263c:	6838      	ldr	r0, [r7, #0]
 800263e:	f003 ffdc 	bl	80065fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f805 	bl	800266a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800268e:	b29b      	uxth	r3, r3
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	58000400 	.word	0x58000400

080026e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	58000400 	.word	0x58000400

080026fc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800270e:	d101      	bne.n	8002714 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_RCC_HSE_Enable>:
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <LL_RCC_HSE_Disable>:
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_RCC_HSE_IsReady>:
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800276e:	d101      	bne.n	8002774 <LL_RCC_HSE_IsReady+0x18>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <LL_RCC_HSE_IsReady+0x1a>
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_RCC_HSI_Enable>:
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_RCC_HSI_Disable>:
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_RCC_HSI_IsReady>:
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d101      	bne.n	80027d4 <LL_RCC_HSI_IsReady+0x18>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <LL_RCC_HSI_IsReady+0x1a>
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_RCC_HSI48_Enable>:
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_RCC_HSI48_Disable>:
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_RCC_HSI48_IsReady>:
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d101      	bne.n	8002866 <LL_RCC_HSI48_IsReady+0x18>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_RCC_HSI48_IsReady+0x1a>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_RCC_LSE_Enable>:
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_RCC_LSE_Disable>:
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_LSE_EnableBypass>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_LSE_DisableBypass>:
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d101      	bne.n	8002912 <LL_RCC_LSE_IsReady+0x18>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_RCC_LSE_IsReady+0x1a>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d101      	bne.n	800297a <LL_RCC_LSI1_IsReady+0x18>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <LL_RCC_LSI1_IsReady+0x1a>
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d101      	bne.n	80029e2 <LL_RCC_LSI2_IsReady+0x18>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_RCC_LSI2_IsReady+0x1a>
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d101      	bne.n	8002a6e <LL_RCC_MSI_IsReady+0x16>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <LL_RCC_MSI_IsReady+0x18>
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2bb0      	cmp	r3, #176	; 0xb0
 8002ab8:	d901      	bls.n	8002abe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002aba:	23b0      	movs	r3, #176	; 0xb0
 8002abc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002abe:	687b      	ldr	r3, [r7, #4]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 0203 	bic.w	r2, r3, #3
 8002b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b9a:	f023 020f 	bic.w	r2, r3, #15
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9c:	6013      	str	r3, [r2, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cba:	d101      	bne.n	8002cc0 <LL_RCC_PLL_IsReady+0x18>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <LL_RCC_PLL_IsReady+0x1a>
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0303 	and.w	r3, r3, #3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d101      	bne.n	8002d46 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d66:	d101      	bne.n	8002d6c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d101      	bne.n	8002d92 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002db0:	d101      	bne.n	8002db6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dd4:	d101      	bne.n	8002dda <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b08d      	sub	sp, #52	; 0x34
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e37e      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8092 	beq.w	8002f2c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e08:	f7ff fe89 	bl	8002b1e <LL_RCC_GetSysClkSource>
 8002e0c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0e:	f7ff ff82 	bl	8002d16 <LL_RCC_PLL_GetMainSource>
 8002e12:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3e>
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d14c      	bne.n	8002eba <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d149      	bne.n	8002eba <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e26:	f7ff fe17 	bl	8002a58 <LL_RCC_MSI_IsReady>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_OscConfig+0x54>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e35d      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002e40:	f7ff fe2f 	bl	8002aa2 <LL_RCC_MSI_GetRange>
 8002e44:	4603      	mov	r3, r0
 8002e46:	429c      	cmp	r4, r3
 8002e48:	d914      	bls.n	8002e74 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fd42 	bl	80038d8 <RCC_SetFlashLatencyFromMSIRange>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e34c      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fe09 	bl	8002a7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fe2d 	bl	8002acc <LL_RCC_MSI_SetCalibTrimming>
 8002e72:	e013      	b.n	8002e9c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fdfe 	bl	8002a7a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fe22 	bl	8002acc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fd23 	bl	80038d8 <RCC_SetFlashLatencyFromMSIRange>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e32d      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e9c:	f000 fcdc 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4ab3      	ldr	r2, [pc, #716]	; (8003170 <HAL_RCC_OscConfig+0x388>)
 8002ea4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ea6:	4bb3      	ldr	r3, [pc, #716]	; (8003174 <HAL_RCC_OscConfig+0x38c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fd62 	bl	8001974 <HAL_InitTick>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d039      	beq.n	8002f2a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e31e      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01e      	beq.n	8002f00 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec2:	f7ff fdab 	bl	8002a1c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fda3 	bl	8001a10 <HAL_GetTick>
 8002eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ece:	f7fe fd9f 	bl	8001a10 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e30b      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ee0:	f7ff fdba 	bl	8002a58 <LL_RCC_MSI_IsReady>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f1      	beq.n	8002ece <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fdc3 	bl	8002a7a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fde7 	bl	8002acc <LL_RCC_MSI_SetCalibTrimming>
 8002efe:	e015      	b.n	8002f2c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f00:	f7ff fd9b 	bl	8002a3a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fd84 	bl	8001a10 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f0c:	f7fe fd80 	bl	8001a10 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e2ec      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f1e:	f7ff fd9b 	bl	8002a58 <LL_RCC_MSI_IsReady>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f1      	bne.n	8002f0c <HAL_RCC_OscConfig+0x124>
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f2a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d04e      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f38:	f7ff fdf1 	bl	8002b1e <LL_RCC_GetSysClkSource>
 8002f3c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f3e:	f7ff feea 	bl	8002d16 <LL_RCC_PLL_GetMainSource>
 8002f42:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x16e>
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d10d      	bne.n	8002f6c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d10a      	bne.n	8002f6c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f56:	f7ff fc01 	bl	800275c <LL_RCC_HSE_IsReady>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d039      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1ec>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d135      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e2c5      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_OscConfig+0x194>
 8002f76:	f7ff fbd3 	bl	8002720 <LL_RCC_HSE_Enable>
 8002f7a:	e001      	b.n	8002f80 <HAL_RCC_OscConfig+0x198>
 8002f7c:	f7ff fbdf 	bl	800273e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fd42 	bl	8001a10 <HAL_GetTick>
 8002f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fd3e 	bl	8001a10 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e2aa      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002fa2:	f7ff fbdb 	bl	800275c <LL_RCC_HSE_IsReady>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f1      	beq.n	8002f90 <HAL_RCC_OscConfig+0x1a8>
 8002fac:	e013      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe fd2f 	bl	8001a10 <HAL_GetTick>
 8002fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb6:	f7fe fd2b 	bl	8001a10 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	; 0x64
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e297      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fc8:	f7ff fbc8 	bl	800275c <LL_RCC_HSE_IsReady>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f1      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x1ce>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d051      	beq.n	8003086 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe2:	f7ff fd9c 	bl	8002b1e <LL_RCC_GetSysClkSource>
 8002fe6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe8:	f7ff fe95 	bl	8002d16 <LL_RCC_PLL_GetMainSource>
 8002fec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_OscConfig+0x218>
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d113      	bne.n	8003022 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d110      	bne.n	8003022 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003000:	f7ff fbdc 	bl	80027bc <LL_RCC_HSI_IsReady>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x22e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e270      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fbe0 	bl	80027e0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	e031      	b.n	8003086 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d019      	beq.n	800305e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302a:	f7ff fba9 	bl	8002780 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe fcef 	bl	8001a10 <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe fceb 	bl	8001a10 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e257      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003048:	f7ff fbb8 	bl	80027bc <LL_RCC_HSI_IsReady>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f1      	beq.n	8003036 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fbc2 	bl	80027e0 <LL_RCC_HSI_SetCalibTrimming>
 800305c:	e013      	b.n	8003086 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	f7ff fb9e 	bl	800279e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fe fcd5 	bl	8001a10 <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306a:	f7fe fcd1 	bl	8001a10 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e23d      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800307c:	f7ff fb9e 	bl	80027bc <LL_RCC_HSI_IsReady>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f1      	bne.n	800306a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80a3 	beq.w	80031e6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d076      	beq.n	8003196 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d046      	beq.n	8003142 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80030b4:	f7ff fc55 	bl	8002962 <LL_RCC_LSI1_IsReady>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d113      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80030be:	f7ff fc2e 	bl	800291e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030c2:	f7fe fca5 	bl	8001a10 <HAL_GetTick>
 80030c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030ca:	f7fe fca1 	bl	8001a10 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e20d      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80030dc:	f7ff fc41 	bl	8002962 <LL_RCC_LSI1_IsReady>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f1      	beq.n	80030ca <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80030e6:	f7ff fc4e 	bl	8002986 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fc91 	bl	8001a10 <HAL_GetTick>
 80030ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030f2:	f7fe fc8d 	bl	8001a10 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1f9      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003104:	f7ff fc61 	bl	80029ca <LL_RCC_LSI2_IsReady>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f1      	beq.n	80030f2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fc6b 	bl	80029ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003118:	f7ff fc12 	bl	8002940 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe fc78 	bl	8001a10 <HAL_GetTick>
 8003120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003124:	f7fe fc74 	bl	8001a10 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e1e0      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003136:	f7ff fc14 	bl	8002962 <LL_RCC_LSI1_IsReady>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f1      	bne.n	8003124 <HAL_RCC_OscConfig+0x33c>
 8003140:	e051      	b.n	80031e6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003142:	f7ff fbec 	bl	800291e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe fc63 	bl	8001a10 <HAL_GetTick>
 800314a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800314e:	f7fe fc5f 	bl	8001a10 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1cb      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003160:	f7ff fbff 	bl	8002962 <LL_RCC_LSI1_IsReady>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f1      	beq.n	800314e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800316a:	f7ff fc1d 	bl	80029a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800316e:	e00c      	b.n	800318a <HAL_RCC_OscConfig+0x3a2>
 8003170:	20000004 	.word	0x20000004
 8003174:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003178:	f7fe fc4a 	bl	8001a10 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b03      	cmp	r3, #3
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1b6      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800318a:	f7ff fc1e 	bl	80029ca <LL_RCC_LSI2_IsReady>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f1      	bne.n	8003178 <HAL_RCC_OscConfig+0x390>
 8003194:	e027      	b.n	80031e6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003196:	f7ff fc07 	bl	80029a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fe fc39 	bl	8001a10 <HAL_GetTick>
 800319e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031a2:	f7fe fc35 	bl	8001a10 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1a1      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80031b4:	f7ff fc09 	bl	80029ca <LL_RCC_LSI2_IsReady>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f1      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80031be:	f7ff fbbf 	bl	8002940 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe fc25 	bl	8001a10 <HAL_GetTick>
 80031c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80031ca:	f7fe fc21 	bl	8001a10 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e18d      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80031dc:	f7ff fbc1 	bl	8002962 <LL_RCC_LSI1_IsReady>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f1      	bne.n	80031ca <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d05b      	beq.n	80032aa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f2:	4bb5      	ldr	r3, [pc, #724]	; (80034c8 <HAL_RCC_OscConfig+0x6e0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d114      	bne.n	8003228 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80031fe:	f7ff fa5f 	bl	80026c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003202:	f7fe fc05 	bl	8001a10 <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320a:	f7fe fc01 	bl	8001a10 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e16d      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321c:	4baa      	ldr	r3, [pc, #680]	; (80034c8 <HAL_RCC_OscConfig+0x6e0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d102      	bne.n	8003236 <HAL_RCC_OscConfig+0x44e>
 8003230:	f7ff fb1f 	bl	8002872 <LL_RCC_LSE_Enable>
 8003234:	e00c      	b.n	8003250 <HAL_RCC_OscConfig+0x468>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d104      	bne.n	8003248 <HAL_RCC_OscConfig+0x460>
 800323e:	f7ff fb3a 	bl	80028b6 <LL_RCC_LSE_EnableBypass>
 8003242:	f7ff fb16 	bl	8002872 <LL_RCC_LSE_Enable>
 8003246:	e003      	b.n	8003250 <HAL_RCC_OscConfig+0x468>
 8003248:	f7ff fb24 	bl	8002894 <LL_RCC_LSE_Disable>
 800324c:	f7ff fb44 	bl	80028d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d014      	beq.n	8003282 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe fbda 	bl	8001a10 <HAL_GetTick>
 800325c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fe fbd6 	bl	8001a10 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e140      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003276:	f7ff fb40 	bl	80028fa <LL_RCC_LSE_IsReady>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ef      	beq.n	8003260 <HAL_RCC_OscConfig+0x478>
 8003280:	e013      	b.n	80032aa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe fbc5 	bl	8001a10 <HAL_GetTick>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fe fbc1 	bl	8001a10 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e12b      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032a0:	f7ff fb2b 	bl	80028fa <LL_RCC_LSE_IsReady>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ef      	bne.n	800328a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d02c      	beq.n	8003310 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d014      	beq.n	80032e8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032be:	f7ff faa4 	bl	800280a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe fba5 	bl	8001a10 <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ca:	f7fe fba1 	bl	8001a10 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e10d      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80032dc:	f7ff fab7 	bl	800284e <LL_RCC_HSI48_IsReady>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f1      	beq.n	80032ca <HAL_RCC_OscConfig+0x4e2>
 80032e6:	e013      	b.n	8003310 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032e8:	f7ff faa0 	bl	800282c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fb90 	bl	8001a10 <HAL_GetTick>
 80032f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f4:	f7fe fb8c 	bl	8001a10 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0f8      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003306:	f7ff faa2 	bl	800284e <LL_RCC_HSI48_IsReady>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f1      	bne.n	80032f4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80ee 	beq.w	80034f6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	f7ff fc00 	bl	8002b1e <LL_RCC_GetSysClkSource>
 800331e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2b02      	cmp	r3, #2
 800332e:	f040 80af 	bne.w	8003490 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	429a      	cmp	r2, r3
 800333e:	d123      	bne.n	8003388 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d11c      	bne.n	8003388 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d114      	bne.n	8003388 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d10d      	bne.n	8003388 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d106      	bne.n	8003388 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d05d      	beq.n	8003444 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d058      	beq.n	8003440 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0ab      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033a0:	f7ff fc73 	bl	8002c8a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033a4:	f7fe fb34 	bl	8001a10 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fb30 	bl	8001a10 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e09c      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ef      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <HAL_RCC_OscConfig+0x6e4>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e4:	0212      	lsls	r2, r2, #8
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033f8:	430a      	orrs	r2, r1
 80033fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fe:	4313      	orrs	r3, r2
 8003400:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003402:	f7ff fc33 	bl	8002c6c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003414:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003416:	f7fe fafb 	bl	8001a10 <HAL_GetTick>
 800341a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe faf7 	bl	8001a10 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e063      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0ef      	beq.n	800341e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343e:	e05a      	b.n	80034f6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e059      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d151      	bne.n	80034f6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003452:	f7ff fc0b 	bl	8002c6c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003466:	f7fe fad3 	bl	8001a10 <HAL_GetTick>
 800346a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe facf 	bl	8001a10 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e03b      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ef      	beq.n	800346e <HAL_RCC_OscConfig+0x686>
 800348e:	e032      	b.n	80034f6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d02d      	beq.n	80034f2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	f7ff fbf8 	bl	8002c8a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800349a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a4:	f023 0303 	bic.w	r3, r3, #3
 80034a8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80034aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80034b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe faa7 	bl	8001a10 <HAL_GetTick>
 80034c2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c4:	e00d      	b.n	80034e2 <HAL_RCC_OscConfig+0x6fa>
 80034c6:	bf00      	nop
 80034c8:	58000400 	.word	0x58000400
 80034cc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe fa9e 	bl	8001a10 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ef      	bne.n	80034d0 <HAL_RCC_OscConfig+0x6e8>
 80034f0:	e001      	b.n	80034f6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3734      	adds	r7, #52	; 0x34
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd90      	pop	{r4, r7, pc}

08003500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e12d      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b98      	ldr	r3, [pc, #608]	; (8003778 <HAL_RCC_ClockConfig+0x278>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d91b      	bls.n	800355a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b95      	ldr	r3, [pc, #596]	; (8003778 <HAL_RCC_ClockConfig+0x278>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4993      	ldr	r1, [pc, #588]	; (8003778 <HAL_RCC_ClockConfig+0x278>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003532:	f7fe fa6d 	bl	8001a10 <HAL_GetTick>
 8003536:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003538:	e008      	b.n	800354c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800353a:	f7fe fa69 	bl	8001a10 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e111      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354c:	4b8a      	ldr	r3, [pc, #552]	; (8003778 <HAL_RCC_ClockConfig+0x278>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d1ef      	bne.n	800353a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fae3 	bl	8002b36 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003570:	f7fe fa4e 	bl	8001a10 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003578:	f7fe fa4a 	bl	8001a10 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0f2      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800358a:	f7ff fbd0 	bl	8002d2e <LL_RCC_IsActiveFlag_HPRE>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f1      	beq.n	8003578 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d016      	beq.n	80035ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fada 	bl	8002b5e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035aa:	f7fe fa31 	bl	8001a10 <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035b2:	f7fe fa2d 	bl	8001a10 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0d5      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80035c4:	f7ff fbc5 	bl	8002d52 <LL_RCC_IsActiveFlag_C2HPRE>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f1      	beq.n	80035b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fad3 	bl	8002b8a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035e4:	f7fe fa14 	bl	8001a10 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035ec:	f7fe fa10 	bl	8001a10 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0b8      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035fe:	f7ff fbbb 	bl	8002d78 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f1      	beq.n	80035ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff facd 	bl	8002bb8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800361e:	f7fe f9f7 	bl	8001a10 <HAL_GetTick>
 8003622:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003626:	f7fe f9f3 	bl	8001a10 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e09b      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003638:	f7ff fbb1 	bl	8002d9e <LL_RCC_IsActiveFlag_PPRE1>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f1      	beq.n	8003626 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d017      	beq.n	800367e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fac3 	bl	8002be0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800365a:	f7fe f9d9 	bl	8001a10 <HAL_GetTick>
 800365e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003662:	f7fe f9d5 	bl	8001a10 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e07d      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003674:	f7ff fba5 	bl	8002dc2 <LL_RCC_IsActiveFlag_PPRE2>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f1      	beq.n	8003662 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d043      	beq.n	8003712 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003692:	f7ff f863 	bl	800275c <LL_RCC_HSE_IsReady>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d11e      	bne.n	80036da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e067      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80036a8:	f7ff fafe 	bl	8002ca8 <LL_RCC_PLL_IsReady>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d113      	bne.n	80036da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e05c      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80036be:	f7ff f9cb 	bl	8002a58 <LL_RCC_MSI_IsReady>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d108      	bne.n	80036da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e051      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80036cc:	f7ff f876 	bl	80027bc <LL_RCC_HSI_IsReady>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e04a      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fa09 	bl	8002af6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e4:	f7fe f994 	bl	8001a10 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fe f990 	bl	8001a10 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e036      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	f7ff fa0c 	bl	8002b1e <LL_RCC_GetSysClkSource>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	429a      	cmp	r2, r3
 8003710:	d1ec      	bne.n	80036ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003712:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_RCC_ClockConfig+0x278>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d21b      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCC_ClockConfig+0x278>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 0207 	bic.w	r2, r3, #7
 8003728:	4913      	ldr	r1, [pc, #76]	; (8003778 <HAL_RCC_ClockConfig+0x278>)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7fe f96e 	bl	8001a10 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	e008      	b.n	800374a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003738:	f7fe f96a 	bl	8001a10 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e012      	b.n	8003770 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x278>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d1ef      	bne.n	8003738 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003758:	f000 f87e 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 800375c:	4603      	mov	r3, r0
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_RCC_ClockConfig+0x27c>)
 8003760:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003762:	f7fe f961 	bl	8001a28 <HAL_GetTickPrio>
 8003766:	4603      	mov	r3, r0
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe f903 	bl	8001974 <HAL_InitTick>
 800376e:	4603      	mov	r3, r0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	58004000 	.word	0x58004000
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	f7ff f9ca 	bl	8002b1e <LL_RCC_GetSysClkSource>
 800378a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003792:	f7ff f986 	bl	8002aa2 <LL_RCC_MSI_GetRange>
 8003796:	4603      	mov	r3, r0
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4a2b      	ldr	r2, [pc, #172]	; (800384c <HAL_RCC_GetSysClockFreq+0xcc>)
 80037a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e04b      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d102      	bne.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037ae:	4b28      	ldr	r3, [pc, #160]	; (8003850 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e045      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d10a      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037ba:	f7fe ff9f 	bl	80026fc <LL_RCC_HSE_IsEnabledDiv2>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e03a      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80037ca:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e037      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80037d0:	f7ff faa1 	bl	8002d16 <LL_RCC_PLL_GetMainSource>
 80037d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d003      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x64>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x6a>
 80037e2:	e00d      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80037e4:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037e6:	60bb      	str	r3, [r7, #8]
        break;
 80037e8:	e015      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037ea:	f7fe ff87 	bl	80026fc <LL_RCC_HSE_IsEnabledDiv2>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80037f4:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80037f8:	e00d      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037fc:	60bb      	str	r3, [r7, #8]
        break;
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003800:	f7ff f94f 	bl	8002aa2 <LL_RCC_MSI_GetRange>
 8003804:	4603      	mov	r3, r0
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	4a0f      	ldr	r2, [pc, #60]	; (800384c <HAL_RCC_GetSysClockFreq+0xcc>)
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	60bb      	str	r3, [r7, #8]
        break;
 8003814:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003816:	f7ff fa59 	bl	8002ccc <LL_RCC_PLL_GetN>
 800381a:	4602      	mov	r2, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	fb03 f402 	mul.w	r4, r3, r2
 8003822:	f7ff fa6c 	bl	8002cfe <LL_RCC_PLL_GetDivider>
 8003826:	4603      	mov	r3, r0
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	3301      	adds	r3, #1
 800382c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003830:	f7ff fa59 	bl	8002ce6 <LL_RCC_PLL_GetR>
 8003834:	4603      	mov	r3, r0
 8003836:	0f5b      	lsrs	r3, r3, #29
 8003838:	3301      	adds	r3, #1
 800383a:	fbb4 f3f3 	udiv	r3, r4, r3
 800383e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}
 800384a:	bf00      	nop
 800384c:	080077ec 	.word	0x080077ec
 8003850:	00f42400 	.word	0x00f42400
 8003854:	01e84800 	.word	0x01e84800

08003858 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003858:	b598      	push	{r3, r4, r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800385c:	f7ff ff90 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8003860:	4604      	mov	r4, r0
 8003862:	f7ff f9d1 	bl	8002c08 <LL_RCC_GetAHBPrescaler>
 8003866:	4603      	mov	r3, r0
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	4a03      	ldr	r2, [pc, #12]	; (800387c <HAL_RCC_GetHCLKFreq+0x24>)
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003878:	4618      	mov	r0, r3
 800387a:	bd98      	pop	{r3, r4, r7, pc}
 800387c:	0800778c 	.word	0x0800778c

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b598      	push	{r3, r4, r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003884:	f7ff ffe8 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 8003888:	4604      	mov	r4, r0
 800388a:	f7ff f9d7 	bl	8002c3c <LL_RCC_GetAPB1Prescaler>
 800388e:	4603      	mov	r3, r0
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	bd98      	pop	{r3, r4, r7, pc}
 80038a8:	080077cc 	.word	0x080077cc

080038ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ac:	b598      	push	{r3, r4, r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80038b0:	f7ff ffd2 	bl	8003858 <HAL_RCC_GetHCLKFreq>
 80038b4:	4604      	mov	r4, r0
 80038b6:	f7ff f9cd 	bl	8002c54 <LL_RCC_GetAPB2Prescaler>
 80038ba:	4603      	mov	r3, r0
 80038bc:	0adb      	lsrs	r3, r3, #11
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd98      	pop	{r3, r4, r7, pc}
 80038d4:	080077cc 	.word	0x080077cc

080038d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2bb0      	cmp	r3, #176	; 0xb0
 80038e4:	d903      	bls.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e007      	b.n	80038fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	4a11      	ldr	r2, [pc, #68]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80038fe:	f7ff f98f 	bl	8002c20 <LL_RCC_GetAHB4Prescaler>
 8003902:	4603      	mov	r3, r0
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	0c9c      	lsrs	r4, r3, #18
 8003922:	f7fe fedd 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 8003926:	4603      	mov	r3, r0
 8003928:	4619      	mov	r1, r3
 800392a:	4620      	mov	r0, r4
 800392c:	f000 f80c 	bl	8003948 <RCC_SetFlashLatency>
 8003930:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bd90      	pop	{r4, r7, pc}
 800393a:	bf00      	nop
 800393c:	080077ec 	.word	0x080077ec
 8003940:	0800778c 	.word	0x0800778c
 8003944:	431bde83 	.word	0x431bde83

08003948 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b093      	sub	sp, #76	; 0x4c
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <RCC_SetFlashLatency+0xf0>)
 8003954:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800395a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800395e:	4a37      	ldr	r2, [pc, #220]	; (8003a3c <RCC_SetFlashLatency+0xf4>)
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	ca07      	ldmia	r2, {r0, r1, r2}
 8003966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800396a:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <RCC_SetFlashLatency+0xf8>)
 800396c:	f107 040c 	add.w	r4, r7, #12
 8003970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003972:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003976:	2300      	movs	r3, #0
 8003978:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003980:	d11c      	bne.n	80039bc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003982:	2300      	movs	r3, #0
 8003984:	643b      	str	r3, [r7, #64]	; 0x40
 8003986:	e015      	b.n	80039b4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003990:	4413      	add	r3, r2
 8003992:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d808      	bhi.n	80039ae <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800399c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80039a4:	4413      	add	r3, r2
 80039a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80039ac:	e022      	b.n	80039f4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b0:	3301      	adds	r3, #1
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d9e6      	bls.n	8003988 <RCC_SetFlashLatency+0x40>
 80039ba:	e01b      	b.n	80039f4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039bc:	2300      	movs	r3, #0
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c0:	e015      	b.n	80039ee <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80039c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80039ca:	4413      	add	r3, r2
 80039cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d808      	bhi.n	80039e8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80039de:	4413      	add	r3, r2
 80039e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80039e6:	e005      	b.n	80039f4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80039e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ea:	3301      	adds	r3, #1
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d9e6      	bls.n	80039c2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <RCC_SetFlashLatency+0xfc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 0207 	bic.w	r2, r3, #7
 80039fc:	4911      	ldr	r1, [pc, #68]	; (8003a44 <RCC_SetFlashLatency+0xfc>)
 80039fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a04:	f7fe f804 	bl	8001a10 <HAL_GetTick>
 8003a08:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a0a:	e008      	b.n	8003a1e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a0c:	f7fe f800 	bl	8001a10 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e007      	b.n	8003a2e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <RCC_SetFlashLatency+0xfc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1ef      	bne.n	8003a0c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	374c      	adds	r7, #76	; 0x4c
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08007760 	.word	0x08007760
 8003a3c:	08007770 	.word	0x08007770
 8003a40:	0800777c 	.word	0x0800777c
 8003a44:	58004000 	.word	0x58004000

08003a48 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5a:	d101      	bne.n	8003a60 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_RCC_HSE_IsReady>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a7e:	d101      	bne.n	8003a84 <LL_RCC_HSE_IsReady+0x18>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <LL_RCC_HSE_IsReady+0x1a>
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_RCC_HSI_IsReady>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d101      	bne.n	8003aa8 <LL_RCC_HSI_IsReady+0x18>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <LL_RCC_HSI_IsReady+0x1a>
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_RCC_HSI48_IsReady>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d101      	bne.n	8003acc <LL_RCC_HSI48_IsReady+0x18>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <LL_RCC_HSI48_IsReady+0x1a>
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_LSE_IsEnabled>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <LL_RCC_LSE_IsEnabled+0x18>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <LL_RCC_LSE_IsEnabled+0x1a>
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_RCC_LSE_IsReady>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d101      	bne.n	8003b14 <LL_RCC_LSE_IsReady+0x18>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <LL_RCC_LSE_IsReady+0x1a>
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_LSI1_IsReady>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d101      	bne.n	8003b38 <LL_RCC_LSI1_IsReady+0x18>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <LL_RCC_LSI1_IsReady+0x1a>
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_RCC_LSI2_IsReady>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d101      	bne.n	8003b5c <LL_RCC_LSI2_IsReady+0x18>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <LL_RCC_LSI2_IsReady+0x1a>
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_MSI_IsReady>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d101      	bne.n	8003b7e <LL_RCC_MSI_IsReady+0x16>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_RCC_MSI_IsReady+0x18>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_MSI_EnablePLLMode>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b98:	f043 0304 	orr.w	r3, r3, #4
 8003b9c:	6013      	str	r3, [r2, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_RCC_MSI_GetRange>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb8:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2bb0      	cmp	r3, #176	; 0xb0
 8003bbe:	d901      	bls.n	8003bc4 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003bc0:	23b0      	movs	r3, #176	; 0xb0
 8003bc2:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_RCC_SetRFWKPClockSource>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_RCC_GetRFWKPClockSource>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_RCC_GetAHBPrescaler>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_RCC_GetAPB1Prescaler>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_GetAPB2Prescaler>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_RCC_SetSMPSClockSource>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f023 0203 	bic.w	r2, r3, #3
 8003c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_RCC_GetSMPSClockSource>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_SetSMPSPrescaler>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_RCC_GetSMPSPrescaler>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8003ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_RCC_SetUSARTClockSource>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f023 0203 	bic.w	r2, r3, #3
 8003cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_RCC_SetLPUARTClockSource>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_RCC_SetI2CClockSource>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d50:	43db      	mvns	r3, r3
 8003d52:	401a      	ands	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <LL_RCC_SetLPTIMClockSource>:
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LL_RCC_SetSAIClockSource>:
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_RCC_SetRNGClockSource>:
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_RCC_SetCLK48ClockSource>:
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_SetUSBClockSource>:
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ffe3 	bl	8003dfe <LL_RCC_SetCLK48ClockSource>
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <LL_RCC_SetADCClockSource>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_RCC_GetUSARTClockSource>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4013      	ands	r3, r2
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_RCC_GetLPUARTClockSource>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4013      	ands	r3, r2
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_RCC_GetI2CClockSource>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	091a      	lsrs	r2, r3, #4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	4313      	orrs	r3, r2
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_GetLPTIMClockSource>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	0c1a      	lsrs	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4313      	orrs	r3, r2
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_GetSAIClockSource>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4013      	ands	r3, r2
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_RCC_GetRNGClockSource>:
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4013      	ands	r3, r2
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_RCC_GetCLK48ClockSource>:
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4013      	ands	r3, r2
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_RCC_GetUSBClockSource>:
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ffe9 	bl	8003f3a <LL_RCC_GetCLK48ClockSource>
 8003f68:	4603      	mov	r3, r0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <LL_RCC_GetADCClockSource>:
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8003f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4013      	ands	r3, r2
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_SetRTCClockSource>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_GetRTCClockSource>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_RCC_ForceBackupDomainReset>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_ReleaseBackupDomainReset>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_RCC_PLL_IsReady>:
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800402e:	d101      	bne.n	8004034 <LL_RCC_PLL_IsReady+0x18>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <LL_RCC_PLL_IsReady+0x1a>
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_RCC_PLL_GetN>:
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_PLL_GetP>:
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_PLL_GetQ>:
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_RCC_PLL_GetDivider>:
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_PLLSAI1_Enable>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040b4:	6013      	str	r3, [r2, #0]
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_RCC_PLLSAI1_Disable>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040d2:	6013      	str	r3, [r2, #0]
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_RCC_PLLSAI1_IsReady>:
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f0:	d101      	bne.n	80040f6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_RCC_PLLSAI1_GetN>:
{
 8004102:	b480      	push	{r7}
 8004104:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8004106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004112:	4618      	mov	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_RCC_PLLSAI1_GetP>:
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_RCC_PLLSAI1_GetQ>:
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_RCC_PLLSAI1_GetR>:
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800415a:	4618      	mov	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_RCC_PLL_GetMainSource>:
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0303 	and.w	r3, r3, #3
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004184:	2300      	movs	r3, #0
 8004186:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004188:	2300      	movs	r3, #0
 800418a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d034      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041a0:	d021      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80041a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041a6:	d81b      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041ac:	d01d      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80041ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b2:	d815      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80041b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041bc:	d110      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80041ce:	e00d      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fd64 	bl	8004ca2 <RCCEx_PLLSAI1_ConfigNP>
 80041da:	4603      	mov	r3, r0
 80041dc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041de:	e005      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
        break;
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80041ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ec:	7ffb      	ldrb	r3, [r7, #31]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fdd5 	bl	8003da6 <LL_RCC_SetSAIClockSource>
 80041fc:	e001      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fe:	7ffb      	ldrb	r3, [r7, #31]
 8004200:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420a:	2b00      	cmp	r3, #0
 800420c:	d046      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800420e:	f7ff fed6 	bl	8003fbe <LL_RCC_GetRTCClockSource>
 8004212:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	429a      	cmp	r2, r3
 800421c:	d03c      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800421e:	f7fe fa4f 	bl	80026c0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff feb0 	bl	8003f92 <LL_RCC_SetRTCClockSource>
 8004232:	e02e      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800423e:	f7ff fecb 	bl	8003fd8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004242:	f7ff feda 	bl	8003ffa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800425e:	f7ff fc3b 	bl	8003ad8 <LL_RCC_LSE_IsEnabled>
 8004262:	4603      	mov	r3, r0
 8004264:	2b01      	cmp	r3, #1
 8004266:	d114      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004268:	f7fd fbd2 	bl	8001a10 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800426e:	e00b      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f7fd fbce 	bl	8001a10 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d902      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	77fb      	strb	r3, [r7, #31]
              break;
 8004286:	e004      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004288:	f7ff fc38 	bl	8003afc <LL_RCC_LSE_IsReady>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d1ee      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004292:	7ffb      	ldrb	r3, [r7, #31]
 8004294:	77bb      	strb	r3, [r7, #30]
 8004296:	e001      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	7ffb      	ldrb	r3, [r7, #31]
 800429a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fd17 	bl	8003ce0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fd22 	bl	8003d0c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fd4a 	bl	8003d72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fd3f 	bl	8003d72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fd17 	bl	8003d38 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fd0c 	bl	8003d38 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d022      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fd7a 	bl	8003e2a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800433e:	d107      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004358:	d10b      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fcfa 	bl	8004d58 <RCCEx_PLLSAI1_ConfigNQ>
 8004364:	4603      	mov	r3, r0
 8004366:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004368:	7ffb      	ldrb	r3, [r7, #31]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800436e:	7ffb      	ldrb	r3, [r7, #31]
 8004370:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437a:	2b00      	cmp	r3, #0
 800437c:	d02b      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d008      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004390:	d003      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fd17 	bl	8003dd2 <LL_RCC_SetRNGClockSource>
 80043a4:	e00a      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	2000      	movs	r0, #0
 80043b2:	f7ff fd0e 	bl	8003dd2 <LL_RCC_SetRNGClockSource>
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff fd21 	bl	8003dfe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80043c4:	d107      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d022      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fd2a 	bl	8003e40 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f4:	d107      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440e:	d10b      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fcfa 	bl	8004e0e <RCCEx_PLLSAI1_ConfigNR>
 800441a:	4603      	mov	r3, r0
 800441c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800441e:	7ffb      	ldrb	r3, [r7, #31]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004424:	7ffb      	ldrb	r3, [r7, #31]
 8004426:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fbca 	bl	8003bd2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fc26 	bl	8003ca0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fc01 	bl	8003c60 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800445e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b093      	sub	sp, #76	; 0x4c
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8004474:	f7ff fc28 	bl	8003cc8 <LL_RCC_GetSMPSPrescaler>
 8004478:	4603      	mov	r3, r0
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004484:	d12d      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8004486:	f7ff fd9a 	bl	8003fbe <LL_RCC_GetRTCClockSource>
 800448a:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	d109      	bne.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8004494:	f7ff fb32 	bl	8003afc <LL_RCC_LSE_IsReady>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	f040 83d8 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80044a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
 80044a6:	e3d3      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ae:	d110      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80044b0:	f7ff fb36 	bl	8003b20 <LL_RCC_LSI1_IsReady>
 80044b4:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80044b6:	f7ff fb45 	bl	8003b44 <LL_RCC_LSI2_IsReady>
 80044ba:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d003      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f040 83c3 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80044ca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044ce:	647b      	str	r3, [r7, #68]	; 0x44
 80044d0:	e3be      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d8:	f040 83ba 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 80044dc:	4bba      	ldr	r3, [pc, #744]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80044de:	647b      	str	r3, [r7, #68]	; 0x44
 80044e0:	e3b6      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d130      	bne.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 80044e8:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80044ec:	f7ff fd05 	bl	8003efa <LL_RCC_GetSAIClockSource>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044f6:	d008      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80044f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044fc:	d822      	bhi.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004506:	d013      	beq.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8004508:	e01c      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 800450a:	f7ff fac1 	bl	8003a90 <LL_RCC_HSI_IsReady>
 800450e:	4603      	mov	r3, r0
 8004510:	2b01      	cmp	r3, #1
 8004512:	f040 837e 	bne.w	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 8004516:	4bad      	ldr	r3, [pc, #692]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800451a:	e37a      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800451c:	f7ff fddf 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	f040 8377 	bne.w	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8004528:	f000 fdce 	bl	80050c8 <RCC_PLLSAI1_GetFreqDomain_P>
 800452c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800452e:	e372      	b.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8004530:	f7ff fd74 	bl	800401c <LL_RCC_PLL_IsReady>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	f040 836f 	bne.w	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 800453c:	f000 fcc2 	bl	8004ec4 <RCC_PLL_GetFreqDomain_P>
 8004540:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8004542:	e36a      	b.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004544:	4ba2      	ldr	r3, [pc, #648]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8004546:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8004548:	e382      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d168      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 8004552:	f000 fb87 	bl	8004c64 <HAL_RCCEx_GetRngCLKSource>
 8004556:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d110      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8004560:	f7ff fade 	bl	8003b20 <LL_RCC_LSI1_IsReady>
 8004564:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8004566:	f7ff faed 	bl	8003b44 <LL_RCC_LSI2_IsReady>
 800456a:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d003      	beq.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b01      	cmp	r3, #1
 8004576:	f040 836b 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800457a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800457e:	647b      	str	r3, [r7, #68]	; 0x44
 8004580:	e366      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004588:	d109      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800458a:	f7ff fab7 	bl	8003afc <LL_RCC_LSE_IsReady>
 800458e:	4603      	mov	r3, r0
 8004590:	2b01      	cmp	r3, #1
 8004592:	f040 835d 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8004596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459a:	647b      	str	r3, [r7, #68]	; 0x44
 800459c:	e358      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80045a4:	d10e      	bne.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 80045a6:	f7ff fd39 	bl	800401c <LL_RCC_PLL_IsReady>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 834f 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80045b2:	f000 fcdd 	bl	8004f70 <RCC_PLL_GetFreqDomain_Q>
 80045b6:	4603      	mov	r3, r0
 80045b8:	4a86      	ldr	r2, [pc, #536]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
 80045c2:	e345      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 80045ca:	d114      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 80045cc:	f7ff facc 	bl	8003b68 <LL_RCC_MSI_IsReady>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	f040 833c 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 80045d8:	f7ff fae6 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 80045dc:	4603      	mov	r3, r0
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	4a7c      	ldr	r2, [pc, #496]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80045e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ea:	4a7a      	ldr	r2, [pc, #488]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	647b      	str	r3, [r7, #68]	; 0x44
 80045f4:	e32c      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 80045fc:	d109      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80045fe:	f7ff fd6e 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004602:	4603      	mov	r3, r0
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 8323 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800460a:	f000 fdb3 	bl	8005174 <RCC_PLLSAI1_GetFreqDomain_Q>
 800460e:	6478      	str	r0, [r7, #68]	; 0x44
 8004610:	e31e      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 8004612:	f7ff fa4f 	bl	8003ab4 <LL_RCC_HSI48_IsReady>
 8004616:	4603      	mov	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	f040 8319 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 800461e:	4b6b      	ldr	r3, [pc, #428]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004620:	647b      	str	r3, [r7, #68]	; 0x44
 8004622:	e315      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d13f      	bne.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 800462c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8004630:	f7ff fc93 	bl	8003f5a <LL_RCC_GetUSBClockSource>
 8004634:	4603      	mov	r3, r0
 8004636:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800463a:	d01d      	beq.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800463c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004640:	d82b      	bhi.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 8004642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004646:	d003      	beq.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800464e:	e024      	b.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8004650:	f7ff fd45 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	f040 82e1 	bne.w	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800465c:	f000 fd8a 	bl	8005174 <RCC_PLLSAI1_GetFreqDomain_Q>
 8004660:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8004662:	e2dc      	b.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8004664:	f7ff fcda 	bl	800401c <LL_RCC_PLL_IsReady>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	f040 82d9 	bne.w	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 8004670:	f000 fc7e 	bl	8004f70 <RCC_PLL_GetFreqDomain_Q>
 8004674:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8004676:	e2d4      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8004678:	f7ff fa76 	bl	8003b68 <LL_RCC_MSI_IsReady>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	f040 82d1 	bne.w	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004684:	f7ff fa90 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8004688:	4603      	mov	r3, r0
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8004692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004696:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8004698:	e2c5      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 800469a:	f7ff fa0b 	bl	8003ab4 <LL_RCC_HSI48_IsReady>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	f040 82c2 	bne.w	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 80046a6:	4b4d      	ldr	r3, [pc, #308]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80046a8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80046aa:	e2be      	b.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d140      	bne.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80046b2:	2003      	movs	r0, #3
 80046b4:	f7ff fbda 	bl	8003e6c <LL_RCC_GetUSARTClockSource>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d013      	beq.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d81b      	bhi.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d002      	beq.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d004      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80046ca:	e016      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80046cc:	f7ff f858 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80046d0:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80046d2:	e2bd      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80046d4:	f7ff f9dc 	bl	8003a90 <LL_RCC_HSI_IsReady>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	f040 82a7 	bne.w	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 80046e0:	4b3a      	ldr	r3, [pc, #232]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80046e2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80046e4:	e2a3      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80046e6:	f7ff fa09 	bl	8003afc <LL_RCC_LSE_IsReady>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 82a0 	bne.w	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 80046f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f6:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80046f8:	e29b      	b.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80046fa:	f7ff f841 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80046fe:	4604      	mov	r4, r0
 8004700:	f7ff fa8a 	bl	8003c18 <LL_RCC_GetAHBPrescaler>
 8004704:	4603      	mov	r3, r0
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	4a34      	ldr	r2, [pc, #208]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800470e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004712:	fbb4 f4f3 	udiv	r4, r4, r3
 8004716:	f7ff fa97 	bl	8003c48 <LL_RCC_GetAPB2Prescaler>
 800471a:	4603      	mov	r3, r0
 800471c:	0adb      	lsrs	r3, r3, #11
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	4a30      	ldr	r2, [pc, #192]	; (80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8004724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	fa24 f303 	lsr.w	r3, r4, r3
 8004730:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 8004732:	e28d      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d156      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 800473a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800473e:	f7ff fba5 	bl	8003e8c <LL_RCC_GetLPUARTClockSource>
 8004742:	4603      	mov	r3, r0
 8004744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004748:	d016      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800474a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800474e:	d81d      	bhi.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d003      	beq.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8004756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475a:	d004      	beq.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800475c:	e016      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800475e:	f7ff f80f 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004762:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8004764:	e274      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8004766:	f7ff f993 	bl	8003a90 <LL_RCC_HSI_IsReady>
 800476a:	4603      	mov	r3, r0
 800476c:	2b01      	cmp	r3, #1
 800476e:	f040 8262 	bne.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8004776:	e25e      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8004778:	f7ff f9c0 	bl	8003afc <LL_RCC_LSE_IsReady>
 800477c:	4603      	mov	r3, r0
 800477e:	2b01      	cmp	r3, #1
 8004780:	f040 825b 	bne.w	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 8004784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004788:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800478a:	e256      	b.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800478c:	f7fe fff8 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004790:	4604      	mov	r4, r0
 8004792:	f7ff fa41 	bl	8003c18 <LL_RCC_GetAHBPrescaler>
 8004796:	4603      	mov	r3, r0
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	4a10      	ldr	r2, [pc, #64]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80047a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a4:	fbb4 f4f3 	udiv	r4, r4, r3
 80047a8:	f7ff fa42 	bl	8003c30 <LL_RCC_GetAPB1Prescaler>
 80047ac:	4603      	mov	r3, r0
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80047b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	fa24 f303 	lsr.w	r3, r4, r3
 80047c2:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80047c4:	e244      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80047c6:	bf00      	nop
 80047c8:	000f4240 	.word	0x000f4240
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	001fff68 	.word	0x001fff68
 80047d4:	aaaaaaab 	.word	0xaaaaaaab
 80047d8:	080077ec 	.word	0x080077ec
 80047dc:	02dc6c00 	.word	0x02dc6c00
 80047e0:	0800778c 	.word	0x0800778c
 80047e4:	080077cc 	.word	0x080077cc
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d12a      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 80047f0:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 80047f4:	f7ff fbbd 	bl	8003f72 <LL_RCC_GetADCClockSource>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047fe:	d014      	beq.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004800:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004804:	f200 821b 	bhi.w	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8004808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480c:	d003      	beq.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800480e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004812:	d00e      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 8004814:	e213      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8004816:	f7ff fc62 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 800481a:	4603      	mov	r3, r0
 800481c:	2b01      	cmp	r3, #1
 800481e:	f040 8210 	bne.w	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 8004822:	f000 fbfb 	bl	800501c <RCC_PLLSAI1_GetFreqDomain_R>
 8004826:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8004828:	e20b      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 800482a:	f7fe ffa9 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800482e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8004830:	e20e      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 8004832:	f7ff fbf3 	bl	800401c <LL_RCC_PLL_IsReady>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	f040 8204 	bne.w	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 800483e:	f000 fb41 	bl	8004ec4 <RCC_PLL_GetFreqDomain_P>
 8004842:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8004844:	e1ff      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d135      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 800484c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004850:	f7ff fb2c 	bl	8003eac <LL_RCC_GetI2CClockSource>
 8004854:	4603      	mov	r3, r0
 8004856:	4ab7      	ldr	r2, [pc, #732]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800485c:	4ab6      	ldr	r2, [pc, #728]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8004862:	e00c      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8004864:	f7fe ff8c 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004868:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800486a:	e1f1      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800486c:	f7ff f910 	bl	8003a90 <LL_RCC_HSI_IsReady>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	f040 81e9 	bne.w	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 8004878:	4bb0      	ldr	r3, [pc, #704]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800487a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800487c:	e1e5      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800487e:	f7fe ff7f 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004882:	4604      	mov	r4, r0
 8004884:	f7ff f9c8 	bl	8003c18 <LL_RCC_GetAHBPrescaler>
 8004888:	4603      	mov	r3, r0
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	4aab      	ldr	r2, [pc, #684]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8004892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004896:	fbb4 f4f3 	udiv	r4, r4, r3
 800489a:	f7ff f9c9 	bl	8003c30 <LL_RCC_GetAPB1Prescaler>
 800489e:	4603      	mov	r3, r0
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	4aa7      	ldr	r2, [pc, #668]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80048a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa24 f303 	lsr.w	r3, r4, r3
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80048b6:	e1cb      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d135      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80048be:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80048c2:	f7ff faf3 	bl	8003eac <LL_RCC_GetI2CClockSource>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a9f      	ldr	r2, [pc, #636]	; (8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80048ce:	4a9f      	ldr	r2, [pc, #636]	; (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80048d4:	e00c      	b.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80048d6:	f7fe ff53 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80048da:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80048dc:	e1b8      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80048de:	f7ff f8d7 	bl	8003a90 <LL_RCC_HSI_IsReady>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f040 81b2 	bne.w	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 80048ea:	4b94      	ldr	r3, [pc, #592]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80048ee:	e1ae      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80048f0:	f7fe ff46 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80048f4:	4604      	mov	r4, r0
 80048f6:	f7ff f98f 	bl	8003c18 <LL_RCC_GetAHBPrescaler>
 80048fa:	4603      	mov	r3, r0
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	4a8f      	ldr	r2, [pc, #572]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8004904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004908:	fbb4 f4f3 	udiv	r4, r4, r3
 800490c:	f7ff f990 	bl	8003c30 <LL_RCC_GetAPB1Prescaler>
 8004910:	4603      	mov	r3, r0
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	4a8a      	ldr	r2, [pc, #552]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800491a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	fa24 f303 	lsr.w	r3, r4, r3
 8004926:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8004928:	e192      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b10      	cmp	r3, #16
 800492e:	d151      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 8004930:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004934:	f7ff face 	bl	8003ed4 <LL_RCC_GetLPTIMClockSource>
 8004938:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	4a84      	ldr	r2, [pc, #528]	; (8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d110      	bne.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8004942:	f7ff f8ed 	bl	8003b20 <LL_RCC_LSI1_IsReady>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8004948:	f7ff f8fc 	bl	8003b44 <LL_RCC_LSI2_IsReady>
 800494c:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	2b01      	cmp	r3, #1
 8004952:	d003      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	2b01      	cmp	r3, #1
 8004958:	f040 817a 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800495c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
 8004962:	e175      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	4a7b      	ldr	r2, [pc, #492]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800496c:	f7ff f890 	bl	8003a90 <LL_RCC_HSI_IsReady>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	f040 816c 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8004978:	4b70      	ldr	r3, [pc, #448]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800497a:	647b      	str	r3, [r7, #68]	; 0x44
 800497c:	e168      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8004984:	d109      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8004986:	f7ff f8b9 	bl	8003afc <LL_RCC_LSE_IsReady>
 800498a:	4603      	mov	r3, r0
 800498c:	2b01      	cmp	r3, #1
 800498e:	f040 815f 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8004992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004996:	647b      	str	r3, [r7, #68]	; 0x44
 8004998:	e15a      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 800499a:	f7fe fef1 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800499e:	4604      	mov	r4, r0
 80049a0:	f7ff f93a 	bl	8003c18 <LL_RCC_GetAHBPrescaler>
 80049a4:	4603      	mov	r3, r0
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	4a64      	ldr	r2, [pc, #400]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80049ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b2:	fbb4 f4f3 	udiv	r4, r4, r3
 80049b6:	f7ff f93b 	bl	8003c30 <LL_RCC_GetAPB1Prescaler>
 80049ba:	4603      	mov	r3, r0
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	4a60      	ldr	r2, [pc, #384]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80049c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	fa24 f303 	lsr.w	r3, r4, r3
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
 80049d2:	e13d      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d151      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 80049da:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80049de:	f7ff fa79 	bl	8003ed4 <LL_RCC_GetLPTIMClockSource>
 80049e2:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	4a5c      	ldr	r2, [pc, #368]	; (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d110      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80049ec:	f7ff f898 	bl	8003b20 <LL_RCC_LSI1_IsReady>
 80049f0:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80049f2:	f7ff f8a7 	bl	8003b44 <LL_RCC_LSI2_IsReady>
 80049f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d003      	beq.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	f040 8125 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8004a06:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0c:	e120      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	4a52      	ldr	r2, [pc, #328]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d108      	bne.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8004a16:	f7ff f83b 	bl	8003a90 <LL_RCC_HSI_IsReady>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	f040 8117 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8004a22:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8004a24:	647b      	str	r3, [r7, #68]	; 0x44
 8004a26:	e113      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8004a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004a2e:	d109      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8004a30:	f7ff f864 	bl	8003afc <LL_RCC_LSE_IsReady>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	f040 810a 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8004a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
 8004a42:	e105      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8004a44:	f7fe fe9c 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004a48:	4604      	mov	r4, r0
 8004a4a:	f7ff f8e5 	bl	8003c18 <LL_RCC_GetAHBPrescaler>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a3a      	ldr	r2, [pc, #232]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8004a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004a60:	f7ff f8e6 	bl	8003c30 <LL_RCC_GetAPB1Prescaler>
 8004a64:	4603      	mov	r3, r0
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4a35      	ldr	r2, [pc, #212]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8004a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	fa24 f303 	lsr.w	r3, r4, r3
 8004a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a7c:	e0e8      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a84:	d119      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 8004a86:	f7ff f8ba 	bl	8003bfe <LL_RCC_GetRFWKPClockSource>
 8004a8a:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a92:	d109      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8004a94:	f7ff f832 	bl	8003afc <LL_RCC_LSE_IsReady>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	f040 80d8 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8004aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa6:	e0d3      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004aae:	f040 80cf 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 8004ab2:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab8:	e0ca      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac0:	f040 80c6 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 8004ac4:	f7ff f8e0 	bl	8003c88 <LL_RCC_GetSMPSClockSource>
 8004ac8:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8004aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d115      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8004ad0:	f7fe ffde 	bl	8003a90 <LL_RCC_HSI_IsReady>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	f040 80ba 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8004adc:	4920      	ldr	r1, [pc, #128]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8004ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	440b      	add	r3, r1
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8004af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	647b      	str	r3, [r7, #68]	; 0x44
 8004afa:	e0a9      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8004afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b02:	d131      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 8004b04:	f7fe ffb2 	bl	8003a6c <LL_RCC_HSE_IsReady>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	f040 80a0 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8004b10:	4913      	ldr	r1, [pc, #76]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8004b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b14:	4613      	mov	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4413      	add	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	440b      	add	r3, r1
 8004b1e:	3314      	adds	r3, #20
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8004b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	e08e      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8004b32:	bf00      	nop
 8004b34:	00030100 	.word	0x00030100
 8004b38:	00030200 	.word	0x00030200
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	0800778c 	.word	0x0800778c
 8004b44:	080077cc 	.word	0x080077cc
 8004b48:	00301000 	.word	0x00301000
 8004b4c:	00302000 	.word	0x00302000
 8004b50:	000c0004 	.word	0x000c0004
 8004b54:	000c0008 	.word	0x000c0008
 8004b58:	00300010 	.word	0x00300010
 8004b5c:	00300020 	.word	0x00300020
 8004b60:	0800782c 	.word	0x0800782c
 8004b64:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8004b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6e:	d16f      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 8004b70:	f7ff f81a 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2bb0      	cmp	r3, #176	; 0xb0
 8004b78:	d037      	beq.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004b7a:	2bb0      	cmp	r3, #176	; 0xb0
 8004b7c:	d844      	bhi.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004b7e:	2ba0      	cmp	r3, #160	; 0xa0
 8004b80:	d024      	beq.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8004b82:	2ba0      	cmp	r3, #160	; 0xa0
 8004b84:	d840      	bhi.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d002      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8004b8a:	2b90      	cmp	r3, #144	; 0x90
 8004b8c:	d00f      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 8004b8e:	e03b      	b.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8004b90:	4b32      	ldr	r3, [pc, #200]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004b92:	6a19      	ldr	r1, [r3, #32]
 8004b94:	4832      	ldr	r0, [pc, #200]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8004b96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b98:	4613      	mov	r3, r2
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4403      	add	r3, r0
 8004ba2:	3310      	adds	r3, #16
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004baa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004bac:	e02d      	b.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004bb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bb2:	482b      	ldr	r0, [pc, #172]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8004bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4403      	add	r3, r0
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004bca:	e01e      	b.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8004bcc:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004bce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004bd0:	4823      	ldr	r0, [pc, #140]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8004bd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	4403      	add	r3, r0
 8004bde:	3308      	adds	r3, #8
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004be8:	e00f      	b.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8004bea:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8004bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bee:	481c      	ldr	r0, [pc, #112]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8004bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4403      	add	r3, r0
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c04:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004c06:	e000      	b.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8004c08:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8004c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c10:	e01e      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c12:	bf00      	nop
 8004c14:	e01c      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c16:	bf00      	nop
 8004c18:	e01a      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e018      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e016      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c22:	bf00      	nop
 8004c24:	e014      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c26:	bf00      	nop
 8004c28:	e012      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e010      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e00e      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c32:	bf00      	nop
 8004c34:	e00c      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c36:	bf00      	nop
 8004c38:	e00a      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e006      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8004c4e:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 8004c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	374c      	adds	r7, #76	; 0x4c
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd90      	pop	{r4, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	080077ec 	.word	0x080077ec
 8004c60:	0800782c 	.word	0x0800782c

08004c64 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8004c6a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8004c6e:	f7ff f954 	bl	8003f1a <LL_RCC_GetRNGClockSource>
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d108      	bne.n	8004c8c <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8004c7a:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8004c7e:	f7ff f95c 	bl	8003f3a <LL_RCC_GetCLK48ClockSource>
 8004c82:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8004c8c:	687b      	ldr	r3, [r7, #4]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004c9a:	f7fe ff76 	bl	8003b8a <LL_RCC_MSI_EnablePLLMode>
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004cae:	f7ff fa07 	bl	80040c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cb2:	f7fc fead 	bl	8001a10 <HAL_GetTick>
 8004cb6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004cb8:	e009      	b.n	8004cce <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cba:	f7fc fea9 	bl	8001a10 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d902      	bls.n	8004cce <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ccc:	e004      	b.n	8004cd8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004cce:	f7ff fa06 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d137      	bne.n	8004d4e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004d0c:	f7ff f9c9 	bl	80040a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d10:	f7fc fe7e 	bl	8001a10 <HAL_GetTick>
 8004d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d16:	e009      	b.n	8004d2c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d18:	f7fc fe7a 	bl	8001a10 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d902      	bls.n	8004d2c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	73fb      	strb	r3, [r7, #15]
        break;
 8004d2a:	e004      	b.n	8004d36 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d2c:	f7ff f9d7 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d1f0      	bne.n	8004d18 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d108      	bne.n	8004d4e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004d64:	f7ff f9ac 	bl	80040c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d68:	f7fc fe52 	bl	8001a10 <HAL_GetTick>
 8004d6c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d6e:	e009      	b.n	8004d84 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d70:	f7fc fe4e 	bl	8001a10 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d902      	bls.n	8004d84 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	73fb      	strb	r3, [r7, #15]
      break;
 8004d82:	e004      	b.n	8004d8e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d84:	f7ff f9ab 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d137      	bne.n	8004e04 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da8:	4313      	orrs	r3, r2
 8004daa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004dc2:	f7ff f96e 	bl	80040a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc6:	f7fc fe23 	bl	8001a10 <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004dcc:	e009      	b.n	8004de2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dce:	f7fc fe1f 	bl	8001a10 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d902      	bls.n	8004de2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	73fb      	strb	r3, [r7, #15]
        break;
 8004de0:	e004      	b.n	8004dec <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004de2:	f7ff f97c 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d1f0      	bne.n	8004dce <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e00:	4313      	orrs	r3, r2
 8004e02:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004e1a:	f7ff f951 	bl	80040c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e1e:	f7fc fdf7 	bl	8001a10 <HAL_GetTick>
 8004e22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e24:	e009      	b.n	8004e3a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e26:	f7fc fdf3 	bl	8001a10 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d902      	bls.n	8004e3a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	73fb      	strb	r3, [r7, #15]
      break;
 8004e38:	e004      	b.n	8004e44 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e3a:	f7ff f950 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d137      	bne.n	8004eba <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e74:	4313      	orrs	r3, r2
 8004e76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004e78:	f7ff f913 	bl	80040a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fc fdc8 	bl	8001a10 <HAL_GetTick>
 8004e80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e82:	e009      	b.n	8004e98 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e84:	f7fc fdc4 	bl	8001a10 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d902      	bls.n	8004e98 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	73fb      	strb	r3, [r7, #15]
        break;
 8004e96:	e004      	b.n	8004ea2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e98:	f7ff f921 	bl	80040de <LL_RCC_PLLSAI1_IsReady>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d1f0      	bne.n	8004e84 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004eca:	f7ff f94b 	bl	8004164 <LL_RCC_PLL_GetMainSource>
 8004ece:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d017      	beq.n	8004f06 <RCC_PLL_GetFreqDomain_P+0x42>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d81f      	bhi.n	8004f1c <RCC_PLL_GetFreqDomain_P+0x58>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d003      	beq.n	8004eea <RCC_PLL_GetFreqDomain_P+0x26>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d00b      	beq.n	8004f00 <RCC_PLL_GetFreqDomain_P+0x3c>
 8004ee8:	e018      	b.n	8004f1c <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004eea:	f7fe fe5d 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8004ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efc:	607b      	str	r3, [r7, #4]
      break;
 8004efe:	e018      	b.n	8004f32 <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8004f02:	607b      	str	r3, [r7, #4]
      break;
 8004f04:	e015      	b.n	8004f32 <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f06:	f7fe fd9f 	bl	8003a48 <LL_RCC_HSE_IsEnabledDiv2>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d102      	bne.n	8004f16 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8004f10:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8004f12:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8004f14:	e00d      	b.n	8004f32 <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <RCC_PLL_GetFreqDomain_P+0xa8>)
 8004f18:	607b      	str	r3, [r7, #4]
      break;
 8004f1a:	e00a      	b.n	8004f32 <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f1c:	f7fe fe44 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8004f20:	4603      	mov	r3, r0
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8004f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2e:	607b      	str	r3, [r7, #4]
      break;
 8004f30:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004f32:	f7ff f885 	bl	8004040 <LL_RCC_PLL_GetN>
 8004f36:	4602      	mov	r2, r0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	fb03 f402 	mul.w	r4, r3, r2
 8004f3e:	f7ff f8a4 	bl	800408a <LL_RCC_PLL_GetDivider>
 8004f42:	4603      	mov	r3, r0
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	3301      	adds	r3, #1
 8004f48:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f4c:	f7ff f885 	bl	800405a <LL_RCC_PLL_GetP>
 8004f50:	4603      	mov	r3, r0
 8004f52:	0c5b      	lsrs	r3, r3, #17
 8004f54:	3301      	adds	r3, #1
 8004f56:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd90      	pop	{r4, r7, pc}
 8004f62:	bf00      	nop
 8004f64:	080077ec 	.word	0x080077ec
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	01e84800 	.word	0x01e84800

08004f70 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8004f70:	b590      	push	{r4, r7, lr}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004f76:	f7ff f8f5 	bl	8004164 <LL_RCC_PLL_GetMainSource>
 8004f7a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d017      	beq.n	8004fb2 <RCC_PLL_GetFreqDomain_Q+0x42>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d81f      	bhi.n	8004fc8 <RCC_PLL_GetFreqDomain_Q+0x58>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d003      	beq.n	8004f96 <RCC_PLL_GetFreqDomain_Q+0x26>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d00b      	beq.n	8004fac <RCC_PLL_GetFreqDomain_Q+0x3c>
 8004f94:	e018      	b.n	8004fc8 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f96:	f7fe fe07 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8004fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa8:	607b      	str	r3, [r7, #4]
      break;
 8004faa:	e018      	b.n	8004fde <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004fac:	4b19      	ldr	r3, [pc, #100]	; (8005014 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8004fae:	607b      	str	r3, [r7, #4]
      break;
 8004fb0:	e015      	b.n	8004fde <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004fb2:	f7fe fd49 	bl	8003a48 <LL_RCC_HSE_IsEnabledDiv2>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d102      	bne.n	8004fc2 <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8004fbc:	4b15      	ldr	r3, [pc, #84]	; (8005014 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8004fbe:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8004fc0:	e00d      	b.n	8004fde <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8004fc4:	607b      	str	r3, [r7, #4]
      break;
 8004fc6:	e00a      	b.n	8004fde <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004fc8:	f7fe fdee 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8004fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fda:	607b      	str	r3, [r7, #4]
      break;
 8004fdc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004fde:	f7ff f82f 	bl	8004040 <LL_RCC_PLL_GetN>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	fb03 f402 	mul.w	r4, r3, r2
 8004fea:	f7ff f84e 	bl	800408a <LL_RCC_PLL_GetDivider>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ff8:	f7ff f83b 	bl	8004072 <LL_RCC_PLL_GetQ>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	0e5b      	lsrs	r3, r3, #25
 8005000:	3301      	adds	r3, #1
 8005002:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}
 800500e:	bf00      	nop
 8005010:	080077ec 	.word	0x080077ec
 8005014:	00f42400 	.word	0x00f42400
 8005018:	01e84800 	.word	0x01e84800

0800501c <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005022:	f7ff f89f 	bl	8004164 <LL_RCC_PLL_GetMainSource>
 8005026:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d017      	beq.n	800505e <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b03      	cmp	r3, #3
 8005032:	d81f      	bhi.n	8005074 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d003      	beq.n	8005042 <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d00b      	beq.n	8005058 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8005040:	e018      	b.n	8005074 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005042:	f7fe fdb1 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8005046:	4603      	mov	r3, r0
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8005050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005054:	607b      	str	r3, [r7, #4]
      break;
 8005056:	e018      	b.n	800508a <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 800505a:	607b      	str	r3, [r7, #4]
      break;
 800505c:	e015      	b.n	800508a <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800505e:	f7fe fcf3 	bl	8003a48 <LL_RCC_HSE_IsEnabledDiv2>
 8005062:	4603      	mov	r3, r0
 8005064:	2b01      	cmp	r3, #1
 8005066:	d102      	bne.n	800506e <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 800506a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 800506c:	e00d      	b.n	800508a <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 800506e:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8005070:	607b      	str	r3, [r7, #4]
      break;
 8005072:	e00a      	b.n	800508a <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005074:	f7fe fd98 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8005078:	4603      	mov	r3, r0
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8005082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005086:	607b      	str	r3, [r7, #4]
      break;
 8005088:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800508a:	f7ff f83a 	bl	8004102 <LL_RCC_PLLSAI1_GetN>
 800508e:	4602      	mov	r2, r0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	fb03 f402 	mul.w	r4, r3, r2
 8005096:	f7fe fff8 	bl	800408a <LL_RCC_PLL_GetDivider>
 800509a:	4603      	mov	r3, r0
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	3301      	adds	r3, #1
 80050a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80050a4:	f7ff f852 	bl	800414c <LL_RCC_PLLSAI1_GetR>
 80050a8:	4603      	mov	r3, r0
 80050aa:	0f5b      	lsrs	r3, r3, #29
 80050ac:	3301      	adds	r3, #1
 80050ae:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	080077ec 	.word	0x080077ec
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	01e84800 	.word	0x01e84800

080050c8 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 80050c8:	b590      	push	{r4, r7, lr}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 80050ce:	f7ff f849 	bl	8004164 <LL_RCC_PLL_GetMainSource>
 80050d2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d017      	beq.n	800510a <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d81f      	bhi.n	8005120 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d003      	beq.n	80050ee <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d00b      	beq.n	8005104 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 80050ec:	e018      	b.n	8005120 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80050ee:	f7fe fd5b 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 80050f2:	4603      	mov	r3, r0
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 80050fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005100:	607b      	str	r3, [r7, #4]
      break;
 8005102:	e018      	b.n	8005136 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005104:	4b19      	ldr	r3, [pc, #100]	; (800516c <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8005106:	607b      	str	r3, [r7, #4]
      break;
 8005108:	e015      	b.n	8005136 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800510a:	f7fe fc9d 	bl	8003a48 <LL_RCC_HSE_IsEnabledDiv2>
 800510e:	4603      	mov	r3, r0
 8005110:	2b01      	cmp	r3, #1
 8005112:	d102      	bne.n	800511a <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005114:	4b15      	ldr	r3, [pc, #84]	; (800516c <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8005116:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005118:	e00d      	b.n	8005136 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 800511c:	607b      	str	r3, [r7, #4]
      break;
 800511e:	e00a      	b.n	8005136 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005120:	f7fe fd42 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 8005124:	4603      	mov	r3, r0
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	4a0e      	ldr	r2, [pc, #56]	; (8005168 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	607b      	str	r3, [r7, #4]
      break;
 8005134:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005136:	f7fe ffe4 	bl	8004102 <LL_RCC_PLLSAI1_GetN>
 800513a:	4602      	mov	r2, r0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	fb03 f402 	mul.w	r4, r3, r2
 8005142:	f7fe ffa2 	bl	800408a <LL_RCC_PLL_GetDivider>
 8005146:	4603      	mov	r3, r0
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	3301      	adds	r3, #1
 800514c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005150:	f7fe ffe4 	bl	800411c <LL_RCC_PLLSAI1_GetP>
 8005154:	4603      	mov	r3, r0
 8005156:	0c5b      	lsrs	r3, r3, #17
 8005158:	3301      	adds	r3, #1
 800515a:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}
 8005166:	bf00      	nop
 8005168:	080077ec 	.word	0x080077ec
 800516c:	00f42400 	.word	0x00f42400
 8005170:	01e84800 	.word	0x01e84800

08005174 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 800517a:	f7fe fff3 	bl	8004164 <LL_RCC_PLL_GetMainSource>
 800517e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b03      	cmp	r3, #3
 8005184:	d017      	beq.n	80051b6 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d81f      	bhi.n	80051cc <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d003      	beq.n	800519a <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d00b      	beq.n	80051b0 <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8005198:	e018      	b.n	80051cc <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800519a:	f7fe fd05 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 800519e:	4603      	mov	r3, r0
 80051a0:	091b      	lsrs	r3, r3, #4
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 80051a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ac:	607b      	str	r3, [r7, #4]
      break;
 80051ae:	e018      	b.n	80051e2 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 80051b0:	4b19      	ldr	r3, [pc, #100]	; (8005218 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 80051b2:	607b      	str	r3, [r7, #4]
      break;
 80051b4:	e015      	b.n	80051e2 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051b6:	f7fe fc47 	bl	8003a48 <LL_RCC_HSE_IsEnabledDiv2>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d102      	bne.n	80051c6 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80051c0:	4b15      	ldr	r3, [pc, #84]	; (8005218 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 80051c2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 80051c4:	e00d      	b.n	80051e2 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 80051c8:	607b      	str	r3, [r7, #4]
      break;
 80051ca:	e00a      	b.n	80051e2 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80051cc:	f7fe fcec 	bl	8003ba8 <LL_RCC_MSI_GetRange>
 80051d0:	4603      	mov	r3, r0
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	4a0e      	ldr	r2, [pc, #56]	; (8005214 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 80051da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051de:	607b      	str	r3, [r7, #4]
      break;
 80051e0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80051e2:	f7fe ff8e 	bl	8004102 <LL_RCC_PLLSAI1_GetN>
 80051e6:	4602      	mov	r2, r0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	fb03 f402 	mul.w	r4, r3, r2
 80051ee:	f7fe ff4c 	bl	800408a <LL_RCC_PLL_GetDivider>
 80051f2:	4603      	mov	r3, r0
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	3301      	adds	r3, #1
 80051f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80051fc:	f7fe ff9a 	bl	8004134 <LL_RCC_PLLSAI1_GetQ>
 8005200:	4603      	mov	r3, r0
 8005202:	0e5b      	lsrs	r3, r3, #25
 8005204:	3301      	adds	r3, #1
 8005206:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bd90      	pop	{r4, r7, pc}
 8005212:	bf00      	nop
 8005214:	080077ec 	.word	0x080077ec
 8005218:	00f42400 	.word	0x00f42400
 800521c:	01e84800 	.word	0x01e84800

08005220 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d904      	bls.n	800523e <HAL_SAI_InitProtocol+0x1e>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	3b03      	subs	r3, #3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d812      	bhi.n	8005262 <HAL_SAI_InitProtocol+0x42>
 800523c:	e008      	b.n	8005250 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fa83 	bl	8005750 <SAI_InitI2S>
 800524a:	4603      	mov	r3, r0
 800524c:	75fb      	strb	r3, [r7, #23]
      break;
 800524e:	e00b      	b.n	8005268 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fb2c 	bl	80058b4 <SAI_InitPCM>
 800525c:	4603      	mov	r3, r0
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	e002      	b.n	8005268 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
      break;
 8005266:	bf00      	nop
  }

  if (status == HAL_OK)
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f808 	bl	8005284 <HAL_SAI_Init>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e17c      	b.n	8005590 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10e      	bne.n	80052be <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a5c      	ldr	r2, [pc, #368]	; (8005418 <HAL_SAI_Init+0x194>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d107      	bne.n	80052ba <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d103      	bne.n	80052ba <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e168      	b.n	8005590 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc f9e4 	bl	80016a0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fba5 	bl	8005a28 <SAI_Disable>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e153      	b.n	8005590 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_SAI_Init+0x7a>
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d003      	beq.n	8005304 <HAL_SAI_Init+0x80>
 80052fc:	e006      	b.n	800530c <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
      break;
 8005302:	e006      	b.n	8005312 <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005308:	61bb      	str	r3, [r7, #24]
      break;
 800530a:	e002      	b.n	8005312 <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]
      break;
 8005310:	bf00      	nop
  }

  SAI1->GCR = 0;
 8005312:	4b42      	ldr	r3, [pc, #264]	; (800541c <HAL_SAI_Init+0x198>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d062      	beq.n	80053e6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005320:	2040      	movs	r0, #64	; 0x40
 8005322:	f7ff f8a1 	bl	8004468 <HAL_RCCEx_GetPeriphCLKFreq>
 8005326:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005330:	d120      	bne.n	8005374 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	2b04      	cmp	r3, #4
 8005338:	d102      	bne.n	8005340 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800533a:	2340      	movs	r3, #64	; 0x40
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e00a      	b.n	8005356 <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	2b08      	cmp	r3, #8
 8005346:	d103      	bne.n	8005350 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8005348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	e002      	b.n	8005356 <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4619      	mov	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e017      	b.n	80053a4 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800537c:	d101      	bne.n	8005382 <HAL_SAI_Init+0xfe>
 800537e:	2302      	movs	r3, #2
 8005380:	e000      	b.n	8005384 <HAL_SAI_Init+0x100>
 8005382:	2301      	movs	r3, #1
 8005384:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4619      	mov	r1, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <HAL_SAI_Init+0x19c>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	08da      	lsrs	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <HAL_SAI_Init+0x19c>)
 80053b6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ba:	08da      	lsrs	r2, r3, #3
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	1aca      	subs	r2, r1, r3
 80053c6:	2a08      	cmp	r2, #8
 80053c8:	d904      	bls.n	80053d4 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d104      	bne.n	80053e6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	085a      	lsrs	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_SAI_Init+0x172>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d109      	bne.n	800540a <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_SAI_Init+0x17e>
 80053fe:	2300      	movs	r3, #0
 8005400:	e001      	b.n	8005406 <HAL_SAI_Init+0x182>
 8005402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	e00e      	b.n	8005428 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540e:	2b01      	cmp	r3, #1
 8005410:	d108      	bne.n	8005424 <HAL_SAI_Init+0x1a0>
 8005412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005416:	e006      	b.n	8005426 <HAL_SAI_Init+0x1a2>
 8005418:	40015404 	.word	0x40015404
 800541c:	40015400 	.word	0x40015400
 8005420:	cccccccd 	.word	0xcccccccd
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b59      	ldr	r3, [pc, #356]	; (8005598 <HAL_SAI_Init+0x314>)
 8005434:	400b      	ands	r3, r1
 8005436:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6819      	ldr	r1, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800544c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005452:	431a      	orrs	r2, r3
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8005460:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800546c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	051b      	lsls	r3, r3, #20
 8005474:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800547a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005498:	f023 030f 	bic.w	r3, r3, #15
 800549c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6859      	ldr	r1, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6899      	ldr	r1, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b35      	ldr	r3, [pc, #212]	; (800559c <HAL_SAI_Init+0x318>)
 80054c8:	400b      	ands	r3, r1
 80054ca:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6899      	ldr	r1, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054dc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80054e2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80054e8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	3b01      	subs	r3, #1
 80054f0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80054f2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68d9      	ldr	r1, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f24f 0320 	movw	r3, #61472	; 0xf020
 800550a:	400b      	ands	r3, r1
 800550c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68d9      	ldr	r1, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005522:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005524:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552a:	3b01      	subs	r3, #1
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a18      	ldr	r2, [pc, #96]	; (80055a0 <HAL_SAI_Init+0x31c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d119      	bne.n	8005576 <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <HAL_SAI_Init+0x320>)
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	4a17      	ldr	r2, [pc, #92]	; (80055a4 <HAL_SAI_Init+0x320>)
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10e      	bne.n	8005576 <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	3b01      	subs	r3, #1
 8005562:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005564:	490f      	ldr	r1, [pc, #60]	; (80055a4 <HAL_SAI_Init+0x320>)
 8005566:	4313      	orrs	r3, r2
 8005568:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800556a:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <HAL_SAI_Init+0x320>)
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	4a0d      	ldr	r2, [pc, #52]	; (80055a4 <HAL_SAI_Init+0x320>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	f005c010 	.word	0xf005c010
 800559c:	fff88000 	.word	0xfff88000
 80055a0:	40015404 	.word	0x40015404
 80055a4:	40015400 	.word	0x40015400

080055a8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80055b6:	f7fc fa2b 	bl	8001a10 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_SAI_Transmit_DMA+0x20>
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e098      	b.n	80056fe <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 8091 	bne.w	80056fc <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_SAI_Transmit_DMA+0x40>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e08a      	b.n	80056fe <HAL_SAI_Transmit_DMA+0x156>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	88fa      	ldrh	r2, [r7, #6]
 8005602:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2212      	movs	r2, #18
 8005612:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800561c:	4a3a      	ldr	r2, [pc, #232]	; (8005708 <HAL_SAI_Transmit_DMA+0x160>)
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005626:	4a39      	ldr	r2, [pc, #228]	; (800570c <HAL_SAI_Transmit_DMA+0x164>)
 8005628:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005630:	4a37      	ldr	r2, [pc, #220]	; (8005710 <HAL_SAI_Transmit_DMA+0x168>)
 8005632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563a:	2200      	movs	r2, #0
 800563c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005648:	4619      	mov	r1, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	331c      	adds	r3, #28
 8005650:	461a      	mov	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005658:	f7fc fbce 	bl	8001df8 <HAL_DMA_Start_IT>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e047      	b.n	80056fe <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800566e:	2100      	movs	r1, #0
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f9a1 	bl	80059b8 <SAI_InterruptFlag>
 8005676:	4601      	mov	r1, r0
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005694:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005696:	e015      	b.n	80056c4 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005698:	f7fc f9ba 	bl	8001a10 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056a6:	d90d      	bls.n	80056c4 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e01c      	b.n	80056fe <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0e2      	beq.n	8005698 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d107      	bne.n	80056f0 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056ee:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	08005afb 	.word	0x08005afb
 800570c:	08005a9d 	.word	0x08005a9d
 8005710:	08005b17 	.word	0x08005b17

08005714 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <SAI_InitI2S+0x2e>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d103      	bne.n	8005786 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	651a      	str	r2, [r3, #80]	; 0x50
 8005784:	e002      	b.n	800578c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005792:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800579a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e077      	b.n	80058a6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d107      	bne.n	80057cc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80057c8:	665a      	str	r2, [r3, #100]	; 0x64
 80057ca:	e006      	b.n	80057da <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	665a      	str	r2, [r3, #100]	; 0x64
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d84f      	bhi.n	8005880 <SAI_InitI2S+0x130>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <SAI_InitI2S+0x98>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	080057f9 	.word	0x080057f9
 80057ec:	0800581b 	.word	0x0800581b
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	0800585f 	.word	0x0800585f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2280      	movs	r2, #128	; 0x80
 80057fc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	011a      	lsls	r2, r3, #4
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2240      	movs	r2, #64	; 0x40
 8005816:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8005818:	e035      	b.n	8005886 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	019a      	lsls	r2, r3, #6
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800583a:	e024      	b.n	8005886 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	22c0      	movs	r2, #192	; 0xc0
 8005840:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	019a      	lsls	r2, r3, #6
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2280      	movs	r2, #128	; 0x80
 800585a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800585c:	e013      	b.n	8005886 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	22e0      	movs	r2, #224	; 0xe0
 8005862:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	019a      	lsls	r2, r3, #6
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800587e:	e002      	b.n	8005886 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
      break;
 8005884:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d10b      	bne.n	80058a4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d102      	bne.n	8005898 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2210      	movs	r2, #16
 8005896:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d102      	bne.n	80058a4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2208      	movs	r2, #8
 80058a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <SAI_InitPCM+0x2e>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d103      	bne.n	80058ea <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	651a      	str	r2, [r3, #80]	; 0x50
 80058e8:	e002      	b.n	80058f0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058fc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005904:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005918:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d103      	bne.n	8005928 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	659a      	str	r2, [r3, #88]	; 0x58
 8005926:	e002      	b.n	800592e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	220d      	movs	r2, #13
 800592c:	659a      	str	r2, [r3, #88]	; 0x58
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d837      	bhi.n	80059a4 <SAI_InitPCM+0xf0>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <SAI_InitPCM+0x88>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	0800594d 	.word	0x0800594d
 8005940:	08005963 	.word	0x08005963
 8005944:	08005979 	.word	0x08005979
 8005948:	0800598f 	.word	0x0800598f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	011a      	lsls	r2, r3, #4
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2240      	movs	r2, #64	; 0x40
 800595e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8005960:	e023      	b.n	80059aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2280      	movs	r2, #128	; 0x80
 8005966:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8005976:	e018      	b.n	80059aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	22c0      	movs	r2, #192	; 0xc0
 800597c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2280      	movs	r2, #128	; 0x80
 800598a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800598c:	e00d      	b.n	80059aa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	22e0      	movs	r2, #224	; 0xe0
 8005992:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80059a2:	e002      	b.n	80059aa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
      break;
 80059a8:	bf00      	nop
  }

  return status;
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d103      	bne.n	80059d6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f043 0308 	orr.w	r3, r3, #8
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d10b      	bne.n	80059f6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d003      	beq.n	80059ee <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d103      	bne.n	80059f6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f043 0310 	orr.w	r3, r3, #16
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d003      	beq.n	8005a06 <SAI_InterruptFlag+0x4e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d104      	bne.n	8005a10 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e003      	b.n	8005a18 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f043 0304 	orr.w	r3, r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005a30:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <SAI_Disable+0x6c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <SAI_Disable+0x70>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	0b1b      	lsrs	r3, r3, #12
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a52:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	72fb      	strb	r3, [r7, #11]
      break;
 8005a6e:	e009      	b.n	8005a84 <SAI_Disable+0x5c>
    }
    count--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e7      	bne.n	8005a54 <SAI_Disable+0x2c>

  return status;
 8005a84:	7afb      	ldrb	r3, [r7, #11]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20000004 	.word	0x20000004
 8005a98:	95cbec1b 	.word	0x95cbec1b

08005a9c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d01c      	beq.n	8005aec <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005ac8:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005aca:	2100      	movs	r1, #0
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7ff ff73 	bl	80059b8 <SAI_InterruptFlag>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	43d9      	mvns	r1, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f7ff fe11 	bl	8005714 <HAL_SAI_TxCpltCallback>
#endif
}
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff fe0d 	bl	8005728 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005b42:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff ff6f 	bl	8005a28 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff fdee 	bl	800573c <HAL_SAI_ErrorCallback>
#endif
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <LL_RCC_GetUSARTClockSource>:
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4013      	ands	r3, r2
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <LL_RCC_GetLPUARTClockSource>:
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4013      	ands	r3, r2
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e042      	b.n	8005c40 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d106      	bne.n	8005bd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7fb fcf1 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2224      	movs	r2, #36	; 0x24
 8005bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0201 	bic.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f82c 	bl	8005c48 <UART_SetConfig>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e022      	b.n	8005c40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa26 	bl	8006054 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 faad 	bl	8006198 <UART_CheckIdleState>
 8005c3e:	4603      	mov	r3, r0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	b5b0      	push	{r4, r5, r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4ba3      	ldr	r3, [pc, #652]	; (8005f00 <UART_SetConfig+0x2b8>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	69f9      	ldr	r1, [r7, #28]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a98      	ldr	r2, [pc, #608]	; (8005f04 <UART_SetConfig+0x2bc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005cba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	69f9      	ldr	r1, [r7, #28]
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	f023 010f 	bic.w	r1, r3, #15
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a89      	ldr	r2, [pc, #548]	; (8005f08 <UART_SetConfig+0x2c0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d120      	bne.n	8005d2a <UART_SetConfig+0xe2>
 8005ce8:	2003      	movs	r0, #3
 8005cea:	f7ff ff3d 	bl	8005b68 <LL_RCC_GetUSARTClockSource>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d817      	bhi.n	8005d24 <UART_SetConfig+0xdc>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0xb4>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d0d 	.word	0x08005d0d
 8005d00:	08005d19 	.word	0x08005d19
 8005d04:	08005d13 	.word	0x08005d13
 8005d08:	08005d1f 	.word	0x08005d1f
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	76fb      	strb	r3, [r7, #27]
 8005d10:	e038      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d12:	2302      	movs	r3, #2
 8005d14:	76fb      	strb	r3, [r7, #27]
 8005d16:	e035      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	76fb      	strb	r3, [r7, #27]
 8005d1c:	e032      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d1e:	2308      	movs	r3, #8
 8005d20:	76fb      	strb	r3, [r7, #27]
 8005d22:	e02f      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d24:	2310      	movs	r3, #16
 8005d26:	76fb      	strb	r3, [r7, #27]
 8005d28:	e02c      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a75      	ldr	r2, [pc, #468]	; (8005f04 <UART_SetConfig+0x2bc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d125      	bne.n	8005d80 <UART_SetConfig+0x138>
 8005d34:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005d38:	f7ff ff26 	bl	8005b88 <LL_RCC_GetLPUARTClockSource>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d42:	d017      	beq.n	8005d74 <UART_SetConfig+0x12c>
 8005d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d48:	d817      	bhi.n	8005d7a <UART_SetConfig+0x132>
 8005d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4e:	d00b      	beq.n	8005d68 <UART_SetConfig+0x120>
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d54:	d811      	bhi.n	8005d7a <UART_SetConfig+0x132>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <UART_SetConfig+0x11a>
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5e:	d006      	beq.n	8005d6e <UART_SetConfig+0x126>
 8005d60:	e00b      	b.n	8005d7a <UART_SetConfig+0x132>
 8005d62:	2300      	movs	r3, #0
 8005d64:	76fb      	strb	r3, [r7, #27]
 8005d66:	e00d      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	76fb      	strb	r3, [r7, #27]
 8005d6c:	e00a      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d6e:	2304      	movs	r3, #4
 8005d70:	76fb      	strb	r3, [r7, #27]
 8005d72:	e007      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d74:	2308      	movs	r3, #8
 8005d76:	76fb      	strb	r3, [r7, #27]
 8005d78:	e004      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d7a:	2310      	movs	r3, #16
 8005d7c:	76fb      	strb	r3, [r7, #27]
 8005d7e:	e001      	b.n	8005d84 <UART_SetConfig+0x13c>
 8005d80:	2310      	movs	r3, #16
 8005d82:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a5e      	ldr	r2, [pc, #376]	; (8005f04 <UART_SetConfig+0x2bc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	f040 808b 	bne.w	8005ea6 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d90:	7efb      	ldrb	r3, [r7, #27]
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d823      	bhi.n	8005dde <UART_SetConfig+0x196>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <UART_SetConfig+0x154>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005ddf 	.word	0x08005ddf
 8005da4:	08005dc9 	.word	0x08005dc9
 8005da8:	08005ddf 	.word	0x08005ddf
 8005dac:	08005dcf 	.word	0x08005dcf
 8005db0:	08005ddf 	.word	0x08005ddf
 8005db4:	08005ddf 	.word	0x08005ddf
 8005db8:	08005ddf 	.word	0x08005ddf
 8005dbc:	08005dd7 	.word	0x08005dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc0:	f7fd fd5e 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 8005dc4:	6178      	str	r0, [r7, #20]
        break;
 8005dc6:	e00f      	b.n	8005de8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc8:	4b50      	ldr	r3, [pc, #320]	; (8005f0c <UART_SetConfig+0x2c4>)
 8005dca:	617b      	str	r3, [r7, #20]
        break;
 8005dcc:	e00c      	b.n	8005de8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dce:	f7fd fcd7 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005dd2:	6178      	str	r0, [r7, #20]
        break;
 8005dd4:	e008      	b.n	8005de8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dda:	617b      	str	r3, [r7, #20]
        break;
 8005ddc:	e004      	b.n	8005de8 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	76bb      	strb	r3, [r7, #26]
        break;
 8005de6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 811a 	beq.w	8006024 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	4a46      	ldr	r2, [pc, #280]	; (8005f10 <UART_SetConfig+0x2c8>)
 8005df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	4413      	add	r3, r2
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d305      	bcc.n	8005e20 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d902      	bls.n	8005e26 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	76bb      	strb	r3, [r7, #26]
 8005e24:	e0fe      	b.n	8006024 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	4a37      	ldr	r2, [pc, #220]	; (8005f10 <UART_SetConfig+0x2c8>)
 8005e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	f7fa fe1d 	bl	8000a7c <__aeabi_uldivmod>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	020b      	lsls	r3, r1, #8
 8005e54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e58:	0202      	lsls	r2, r0, #8
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	6849      	ldr	r1, [r1, #4]
 8005e5e:	0849      	lsrs	r1, r1, #1
 8005e60:	4608      	mov	r0, r1
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	1814      	adds	r4, r2, r0
 8005e68:	eb43 0501 	adc.w	r5, r3, r1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	461a      	mov	r2, r3
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fdff 	bl	8000a7c <__aeabi_uldivmod>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4613      	mov	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e8c:	d308      	bcc.n	8005ea0 <UART_SetConfig+0x258>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e94:	d204      	bcs.n	8005ea0 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e0c1      	b.n	8006024 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	76bb      	strb	r3, [r7, #26]
 8005ea4:	e0be      	b.n	8006024 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eae:	d16a      	bne.n	8005f86 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005eb0:	7efb      	ldrb	r3, [r7, #27]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	2b07      	cmp	r3, #7
 8005eb6:	d82d      	bhi.n	8005f14 <UART_SetConfig+0x2cc>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <UART_SetConfig+0x278>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005f15 	.word	0x08005f15
 8005ecc:	08005eef 	.word	0x08005eef
 8005ed0:	08005f15 	.word	0x08005f15
 8005ed4:	08005f15 	.word	0x08005f15
 8005ed8:	08005f15 	.word	0x08005f15
 8005edc:	08005ef7 	.word	0x08005ef7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee0:	f7fd fce4 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 8005ee4:	6178      	str	r0, [r7, #20]
        break;
 8005ee6:	e01a      	b.n	8005f1e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee8:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <UART_SetConfig+0x2c4>)
 8005eea:	617b      	str	r3, [r7, #20]
        break;
 8005eec:	e017      	b.n	8005f1e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eee:	f7fd fc47 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005ef2:	6178      	str	r0, [r7, #20]
        break;
 8005ef4:	e013      	b.n	8005f1e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efa:	617b      	str	r3, [r7, #20]
        break;
 8005efc:	e00f      	b.n	8005f1e <UART_SetConfig+0x2d6>
 8005efe:	bf00      	nop
 8005f00:	cfff69f3 	.word	0xcfff69f3
 8005f04:	40008000 	.word	0x40008000
 8005f08:	40013800 	.word	0x40013800
 8005f0c:	00f42400 	.word	0x00f42400
 8005f10:	0800788c 	.word	0x0800788c
      default:
        pclk = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	76bb      	strb	r3, [r7, #26]
        break;
 8005f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d07f      	beq.n	8006024 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	4a48      	ldr	r2, [pc, #288]	; (800604c <UART_SetConfig+0x404>)
 8005f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f36:	005a      	lsls	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	441a      	add	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b0f      	cmp	r3, #15
 8005f50:	d916      	bls.n	8005f80 <UART_SetConfig+0x338>
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f58:	d212      	bcs.n	8005f80 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f023 030f 	bic.w	r3, r3, #15
 8005f62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	89fa      	ldrh	r2, [r7, #14]
 8005f7c:	60da      	str	r2, [r3, #12]
 8005f7e:	e051      	b.n	8006024 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	76bb      	strb	r3, [r7, #26]
 8005f84:	e04e      	b.n	8006024 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f86:	7efb      	ldrb	r3, [r7, #27]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	2b07      	cmp	r3, #7
 8005f8c:	d821      	bhi.n	8005fd2 <UART_SetConfig+0x38a>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <UART_SetConfig+0x34c>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fb5 	.word	0x08005fb5
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fd3 	.word	0x08005fd3
 8005fa0:	08005fc3 	.word	0x08005fc3
 8005fa4:	08005fd3 	.word	0x08005fd3
 8005fa8:	08005fd3 	.word	0x08005fd3
 8005fac:	08005fd3 	.word	0x08005fd3
 8005fb0:	08005fcb 	.word	0x08005fcb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb4:	f7fd fc7a 	bl	80038ac <HAL_RCC_GetPCLK2Freq>
 8005fb8:	6178      	str	r0, [r7, #20]
        break;
 8005fba:	e00f      	b.n	8005fdc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fbc:	4b24      	ldr	r3, [pc, #144]	; (8006050 <UART_SetConfig+0x408>)
 8005fbe:	617b      	str	r3, [r7, #20]
        break;
 8005fc0:	e00c      	b.n	8005fdc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc2:	f7fd fbdd 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005fc6:	6178      	str	r0, [r7, #20]
        break;
 8005fc8:	e008      	b.n	8005fdc <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fce:	617b      	str	r3, [r7, #20]
        break;
 8005fd0:	e004      	b.n	8005fdc <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	76bb      	strb	r3, [r7, #26]
        break;
 8005fda:	bf00      	nop
    }

    if (pclk != 0U)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d020      	beq.n	8006024 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	4a19      	ldr	r2, [pc, #100]	; (800604c <UART_SetConfig+0x404>)
 8005fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fec:	461a      	mov	r2, r3
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	b29b      	uxth	r3, r3
 8006006:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b0f      	cmp	r3, #15
 800600c:	d908      	bls.n	8006020 <UART_SetConfig+0x3d8>
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006014:	d204      	bcs.n	8006020 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	60da      	str	r2, [r3, #12]
 800601e:	e001      	b.n	8006024 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006040:	7ebb      	ldrb	r3, [r7, #26]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bdb0      	pop	{r4, r5, r7, pc}
 800604a:	bf00      	nop
 800604c:	0800788c 	.word	0x0800788c
 8006050:	00f42400 	.word	0x00f42400

08006054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01a      	beq.n	800616a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006152:	d10a      	bne.n	800616a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af02      	add	r7, sp, #8
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061a8:	f7fb fc32 	bl	8001a10 <HAL_GetTick>
 80061ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d10e      	bne.n	80061da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f82f 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e025      	b.n	8006226 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d10e      	bne.n	8006206 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f819 	bl	800622e <UART_WaitOnFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e00f      	b.n	8006226 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b09c      	sub	sp, #112	; 0x70
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	e0a9      	b.n	8006394 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	f000 80a5 	beq.w	8006394 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624a:	f7fb fbe1 	bl	8001a10 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006256:	429a      	cmp	r2, r3
 8006258:	d302      	bcc.n	8006260 <UART_WaitOnFlagUntilTimeout+0x32>
 800625a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625c:	2b00      	cmp	r3, #0
 800625e:	d140      	bne.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006274:	667b      	str	r3, [r7, #100]	; 0x64
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800627e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006280:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800628c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e6      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	663b      	str	r3, [r7, #96]	; 0x60
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e069      	b.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d051      	beq.n	8006394 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fe:	d149      	bne.n	8006394 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006308:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800631e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
 800632a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800632e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e6      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	613b      	str	r3, [r7, #16]
   return(result);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	66bb      	str	r3, [r7, #104]	; 0x68
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800635c:	623a      	str	r2, [r7, #32]
 800635e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	69f9      	ldr	r1, [r7, #28]
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	61bb      	str	r3, [r7, #24]
   return(result);
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e5      	bne.n	800633c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e010      	b.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69da      	ldr	r2, [r3, #28]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4013      	ands	r3, r2
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	f43f af46 	beq.w	8006240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3770      	adds	r7, #112	; 0x70
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e027      	b.n	8006424 <HAL_UARTEx_DisableFifoMode+0x66>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2224      	movs	r2, #36	; 0x24
 80063e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0201 	bic.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006402:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006444:	2302      	movs	r3, #2
 8006446:	e02d      	b.n	80064a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2224      	movs	r2, #36	; 0x24
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0201 	bic.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f84f 	bl	8006528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e02d      	b.n	8006520 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2224      	movs	r2, #36	; 0x24
 80064d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f811 	bl	8006528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006534:	2b00      	cmp	r3, #0
 8006536:	d108      	bne.n	800654a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006548:	e031      	b.n	80065ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800654a:	2308      	movs	r3, #8
 800654c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800654e:	2308      	movs	r3, #8
 8006550:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	0e5b      	lsrs	r3, r3, #25
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	0f5b      	lsrs	r3, r3, #29
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	7b3a      	ldrb	r2, [r7, #12]
 8006576:	4911      	ldr	r1, [pc, #68]	; (80065bc <UARTEx_SetNbDataToProcess+0x94>)
 8006578:	5c8a      	ldrb	r2, [r1, r2]
 800657a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800657e:	7b3a      	ldrb	r2, [r7, #12]
 8006580:	490f      	ldr	r1, [pc, #60]	; (80065c0 <UARTEx_SetNbDataToProcess+0x98>)
 8006582:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006584:	fb93 f3f2 	sdiv	r3, r3, r2
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	7b7a      	ldrb	r2, [r7, #13]
 8006594:	4909      	ldr	r1, [pc, #36]	; (80065bc <UARTEx_SetNbDataToProcess+0x94>)
 8006596:	5c8a      	ldrb	r2, [r1, r2]
 8006598:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800659c:	7b7a      	ldrb	r2, [r7, #13]
 800659e:	4908      	ldr	r1, [pc, #32]	; (80065c0 <UARTEx_SetNbDataToProcess+0x98>)
 80065a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	080078a4 	.word	0x080078a4
 80065c0:	080078ac 	.word	0x080078ac

080065c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80065d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	4013      	ands	r3, r2
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065fa:	b084      	sub	sp, #16
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	f107 0014 	add.w	r0, r7, #20
 8006608:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	b004      	add	sp, #16
 800663a:	4770      	bx	lr

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	; (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	; (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	; (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	; (8006680 <__libc_init_array+0x44>)
 8006650:	f001 f858 	bl	8007704 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	08007a98 	.word	0x08007a98
 8006678:	08007a98 	.word	0x08007a98
 800667c:	08007a98 	.word	0x08007a98
 8006680:	08007a9c 	.word	0x08007a9c

08006684 <memset>:
 8006684:	4402      	add	r2, r0
 8006686:	4603      	mov	r3, r0
 8006688:	4293      	cmp	r3, r2
 800668a:	d100      	bne.n	800668e <memset+0xa>
 800668c:	4770      	bx	lr
 800668e:	f803 1b01 	strb.w	r1, [r3], #1
 8006692:	e7f9      	b.n	8006688 <memset+0x4>
 8006694:	0000      	movs	r0, r0
	...

08006698 <sin>:
 8006698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800669a:	ec53 2b10 	vmov	r2, r3, d0
 800669e:	4826      	ldr	r0, [pc, #152]	; (8006738 <sin+0xa0>)
 80066a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80066a4:	4281      	cmp	r1, r0
 80066a6:	dc07      	bgt.n	80066b8 <sin+0x20>
 80066a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006730 <sin+0x98>
 80066ac:	2000      	movs	r0, #0
 80066ae:	f000 fe5b 	bl	8007368 <__kernel_sin>
 80066b2:	ec51 0b10 	vmov	r0, r1, d0
 80066b6:	e007      	b.n	80066c8 <sin+0x30>
 80066b8:	4820      	ldr	r0, [pc, #128]	; (800673c <sin+0xa4>)
 80066ba:	4281      	cmp	r1, r0
 80066bc:	dd09      	ble.n	80066d2 <sin+0x3a>
 80066be:	ee10 0a10 	vmov	r0, s0
 80066c2:	4619      	mov	r1, r3
 80066c4:	f7f9 fd60 	bl	8000188 <__aeabi_dsub>
 80066c8:	ec41 0b10 	vmov	d0, r0, r1
 80066cc:	b005      	add	sp, #20
 80066ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80066d2:	4668      	mov	r0, sp
 80066d4:	f000 f834 	bl	8006740 <__ieee754_rem_pio2>
 80066d8:	f000 0003 	and.w	r0, r0, #3
 80066dc:	2801      	cmp	r0, #1
 80066de:	d008      	beq.n	80066f2 <sin+0x5a>
 80066e0:	2802      	cmp	r0, #2
 80066e2:	d00d      	beq.n	8006700 <sin+0x68>
 80066e4:	b9d0      	cbnz	r0, 800671c <sin+0x84>
 80066e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066ea:	ed9d 0b00 	vldr	d0, [sp]
 80066ee:	2001      	movs	r0, #1
 80066f0:	e7dd      	b.n	80066ae <sin+0x16>
 80066f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066f6:	ed9d 0b00 	vldr	d0, [sp]
 80066fa:	f000 fa2d 	bl	8006b58 <__kernel_cos>
 80066fe:	e7d8      	b.n	80066b2 <sin+0x1a>
 8006700:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006704:	ed9d 0b00 	vldr	d0, [sp]
 8006708:	2001      	movs	r0, #1
 800670a:	f000 fe2d 	bl	8007368 <__kernel_sin>
 800670e:	ec53 2b10 	vmov	r2, r3, d0
 8006712:	ee10 0a10 	vmov	r0, s0
 8006716:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800671a:	e7d5      	b.n	80066c8 <sin+0x30>
 800671c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006720:	ed9d 0b00 	vldr	d0, [sp]
 8006724:	f000 fa18 	bl	8006b58 <__kernel_cos>
 8006728:	e7f1      	b.n	800670e <sin+0x76>
 800672a:	bf00      	nop
 800672c:	f3af 8000 	nop.w
	...
 8006738:	3fe921fb 	.word	0x3fe921fb
 800673c:	7fefffff 	.word	0x7fefffff

08006740 <__ieee754_rem_pio2>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	ed2d 8b02 	vpush	{d8}
 8006748:	ec55 4b10 	vmov	r4, r5, d0
 800674c:	4bca      	ldr	r3, [pc, #808]	; (8006a78 <__ieee754_rem_pio2+0x338>)
 800674e:	b08b      	sub	sp, #44	; 0x2c
 8006750:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006754:	4598      	cmp	r8, r3
 8006756:	4682      	mov	sl, r0
 8006758:	9502      	str	r5, [sp, #8]
 800675a:	dc08      	bgt.n	800676e <__ieee754_rem_pio2+0x2e>
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	ed80 0b00 	vstr	d0, [r0]
 8006764:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006768:	f04f 0b00 	mov.w	fp, #0
 800676c:	e028      	b.n	80067c0 <__ieee754_rem_pio2+0x80>
 800676e:	4bc3      	ldr	r3, [pc, #780]	; (8006a7c <__ieee754_rem_pio2+0x33c>)
 8006770:	4598      	cmp	r8, r3
 8006772:	dc78      	bgt.n	8006866 <__ieee754_rem_pio2+0x126>
 8006774:	9b02      	ldr	r3, [sp, #8]
 8006776:	4ec2      	ldr	r6, [pc, #776]	; (8006a80 <__ieee754_rem_pio2+0x340>)
 8006778:	2b00      	cmp	r3, #0
 800677a:	ee10 0a10 	vmov	r0, s0
 800677e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006a40 <__ieee754_rem_pio2+0x300>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	4629      	mov	r1, r5
 8006786:	dd39      	ble.n	80067fc <__ieee754_rem_pio2+0xbc>
 8006788:	f7f9 fcfe 	bl	8000188 <__aeabi_dsub>
 800678c:	45b0      	cmp	r8, r6
 800678e:	4604      	mov	r4, r0
 8006790:	460d      	mov	r5, r1
 8006792:	d01b      	beq.n	80067cc <__ieee754_rem_pio2+0x8c>
 8006794:	a3ac      	add	r3, pc, #688	; (adr r3, 8006a48 <__ieee754_rem_pio2+0x308>)
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f7f9 fcf5 	bl	8000188 <__aeabi_dsub>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	e9ca 2300 	strd	r2, r3, [sl]
 80067a6:	4620      	mov	r0, r4
 80067a8:	4629      	mov	r1, r5
 80067aa:	f7f9 fced 	bl	8000188 <__aeabi_dsub>
 80067ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8006a48 <__ieee754_rem_pio2+0x308>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f7f9 fce8 	bl	8000188 <__aeabi_dsub>
 80067b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80067bc:	f04f 0b01 	mov.w	fp, #1
 80067c0:	4658      	mov	r0, fp
 80067c2:	b00b      	add	sp, #44	; 0x2c
 80067c4:	ecbd 8b02 	vpop	{d8}
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8006a50 <__ieee754_rem_pio2+0x310>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fcd9 	bl	8000188 <__aeabi_dsub>
 80067d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006a58 <__ieee754_rem_pio2+0x318>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	4604      	mov	r4, r0
 80067de:	460d      	mov	r5, r1
 80067e0:	f7f9 fcd2 	bl	8000188 <__aeabi_dsub>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	e9ca 2300 	strd	r2, r3, [sl]
 80067ec:	4620      	mov	r0, r4
 80067ee:	4629      	mov	r1, r5
 80067f0:	f7f9 fcca 	bl	8000188 <__aeabi_dsub>
 80067f4:	a398      	add	r3, pc, #608	; (adr r3, 8006a58 <__ieee754_rem_pio2+0x318>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	e7db      	b.n	80067b4 <__ieee754_rem_pio2+0x74>
 80067fc:	f7f9 fcc6 	bl	800018c <__adddf3>
 8006800:	45b0      	cmp	r8, r6
 8006802:	4604      	mov	r4, r0
 8006804:	460d      	mov	r5, r1
 8006806:	d016      	beq.n	8006836 <__ieee754_rem_pio2+0xf6>
 8006808:	a38f      	add	r3, pc, #572	; (adr r3, 8006a48 <__ieee754_rem_pio2+0x308>)
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	f7f9 fcbd 	bl	800018c <__adddf3>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	e9ca 2300 	strd	r2, r3, [sl]
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7f9 fcb3 	bl	8000188 <__aeabi_dsub>
 8006822:	a389      	add	r3, pc, #548	; (adr r3, 8006a48 <__ieee754_rem_pio2+0x308>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fcb0 	bl	800018c <__adddf3>
 800682c:	f04f 3bff 	mov.w	fp, #4294967295
 8006830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006834:	e7c4      	b.n	80067c0 <__ieee754_rem_pio2+0x80>
 8006836:	a386      	add	r3, pc, #536	; (adr r3, 8006a50 <__ieee754_rem_pio2+0x310>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f7f9 fca6 	bl	800018c <__adddf3>
 8006840:	a385      	add	r3, pc, #532	; (adr r3, 8006a58 <__ieee754_rem_pio2+0x318>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	4604      	mov	r4, r0
 8006848:	460d      	mov	r5, r1
 800684a:	f7f9 fc9f 	bl	800018c <__adddf3>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	e9ca 2300 	strd	r2, r3, [sl]
 8006856:	4620      	mov	r0, r4
 8006858:	4629      	mov	r1, r5
 800685a:	f7f9 fc95 	bl	8000188 <__aeabi_dsub>
 800685e:	a37e      	add	r3, pc, #504	; (adr r3, 8006a58 <__ieee754_rem_pio2+0x318>)
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	e7e0      	b.n	8006828 <__ieee754_rem_pio2+0xe8>
 8006866:	4b87      	ldr	r3, [pc, #540]	; (8006a84 <__ieee754_rem_pio2+0x344>)
 8006868:	4598      	cmp	r8, r3
 800686a:	f300 80d9 	bgt.w	8006a20 <__ieee754_rem_pio2+0x2e0>
 800686e:	f000 fe39 	bl	80074e4 <fabs>
 8006872:	ec55 4b10 	vmov	r4, r5, d0
 8006876:	ee10 0a10 	vmov	r0, s0
 800687a:	a379      	add	r3, pc, #484	; (adr r3, 8006a60 <__ieee754_rem_pio2+0x320>)
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	4629      	mov	r1, r5
 8006882:	f7f9 fe39 	bl	80004f8 <__aeabi_dmul>
 8006886:	4b80      	ldr	r3, [pc, #512]	; (8006a88 <__ieee754_rem_pio2+0x348>)
 8006888:	2200      	movs	r2, #0
 800688a:	f7f9 fc7f 	bl	800018c <__adddf3>
 800688e:	f7fa f8cd 	bl	8000a2c <__aeabi_d2iz>
 8006892:	4683      	mov	fp, r0
 8006894:	f7f9 fdc6 	bl	8000424 <__aeabi_i2d>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	ec43 2b18 	vmov	d8, r2, r3
 80068a0:	a367      	add	r3, pc, #412	; (adr r3, 8006a40 <__ieee754_rem_pio2+0x300>)
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	f7f9 fe27 	bl	80004f8 <__aeabi_dmul>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4620      	mov	r0, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	f7f9 fc69 	bl	8000188 <__aeabi_dsub>
 80068b6:	a364      	add	r3, pc, #400	; (adr r3, 8006a48 <__ieee754_rem_pio2+0x308>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	4606      	mov	r6, r0
 80068be:	460f      	mov	r7, r1
 80068c0:	ec51 0b18 	vmov	r0, r1, d8
 80068c4:	f7f9 fe18 	bl	80004f8 <__aeabi_dmul>
 80068c8:	f1bb 0f1f 	cmp.w	fp, #31
 80068cc:	4604      	mov	r4, r0
 80068ce:	460d      	mov	r5, r1
 80068d0:	dc0d      	bgt.n	80068ee <__ieee754_rem_pio2+0x1ae>
 80068d2:	4b6e      	ldr	r3, [pc, #440]	; (8006a8c <__ieee754_rem_pio2+0x34c>)
 80068d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80068d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068dc:	4543      	cmp	r3, r8
 80068de:	d006      	beq.n	80068ee <__ieee754_rem_pio2+0x1ae>
 80068e0:	4622      	mov	r2, r4
 80068e2:	462b      	mov	r3, r5
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7f9 fc4e 	bl	8000188 <__aeabi_dsub>
 80068ec:	e00f      	b.n	800690e <__ieee754_rem_pio2+0x1ce>
 80068ee:	462b      	mov	r3, r5
 80068f0:	4622      	mov	r2, r4
 80068f2:	4630      	mov	r0, r6
 80068f4:	4639      	mov	r1, r7
 80068f6:	f7f9 fc47 	bl	8000188 <__aeabi_dsub>
 80068fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80068fe:	9303      	str	r3, [sp, #12]
 8006900:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006904:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006908:	f1b8 0f10 	cmp.w	r8, #16
 800690c:	dc02      	bgt.n	8006914 <__ieee754_rem_pio2+0x1d4>
 800690e:	e9ca 0100 	strd	r0, r1, [sl]
 8006912:	e039      	b.n	8006988 <__ieee754_rem_pio2+0x248>
 8006914:	a34e      	add	r3, pc, #312	; (adr r3, 8006a50 <__ieee754_rem_pio2+0x310>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	ec51 0b18 	vmov	r0, r1, d8
 800691e:	f7f9 fdeb 	bl	80004f8 <__aeabi_dmul>
 8006922:	4604      	mov	r4, r0
 8006924:	460d      	mov	r5, r1
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4630      	mov	r0, r6
 800692c:	4639      	mov	r1, r7
 800692e:	f7f9 fc2b 	bl	8000188 <__aeabi_dsub>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4680      	mov	r8, r0
 8006938:	4689      	mov	r9, r1
 800693a:	4630      	mov	r0, r6
 800693c:	4639      	mov	r1, r7
 800693e:	f7f9 fc23 	bl	8000188 <__aeabi_dsub>
 8006942:	4622      	mov	r2, r4
 8006944:	462b      	mov	r3, r5
 8006946:	f7f9 fc1f 	bl	8000188 <__aeabi_dsub>
 800694a:	a343      	add	r3, pc, #268	; (adr r3, 8006a58 <__ieee754_rem_pio2+0x318>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	4604      	mov	r4, r0
 8006952:	460d      	mov	r5, r1
 8006954:	ec51 0b18 	vmov	r0, r1, d8
 8006958:	f7f9 fdce 	bl	80004f8 <__aeabi_dmul>
 800695c:	4622      	mov	r2, r4
 800695e:	462b      	mov	r3, r5
 8006960:	f7f9 fc12 	bl	8000188 <__aeabi_dsub>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4604      	mov	r4, r0
 800696a:	460d      	mov	r5, r1
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	f7f9 fc0a 	bl	8000188 <__aeabi_dsub>
 8006974:	9a03      	ldr	r2, [sp, #12]
 8006976:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b31      	cmp	r3, #49	; 0x31
 800697e:	dc24      	bgt.n	80069ca <__ieee754_rem_pio2+0x28a>
 8006980:	e9ca 0100 	strd	r0, r1, [sl]
 8006984:	4646      	mov	r6, r8
 8006986:	464f      	mov	r7, r9
 8006988:	e9da 8900 	ldrd	r8, r9, [sl]
 800698c:	4630      	mov	r0, r6
 800698e:	4642      	mov	r2, r8
 8006990:	464b      	mov	r3, r9
 8006992:	4639      	mov	r1, r7
 8006994:	f7f9 fbf8 	bl	8000188 <__aeabi_dsub>
 8006998:	462b      	mov	r3, r5
 800699a:	4622      	mov	r2, r4
 800699c:	f7f9 fbf4 	bl	8000188 <__aeabi_dsub>
 80069a0:	9b02      	ldr	r3, [sp, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80069a8:	f6bf af0a 	bge.w	80067c0 <__ieee754_rem_pio2+0x80>
 80069ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80069b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80069b4:	f8ca 8000 	str.w	r8, [sl]
 80069b8:	f8ca 0008 	str.w	r0, [sl, #8]
 80069bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80069c4:	f1cb 0b00 	rsb	fp, fp, #0
 80069c8:	e6fa      	b.n	80067c0 <__ieee754_rem_pio2+0x80>
 80069ca:	a327      	add	r3, pc, #156	; (adr r3, 8006a68 <__ieee754_rem_pio2+0x328>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	ec51 0b18 	vmov	r0, r1, d8
 80069d4:	f7f9 fd90 	bl	80004f8 <__aeabi_dmul>
 80069d8:	4604      	mov	r4, r0
 80069da:	460d      	mov	r5, r1
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7f9 fbd0 	bl	8000188 <__aeabi_dsub>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4606      	mov	r6, r0
 80069ee:	460f      	mov	r7, r1
 80069f0:	4640      	mov	r0, r8
 80069f2:	4649      	mov	r1, r9
 80069f4:	f7f9 fbc8 	bl	8000188 <__aeabi_dsub>
 80069f8:	4622      	mov	r2, r4
 80069fa:	462b      	mov	r3, r5
 80069fc:	f7f9 fbc4 	bl	8000188 <__aeabi_dsub>
 8006a00:	a31b      	add	r3, pc, #108	; (adr r3, 8006a70 <__ieee754_rem_pio2+0x330>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	4604      	mov	r4, r0
 8006a08:	460d      	mov	r5, r1
 8006a0a:	ec51 0b18 	vmov	r0, r1, d8
 8006a0e:	f7f9 fd73 	bl	80004f8 <__aeabi_dmul>
 8006a12:	4622      	mov	r2, r4
 8006a14:	462b      	mov	r3, r5
 8006a16:	f7f9 fbb7 	bl	8000188 <__aeabi_dsub>
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	460d      	mov	r5, r1
 8006a1e:	e75f      	b.n	80068e0 <__ieee754_rem_pio2+0x1a0>
 8006a20:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <__ieee754_rem_pio2+0x350>)
 8006a22:	4598      	cmp	r8, r3
 8006a24:	dd36      	ble.n	8006a94 <__ieee754_rem_pio2+0x354>
 8006a26:	ee10 2a10 	vmov	r2, s0
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	f7f9 fbaa 	bl	8000188 <__aeabi_dsub>
 8006a34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a38:	e9ca 0100 	strd	r0, r1, [sl]
 8006a3c:	e694      	b.n	8006768 <__ieee754_rem_pio2+0x28>
 8006a3e:	bf00      	nop
 8006a40:	54400000 	.word	0x54400000
 8006a44:	3ff921fb 	.word	0x3ff921fb
 8006a48:	1a626331 	.word	0x1a626331
 8006a4c:	3dd0b461 	.word	0x3dd0b461
 8006a50:	1a600000 	.word	0x1a600000
 8006a54:	3dd0b461 	.word	0x3dd0b461
 8006a58:	2e037073 	.word	0x2e037073
 8006a5c:	3ba3198a 	.word	0x3ba3198a
 8006a60:	6dc9c883 	.word	0x6dc9c883
 8006a64:	3fe45f30 	.word	0x3fe45f30
 8006a68:	2e000000 	.word	0x2e000000
 8006a6c:	3ba3198a 	.word	0x3ba3198a
 8006a70:	252049c1 	.word	0x252049c1
 8006a74:	397b839a 	.word	0x397b839a
 8006a78:	3fe921fb 	.word	0x3fe921fb
 8006a7c:	4002d97b 	.word	0x4002d97b
 8006a80:	3ff921fb 	.word	0x3ff921fb
 8006a84:	413921fb 	.word	0x413921fb
 8006a88:	3fe00000 	.word	0x3fe00000
 8006a8c:	080078b4 	.word	0x080078b4
 8006a90:	7fefffff 	.word	0x7fefffff
 8006a94:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006a98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006a9c:	ee10 0a10 	vmov	r0, s0
 8006aa0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006aa4:	ee10 6a10 	vmov	r6, s0
 8006aa8:	460f      	mov	r7, r1
 8006aaa:	f7f9 ffbf 	bl	8000a2c <__aeabi_d2iz>
 8006aae:	f7f9 fcb9 	bl	8000424 <__aeabi_i2d>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006abe:	f7f9 fb63 	bl	8000188 <__aeabi_dsub>
 8006ac2:	4b22      	ldr	r3, [pc, #136]	; (8006b4c <__ieee754_rem_pio2+0x40c>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f7f9 fd17 	bl	80004f8 <__aeabi_dmul>
 8006aca:	460f      	mov	r7, r1
 8006acc:	4606      	mov	r6, r0
 8006ace:	f7f9 ffad 	bl	8000a2c <__aeabi_d2iz>
 8006ad2:	f7f9 fca7 	bl	8000424 <__aeabi_i2d>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4630      	mov	r0, r6
 8006adc:	4639      	mov	r1, r7
 8006ade:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ae2:	f7f9 fb51 	bl	8000188 <__aeabi_dsub>
 8006ae6:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <__ieee754_rem_pio2+0x40c>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f7f9 fd05 	bl	80004f8 <__aeabi_dmul>
 8006aee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006af2:	ad04      	add	r5, sp, #16
 8006af4:	f04f 0803 	mov.w	r8, #3
 8006af8:	46a9      	mov	r9, r5
 8006afa:	2600      	movs	r6, #0
 8006afc:	2700      	movs	r7, #0
 8006afe:	4632      	mov	r2, r6
 8006b00:	463b      	mov	r3, r7
 8006b02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006b06:	46c3      	mov	fp, r8
 8006b08:	3d08      	subs	r5, #8
 8006b0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b0e:	f7f9 ff5b 	bl	80009c8 <__aeabi_dcmpeq>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d1f3      	bne.n	8006afe <__ieee754_rem_pio2+0x3be>
 8006b16:	4b0e      	ldr	r3, [pc, #56]	; (8006b50 <__ieee754_rem_pio2+0x410>)
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	4622      	mov	r2, r4
 8006b20:	465b      	mov	r3, fp
 8006b22:	4651      	mov	r1, sl
 8006b24:	4648      	mov	r0, r9
 8006b26:	f000 f8df 	bl	8006ce8 <__kernel_rem_pio2>
 8006b2a:	9b02      	ldr	r3, [sp, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	4683      	mov	fp, r0
 8006b30:	f6bf ae46 	bge.w	80067c0 <__ieee754_rem_pio2+0x80>
 8006b34:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006b38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b3c:	f8ca 3004 	str.w	r3, [sl, #4]
 8006b40:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006b44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b48:	e73a      	b.n	80069c0 <__ieee754_rem_pio2+0x280>
 8006b4a:	bf00      	nop
 8006b4c:	41700000 	.word	0x41700000
 8006b50:	08007934 	.word	0x08007934
 8006b54:	00000000 	.word	0x00000000

08006b58 <__kernel_cos>:
 8006b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	ec57 6b10 	vmov	r6, r7, d0
 8006b60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006b64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006b68:	ed8d 1b00 	vstr	d1, [sp]
 8006b6c:	da07      	bge.n	8006b7e <__kernel_cos+0x26>
 8006b6e:	ee10 0a10 	vmov	r0, s0
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 ff5a 	bl	8000a2c <__aeabi_d2iz>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	f000 8088 	beq.w	8006c8e <__kernel_cos+0x136>
 8006b7e:	4632      	mov	r2, r6
 8006b80:	463b      	mov	r3, r7
 8006b82:	4630      	mov	r0, r6
 8006b84:	4639      	mov	r1, r7
 8006b86:	f7f9 fcb7 	bl	80004f8 <__aeabi_dmul>
 8006b8a:	4b51      	ldr	r3, [pc, #324]	; (8006cd0 <__kernel_cos+0x178>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	f7f9 fcb1 	bl	80004f8 <__aeabi_dmul>
 8006b96:	a340      	add	r3, pc, #256	; (adr r3, 8006c98 <__kernel_cos+0x140>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	468b      	mov	fp, r1
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	f7f9 fca8 	bl	80004f8 <__aeabi_dmul>
 8006ba8:	a33d      	add	r3, pc, #244	; (adr r3, 8006ca0 <__kernel_cos+0x148>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 faed 	bl	800018c <__adddf3>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	f7f9 fc9f 	bl	80004f8 <__aeabi_dmul>
 8006bba:	a33b      	add	r3, pc, #236	; (adr r3, 8006ca8 <__kernel_cos+0x150>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f7f9 fae2 	bl	8000188 <__aeabi_dsub>
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	f7f9 fc96 	bl	80004f8 <__aeabi_dmul>
 8006bcc:	a338      	add	r3, pc, #224	; (adr r3, 8006cb0 <__kernel_cos+0x158>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f7f9 fadb 	bl	800018c <__adddf3>
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	462b      	mov	r3, r5
 8006bda:	f7f9 fc8d 	bl	80004f8 <__aeabi_dmul>
 8006bde:	a336      	add	r3, pc, #216	; (adr r3, 8006cb8 <__kernel_cos+0x160>)
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	f7f9 fad0 	bl	8000188 <__aeabi_dsub>
 8006be8:	4622      	mov	r2, r4
 8006bea:	462b      	mov	r3, r5
 8006bec:	f7f9 fc84 	bl	80004f8 <__aeabi_dmul>
 8006bf0:	a333      	add	r3, pc, #204	; (adr r3, 8006cc0 <__kernel_cos+0x168>)
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	f7f9 fac9 	bl	800018c <__adddf3>
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	462b      	mov	r3, r5
 8006bfe:	f7f9 fc7b 	bl	80004f8 <__aeabi_dmul>
 8006c02:	4622      	mov	r2, r4
 8006c04:	462b      	mov	r3, r5
 8006c06:	f7f9 fc77 	bl	80004f8 <__aeabi_dmul>
 8006c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c0e:	4604      	mov	r4, r0
 8006c10:	460d      	mov	r5, r1
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	f7f9 fc6f 	bl	80004f8 <__aeabi_dmul>
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	4629      	mov	r1, r5
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7f9 fab1 	bl	8000188 <__aeabi_dsub>
 8006c26:	4b2b      	ldr	r3, [pc, #172]	; (8006cd4 <__kernel_cos+0x17c>)
 8006c28:	4598      	cmp	r8, r3
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460f      	mov	r7, r1
 8006c2e:	dc10      	bgt.n	8006c52 <__kernel_cos+0xfa>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4650      	mov	r0, sl
 8006c36:	4659      	mov	r1, fp
 8006c38:	f7f9 faa6 	bl	8000188 <__aeabi_dsub>
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4926      	ldr	r1, [pc, #152]	; (8006cd8 <__kernel_cos+0x180>)
 8006c40:	4602      	mov	r2, r0
 8006c42:	2000      	movs	r0, #0
 8006c44:	f7f9 faa0 	bl	8000188 <__aeabi_dsub>
 8006c48:	ec41 0b10 	vmov	d0, r0, r1
 8006c4c:	b003      	add	sp, #12
 8006c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c52:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <__kernel_cos+0x184>)
 8006c54:	4920      	ldr	r1, [pc, #128]	; (8006cd8 <__kernel_cos+0x180>)
 8006c56:	4598      	cmp	r8, r3
 8006c58:	bfcc      	ite	gt
 8006c5a:	4d21      	ldrgt	r5, [pc, #132]	; (8006ce0 <__kernel_cos+0x188>)
 8006c5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006c60:	2400      	movs	r4, #0
 8006c62:	4622      	mov	r2, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	2000      	movs	r0, #0
 8006c68:	f7f9 fa8e 	bl	8000188 <__aeabi_dsub>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4680      	mov	r8, r0
 8006c70:	4689      	mov	r9, r1
 8006c72:	462b      	mov	r3, r5
 8006c74:	4650      	mov	r0, sl
 8006c76:	4659      	mov	r1, fp
 8006c78:	f7f9 fa86 	bl	8000188 <__aeabi_dsub>
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	463b      	mov	r3, r7
 8006c80:	f7f9 fa82 	bl	8000188 <__aeabi_dsub>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4640      	mov	r0, r8
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	e7da      	b.n	8006c44 <__kernel_cos+0xec>
 8006c8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006cc8 <__kernel_cos+0x170>
 8006c92:	e7db      	b.n	8006c4c <__kernel_cos+0xf4>
 8006c94:	f3af 8000 	nop.w
 8006c98:	be8838d4 	.word	0xbe8838d4
 8006c9c:	bda8fae9 	.word	0xbda8fae9
 8006ca0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ca4:	3e21ee9e 	.word	0x3e21ee9e
 8006ca8:	809c52ad 	.word	0x809c52ad
 8006cac:	3e927e4f 	.word	0x3e927e4f
 8006cb0:	19cb1590 	.word	0x19cb1590
 8006cb4:	3efa01a0 	.word	0x3efa01a0
 8006cb8:	16c15177 	.word	0x16c15177
 8006cbc:	3f56c16c 	.word	0x3f56c16c
 8006cc0:	5555554c 	.word	0x5555554c
 8006cc4:	3fa55555 	.word	0x3fa55555
 8006cc8:	00000000 	.word	0x00000000
 8006ccc:	3ff00000 	.word	0x3ff00000
 8006cd0:	3fe00000 	.word	0x3fe00000
 8006cd4:	3fd33332 	.word	0x3fd33332
 8006cd8:	3ff00000 	.word	0x3ff00000
 8006cdc:	3fe90000 	.word	0x3fe90000
 8006ce0:	3fd20000 	.word	0x3fd20000
 8006ce4:	00000000 	.word	0x00000000

08006ce8 <__kernel_rem_pio2>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	ed2d 8b02 	vpush	{d8}
 8006cf0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006cf4:	f112 0f14 	cmn.w	r2, #20
 8006cf8:	9308      	str	r3, [sp, #32]
 8006cfa:	9101      	str	r1, [sp, #4]
 8006cfc:	4bc6      	ldr	r3, [pc, #792]	; (8007018 <__kernel_rem_pio2+0x330>)
 8006cfe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006d00:	9009      	str	r0, [sp, #36]	; 0x24
 8006d02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	9b08      	ldr	r3, [sp, #32]
 8006d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d0e:	bfa8      	it	ge
 8006d10:	1ed4      	subge	r4, r2, #3
 8006d12:	9306      	str	r3, [sp, #24]
 8006d14:	bfb2      	itee	lt
 8006d16:	2400      	movlt	r4, #0
 8006d18:	2318      	movge	r3, #24
 8006d1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006d1e:	f06f 0317 	mvn.w	r3, #23
 8006d22:	fb04 3303 	mla	r3, r4, r3, r3
 8006d26:	eb03 0a02 	add.w	sl, r3, r2
 8006d2a:	9b04      	ldr	r3, [sp, #16]
 8006d2c:	9a06      	ldr	r2, [sp, #24]
 8006d2e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007008 <__kernel_rem_pio2+0x320>
 8006d32:	eb03 0802 	add.w	r8, r3, r2
 8006d36:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006d38:	1aa7      	subs	r7, r4, r2
 8006d3a:	ae20      	add	r6, sp, #128	; 0x80
 8006d3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006d40:	2500      	movs	r5, #0
 8006d42:	4545      	cmp	r5, r8
 8006d44:	dd18      	ble.n	8006d78 <__kernel_rem_pio2+0x90>
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006d4c:	aa20      	add	r2, sp, #128	; 0x80
 8006d4e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007008 <__kernel_rem_pio2+0x320>
 8006d52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006d56:	f1c3 0301 	rsb	r3, r3, #1
 8006d5a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006d5e:	9307      	str	r3, [sp, #28]
 8006d60:	9b07      	ldr	r3, [sp, #28]
 8006d62:	9a04      	ldr	r2, [sp, #16]
 8006d64:	4443      	add	r3, r8
 8006d66:	429a      	cmp	r2, r3
 8006d68:	db2f      	blt.n	8006dca <__kernel_rem_pio2+0xe2>
 8006d6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006d6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006d72:	462f      	mov	r7, r5
 8006d74:	2600      	movs	r6, #0
 8006d76:	e01b      	b.n	8006db0 <__kernel_rem_pio2+0xc8>
 8006d78:	42ef      	cmn	r7, r5
 8006d7a:	d407      	bmi.n	8006d8c <__kernel_rem_pio2+0xa4>
 8006d7c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006d80:	f7f9 fb50 	bl	8000424 <__aeabi_i2d>
 8006d84:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006d88:	3501      	adds	r5, #1
 8006d8a:	e7da      	b.n	8006d42 <__kernel_rem_pio2+0x5a>
 8006d8c:	ec51 0b18 	vmov	r0, r1, d8
 8006d90:	e7f8      	b.n	8006d84 <__kernel_rem_pio2+0x9c>
 8006d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d96:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006d9a:	f7f9 fbad 	bl	80004f8 <__aeabi_dmul>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006da6:	f7f9 f9f1 	bl	800018c <__adddf3>
 8006daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dae:	3601      	adds	r6, #1
 8006db0:	9b06      	ldr	r3, [sp, #24]
 8006db2:	429e      	cmp	r6, r3
 8006db4:	f1a7 0708 	sub.w	r7, r7, #8
 8006db8:	ddeb      	ble.n	8006d92 <__kernel_rem_pio2+0xaa>
 8006dba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dbe:	3508      	adds	r5, #8
 8006dc0:	ecab 7b02 	vstmia	fp!, {d7}
 8006dc4:	f108 0801 	add.w	r8, r8, #1
 8006dc8:	e7ca      	b.n	8006d60 <__kernel_rem_pio2+0x78>
 8006dca:	9b04      	ldr	r3, [sp, #16]
 8006dcc:	aa0c      	add	r2, sp, #48	; 0x30
 8006dce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dd4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006dd6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006dda:	9c04      	ldr	r4, [sp, #16]
 8006ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8006dde:	ab98      	add	r3, sp, #608	; 0x260
 8006de0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006de4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006de8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006dec:	f8cd b008 	str.w	fp, [sp, #8]
 8006df0:	4625      	mov	r5, r4
 8006df2:	2d00      	cmp	r5, #0
 8006df4:	dc78      	bgt.n	8006ee8 <__kernel_rem_pio2+0x200>
 8006df6:	ec47 6b10 	vmov	d0, r6, r7
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	f000 fbfc 	bl	80075f8 <scalbn>
 8006e00:	ec57 6b10 	vmov	r6, r7, d0
 8006e04:	2200      	movs	r2, #0
 8006e06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006e0a:	ee10 0a10 	vmov	r0, s0
 8006e0e:	4639      	mov	r1, r7
 8006e10:	f7f9 fb72 	bl	80004f8 <__aeabi_dmul>
 8006e14:	ec41 0b10 	vmov	d0, r0, r1
 8006e18:	f000 fb6e 	bl	80074f8 <floor>
 8006e1c:	4b7f      	ldr	r3, [pc, #508]	; (800701c <__kernel_rem_pio2+0x334>)
 8006e1e:	ec51 0b10 	vmov	r0, r1, d0
 8006e22:	2200      	movs	r2, #0
 8006e24:	f7f9 fb68 	bl	80004f8 <__aeabi_dmul>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 f9aa 	bl	8000188 <__aeabi_dsub>
 8006e34:	460f      	mov	r7, r1
 8006e36:	4606      	mov	r6, r0
 8006e38:	f7f9 fdf8 	bl	8000a2c <__aeabi_d2iz>
 8006e3c:	9007      	str	r0, [sp, #28]
 8006e3e:	f7f9 faf1 	bl	8000424 <__aeabi_i2d>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4630      	mov	r0, r6
 8006e48:	4639      	mov	r1, r7
 8006e4a:	f7f9 f99d 	bl	8000188 <__aeabi_dsub>
 8006e4e:	f1ba 0f00 	cmp.w	sl, #0
 8006e52:	4606      	mov	r6, r0
 8006e54:	460f      	mov	r7, r1
 8006e56:	dd70      	ble.n	8006f3a <__kernel_rem_pio2+0x252>
 8006e58:	1e62      	subs	r2, r4, #1
 8006e5a:	ab0c      	add	r3, sp, #48	; 0x30
 8006e5c:	9d07      	ldr	r5, [sp, #28]
 8006e5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006e62:	f1ca 0118 	rsb	r1, sl, #24
 8006e66:	fa40 f301 	asr.w	r3, r0, r1
 8006e6a:	441d      	add	r5, r3
 8006e6c:	408b      	lsls	r3, r1
 8006e6e:	1ac0      	subs	r0, r0, r3
 8006e70:	ab0c      	add	r3, sp, #48	; 0x30
 8006e72:	9507      	str	r5, [sp, #28]
 8006e74:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006e78:	f1ca 0317 	rsb	r3, sl, #23
 8006e7c:	fa40 f303 	asr.w	r3, r0, r3
 8006e80:	9302      	str	r3, [sp, #8]
 8006e82:	9b02      	ldr	r3, [sp, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dd66      	ble.n	8006f56 <__kernel_rem_pio2+0x26e>
 8006e88:	9b07      	ldr	r3, [sp, #28]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	9307      	str	r3, [sp, #28]
 8006e90:	4615      	mov	r5, r2
 8006e92:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e96:	4294      	cmp	r4, r2
 8006e98:	f300 8099 	bgt.w	8006fce <__kernel_rem_pio2+0x2e6>
 8006e9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ea0:	dd07      	ble.n	8006eb2 <__kernel_rem_pio2+0x1ca>
 8006ea2:	f1ba 0f01 	cmp.w	sl, #1
 8006ea6:	f000 80a5 	beq.w	8006ff4 <__kernel_rem_pio2+0x30c>
 8006eaa:	f1ba 0f02 	cmp.w	sl, #2
 8006eae:	f000 80c1 	beq.w	8007034 <__kernel_rem_pio2+0x34c>
 8006eb2:	9b02      	ldr	r3, [sp, #8]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d14e      	bne.n	8006f56 <__kernel_rem_pio2+0x26e>
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	4958      	ldr	r1, [pc, #352]	; (8007020 <__kernel_rem_pio2+0x338>)
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	f7f9 f962 	bl	8000188 <__aeabi_dsub>
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	460f      	mov	r7, r1
 8006ec8:	2d00      	cmp	r5, #0
 8006eca:	d044      	beq.n	8006f56 <__kernel_rem_pio2+0x26e>
 8006ecc:	4650      	mov	r0, sl
 8006ece:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007010 <__kernel_rem_pio2+0x328>
 8006ed2:	f000 fb91 	bl	80075f8 <scalbn>
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	4639      	mov	r1, r7
 8006eda:	ec53 2b10 	vmov	r2, r3, d0
 8006ede:	f7f9 f953 	bl	8000188 <__aeabi_dsub>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460f      	mov	r7, r1
 8006ee6:	e036      	b.n	8006f56 <__kernel_rem_pio2+0x26e>
 8006ee8:	4b4e      	ldr	r3, [pc, #312]	; (8007024 <__kernel_rem_pio2+0x33c>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	4630      	mov	r0, r6
 8006eee:	4639      	mov	r1, r7
 8006ef0:	f7f9 fb02 	bl	80004f8 <__aeabi_dmul>
 8006ef4:	f7f9 fd9a 	bl	8000a2c <__aeabi_d2iz>
 8006ef8:	f7f9 fa94 	bl	8000424 <__aeabi_i2d>
 8006efc:	4b4a      	ldr	r3, [pc, #296]	; (8007028 <__kernel_rem_pio2+0x340>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	f7f9 faf8 	bl	80004f8 <__aeabi_dmul>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	4639      	mov	r1, r7
 8006f10:	f7f9 f93a 	bl	8000188 <__aeabi_dsub>
 8006f14:	f7f9 fd8a 	bl	8000a2c <__aeabi_d2iz>
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	f843 0b04 	str.w	r0, [r3], #4
 8006f1e:	3d01      	subs	r5, #1
 8006f20:	9302      	str	r3, [sp, #8]
 8006f22:	ab70      	add	r3, sp, #448	; 0x1c0
 8006f24:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	4640      	mov	r0, r8
 8006f2e:	4649      	mov	r1, r9
 8006f30:	f7f9 f92c 	bl	800018c <__adddf3>
 8006f34:	4606      	mov	r6, r0
 8006f36:	460f      	mov	r7, r1
 8006f38:	e75b      	b.n	8006df2 <__kernel_rem_pio2+0x10a>
 8006f3a:	d105      	bne.n	8006f48 <__kernel_rem_pio2+0x260>
 8006f3c:	1e63      	subs	r3, r4, #1
 8006f3e:	aa0c      	add	r2, sp, #48	; 0x30
 8006f40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006f44:	15c3      	asrs	r3, r0, #23
 8006f46:	e79b      	b.n	8006e80 <__kernel_rem_pio2+0x198>
 8006f48:	4b38      	ldr	r3, [pc, #224]	; (800702c <__kernel_rem_pio2+0x344>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f7f9 fd5a 	bl	8000a04 <__aeabi_dcmpge>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d139      	bne.n	8006fc8 <__kernel_rem_pio2+0x2e0>
 8006f54:	9002      	str	r0, [sp, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	f7f9 fd33 	bl	80009c8 <__aeabi_dcmpeq>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	f000 80b4 	beq.w	80070d0 <__kernel_rem_pio2+0x3e8>
 8006f68:	f104 3bff 	add.w	fp, r4, #4294967295
 8006f6c:	465b      	mov	r3, fp
 8006f6e:	2200      	movs	r2, #0
 8006f70:	9904      	ldr	r1, [sp, #16]
 8006f72:	428b      	cmp	r3, r1
 8006f74:	da65      	bge.n	8007042 <__kernel_rem_pio2+0x35a>
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	d07b      	beq.n	8007072 <__kernel_rem_pio2+0x38a>
 8006f7a:	ab0c      	add	r3, sp, #48	; 0x30
 8006f7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006f80:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80a0 	beq.w	80070ca <__kernel_rem_pio2+0x3e2>
 8006f8a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007010 <__kernel_rem_pio2+0x328>
 8006f8e:	4650      	mov	r0, sl
 8006f90:	f000 fb32 	bl	80075f8 <scalbn>
 8006f94:	4f23      	ldr	r7, [pc, #140]	; (8007024 <__kernel_rem_pio2+0x33c>)
 8006f96:	ec55 4b10 	vmov	r4, r5, d0
 8006f9a:	46d8      	mov	r8, fp
 8006f9c:	2600      	movs	r6, #0
 8006f9e:	f1b8 0f00 	cmp.w	r8, #0
 8006fa2:	f280 80cf 	bge.w	8007144 <__kernel_rem_pio2+0x45c>
 8006fa6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007008 <__kernel_rem_pio2+0x320>
 8006faa:	465f      	mov	r7, fp
 8006fac:	f04f 0800 	mov.w	r8, #0
 8006fb0:	2f00      	cmp	r7, #0
 8006fb2:	f2c0 80fd 	blt.w	80071b0 <__kernel_rem_pio2+0x4c8>
 8006fb6:	ab70      	add	r3, sp, #448	; 0x1c0
 8006fb8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007030 <__kernel_rem_pio2+0x348>
 8006fbc:	ec55 4b18 	vmov	r4, r5, d8
 8006fc0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	e0e5      	b.n	8007194 <__kernel_rem_pio2+0x4ac>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	e75c      	b.n	8006e88 <__kernel_rem_pio2+0x1a0>
 8006fce:	f8db 3000 	ldr.w	r3, [fp]
 8006fd2:	b955      	cbnz	r5, 8006fea <__kernel_rem_pio2+0x302>
 8006fd4:	b123      	cbz	r3, 8006fe0 <__kernel_rem_pio2+0x2f8>
 8006fd6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006fda:	f8cb 3000 	str.w	r3, [fp]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	3201      	adds	r2, #1
 8006fe2:	f10b 0b04 	add.w	fp, fp, #4
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	e755      	b.n	8006e96 <__kernel_rem_pio2+0x1ae>
 8006fea:	1acb      	subs	r3, r1, r3
 8006fec:	f8cb 3000 	str.w	r3, [fp]
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	e7f5      	b.n	8006fe0 <__kernel_rem_pio2+0x2f8>
 8006ff4:	1e62      	subs	r2, r4, #1
 8006ff6:	ab0c      	add	r3, sp, #48	; 0x30
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007000:	a90c      	add	r1, sp, #48	; 0x30
 8007002:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007006:	e754      	b.n	8006eb2 <__kernel_rem_pio2+0x1ca>
	...
 8007014:	3ff00000 	.word	0x3ff00000
 8007018:	08007a80 	.word	0x08007a80
 800701c:	40200000 	.word	0x40200000
 8007020:	3ff00000 	.word	0x3ff00000
 8007024:	3e700000 	.word	0x3e700000
 8007028:	41700000 	.word	0x41700000
 800702c:	3fe00000 	.word	0x3fe00000
 8007030:	08007a40 	.word	0x08007a40
 8007034:	1e62      	subs	r2, r4, #1
 8007036:	ab0c      	add	r3, sp, #48	; 0x30
 8007038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007040:	e7de      	b.n	8007000 <__kernel_rem_pio2+0x318>
 8007042:	a90c      	add	r1, sp, #48	; 0x30
 8007044:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007048:	3b01      	subs	r3, #1
 800704a:	430a      	orrs	r2, r1
 800704c:	e790      	b.n	8006f70 <__kernel_rem_pio2+0x288>
 800704e:	3301      	adds	r3, #1
 8007050:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007054:	2900      	cmp	r1, #0
 8007056:	d0fa      	beq.n	800704e <__kernel_rem_pio2+0x366>
 8007058:	9a08      	ldr	r2, [sp, #32]
 800705a:	18e3      	adds	r3, r4, r3
 800705c:	18a6      	adds	r6, r4, r2
 800705e:	aa20      	add	r2, sp, #128	; 0x80
 8007060:	1c65      	adds	r5, r4, #1
 8007062:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007066:	9302      	str	r3, [sp, #8]
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	42ab      	cmp	r3, r5
 800706c:	da04      	bge.n	8007078 <__kernel_rem_pio2+0x390>
 800706e:	461c      	mov	r4, r3
 8007070:	e6b5      	b.n	8006dde <__kernel_rem_pio2+0xf6>
 8007072:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007074:	2301      	movs	r3, #1
 8007076:	e7eb      	b.n	8007050 <__kernel_rem_pio2+0x368>
 8007078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800707a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800707e:	f7f9 f9d1 	bl	8000424 <__aeabi_i2d>
 8007082:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007088:	46b3      	mov	fp, r6
 800708a:	461c      	mov	r4, r3
 800708c:	2700      	movs	r7, #0
 800708e:	f04f 0800 	mov.w	r8, #0
 8007092:	f04f 0900 	mov.w	r9, #0
 8007096:	9b06      	ldr	r3, [sp, #24]
 8007098:	429f      	cmp	r7, r3
 800709a:	dd06      	ble.n	80070aa <__kernel_rem_pio2+0x3c2>
 800709c:	ab70      	add	r3, sp, #448	; 0x1c0
 800709e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80070a2:	e9c3 8900 	strd	r8, r9, [r3]
 80070a6:	3501      	adds	r5, #1
 80070a8:	e7de      	b.n	8007068 <__kernel_rem_pio2+0x380>
 80070aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80070ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80070b2:	f7f9 fa21 	bl	80004f8 <__aeabi_dmul>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	f7f9 f865 	bl	800018c <__adddf3>
 80070c2:	3701      	adds	r7, #1
 80070c4:	4680      	mov	r8, r0
 80070c6:	4689      	mov	r9, r1
 80070c8:	e7e5      	b.n	8007096 <__kernel_rem_pio2+0x3ae>
 80070ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070ce:	e754      	b.n	8006f7a <__kernel_rem_pio2+0x292>
 80070d0:	ec47 6b10 	vmov	d0, r6, r7
 80070d4:	f1ca 0000 	rsb	r0, sl, #0
 80070d8:	f000 fa8e 	bl	80075f8 <scalbn>
 80070dc:	ec57 6b10 	vmov	r6, r7, d0
 80070e0:	4b9f      	ldr	r3, [pc, #636]	; (8007360 <__kernel_rem_pio2+0x678>)
 80070e2:	ee10 0a10 	vmov	r0, s0
 80070e6:	2200      	movs	r2, #0
 80070e8:	4639      	mov	r1, r7
 80070ea:	f7f9 fc8b 	bl	8000a04 <__aeabi_dcmpge>
 80070ee:	b300      	cbz	r0, 8007132 <__kernel_rem_pio2+0x44a>
 80070f0:	4b9c      	ldr	r3, [pc, #624]	; (8007364 <__kernel_rem_pio2+0x67c>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	4630      	mov	r0, r6
 80070f6:	4639      	mov	r1, r7
 80070f8:	f7f9 f9fe 	bl	80004f8 <__aeabi_dmul>
 80070fc:	f7f9 fc96 	bl	8000a2c <__aeabi_d2iz>
 8007100:	4605      	mov	r5, r0
 8007102:	f7f9 f98f 	bl	8000424 <__aeabi_i2d>
 8007106:	4b96      	ldr	r3, [pc, #600]	; (8007360 <__kernel_rem_pio2+0x678>)
 8007108:	2200      	movs	r2, #0
 800710a:	f7f9 f9f5 	bl	80004f8 <__aeabi_dmul>
 800710e:	460b      	mov	r3, r1
 8007110:	4602      	mov	r2, r0
 8007112:	4639      	mov	r1, r7
 8007114:	4630      	mov	r0, r6
 8007116:	f7f9 f837 	bl	8000188 <__aeabi_dsub>
 800711a:	f7f9 fc87 	bl	8000a2c <__aeabi_d2iz>
 800711e:	f104 0b01 	add.w	fp, r4, #1
 8007122:	ab0c      	add	r3, sp, #48	; 0x30
 8007124:	f10a 0a18 	add.w	sl, sl, #24
 8007128:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800712c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007130:	e72b      	b.n	8006f8a <__kernel_rem_pio2+0x2a2>
 8007132:	4630      	mov	r0, r6
 8007134:	4639      	mov	r1, r7
 8007136:	f7f9 fc79 	bl	8000a2c <__aeabi_d2iz>
 800713a:	ab0c      	add	r3, sp, #48	; 0x30
 800713c:	46a3      	mov	fp, r4
 800713e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007142:	e722      	b.n	8006f8a <__kernel_rem_pio2+0x2a2>
 8007144:	ab70      	add	r3, sp, #448	; 0x1c0
 8007146:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800714a:	ab0c      	add	r3, sp, #48	; 0x30
 800714c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007150:	f7f9 f968 	bl	8000424 <__aeabi_i2d>
 8007154:	4622      	mov	r2, r4
 8007156:	462b      	mov	r3, r5
 8007158:	f7f9 f9ce 	bl	80004f8 <__aeabi_dmul>
 800715c:	4632      	mov	r2, r6
 800715e:	e9c9 0100 	strd	r0, r1, [r9]
 8007162:	463b      	mov	r3, r7
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f9 f9c6 	bl	80004f8 <__aeabi_dmul>
 800716c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007170:	4604      	mov	r4, r0
 8007172:	460d      	mov	r5, r1
 8007174:	e713      	b.n	8006f9e <__kernel_rem_pio2+0x2b6>
 8007176:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800717a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800717e:	f7f9 f9bb 	bl	80004f8 <__aeabi_dmul>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7f8 ffff 	bl	800018c <__adddf3>
 800718e:	3601      	adds	r6, #1
 8007190:	4604      	mov	r4, r0
 8007192:	460d      	mov	r5, r1
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	429e      	cmp	r6, r3
 8007198:	dc01      	bgt.n	800719e <__kernel_rem_pio2+0x4b6>
 800719a:	45b0      	cmp	r8, r6
 800719c:	daeb      	bge.n	8007176 <__kernel_rem_pio2+0x48e>
 800719e:	ab48      	add	r3, sp, #288	; 0x120
 80071a0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80071a4:	e9c3 4500 	strd	r4, r5, [r3]
 80071a8:	3f01      	subs	r7, #1
 80071aa:	f108 0801 	add.w	r8, r8, #1
 80071ae:	e6ff      	b.n	8006fb0 <__kernel_rem_pio2+0x2c8>
 80071b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	dc0b      	bgt.n	80071ce <__kernel_rem_pio2+0x4e6>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	dc6e      	bgt.n	8007298 <__kernel_rem_pio2+0x5b0>
 80071ba:	d045      	beq.n	8007248 <__kernel_rem_pio2+0x560>
 80071bc:	9b07      	ldr	r3, [sp, #28]
 80071be:	f003 0007 	and.w	r0, r3, #7
 80071c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80071c6:	ecbd 8b02 	vpop	{d8}
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d1f3      	bne.n	80071bc <__kernel_rem_pio2+0x4d4>
 80071d4:	ab48      	add	r3, sp, #288	; 0x120
 80071d6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80071da:	46d0      	mov	r8, sl
 80071dc:	46d9      	mov	r9, fp
 80071de:	f1b9 0f00 	cmp.w	r9, #0
 80071e2:	f1a8 0808 	sub.w	r8, r8, #8
 80071e6:	dc64      	bgt.n	80072b2 <__kernel_rem_pio2+0x5ca>
 80071e8:	465c      	mov	r4, fp
 80071ea:	2c01      	cmp	r4, #1
 80071ec:	f1aa 0a08 	sub.w	sl, sl, #8
 80071f0:	dc7e      	bgt.n	80072f0 <__kernel_rem_pio2+0x608>
 80071f2:	2000      	movs	r0, #0
 80071f4:	2100      	movs	r1, #0
 80071f6:	f1bb 0f01 	cmp.w	fp, #1
 80071fa:	f300 8097 	bgt.w	800732c <__kernel_rem_pio2+0x644>
 80071fe:	9b02      	ldr	r3, [sp, #8]
 8007200:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007204:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007208:	2b00      	cmp	r3, #0
 800720a:	f040 8099 	bne.w	8007340 <__kernel_rem_pio2+0x658>
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	e9c3 5600 	strd	r5, r6, [r3]
 8007214:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007218:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800721c:	e7ce      	b.n	80071bc <__kernel_rem_pio2+0x4d4>
 800721e:	ab48      	add	r3, sp, #288	; 0x120
 8007220:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f8 ffb0 	bl	800018c <__adddf3>
 800722c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007230:	f1bb 0f00 	cmp.w	fp, #0
 8007234:	daf3      	bge.n	800721e <__kernel_rem_pio2+0x536>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	b113      	cbz	r3, 8007240 <__kernel_rem_pio2+0x558>
 800723a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800723e:	4619      	mov	r1, r3
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	e9c3 0100 	strd	r0, r1, [r3]
 8007246:	e7b9      	b.n	80071bc <__kernel_rem_pio2+0x4d4>
 8007248:	2000      	movs	r0, #0
 800724a:	2100      	movs	r1, #0
 800724c:	e7f0      	b.n	8007230 <__kernel_rem_pio2+0x548>
 800724e:	ab48      	add	r3, sp, #288	; 0x120
 8007250:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f8 ff98 	bl	800018c <__adddf3>
 800725c:	3c01      	subs	r4, #1
 800725e:	2c00      	cmp	r4, #0
 8007260:	daf5      	bge.n	800724e <__kernel_rem_pio2+0x566>
 8007262:	9b02      	ldr	r3, [sp, #8]
 8007264:	b1e3      	cbz	r3, 80072a0 <__kernel_rem_pio2+0x5b8>
 8007266:	4602      	mov	r2, r0
 8007268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800726c:	9c01      	ldr	r4, [sp, #4]
 800726e:	e9c4 2300 	strd	r2, r3, [r4]
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800727a:	f7f8 ff85 	bl	8000188 <__aeabi_dsub>
 800727e:	ad4a      	add	r5, sp, #296	; 0x128
 8007280:	2401      	movs	r4, #1
 8007282:	45a3      	cmp	fp, r4
 8007284:	da0f      	bge.n	80072a6 <__kernel_rem_pio2+0x5be>
 8007286:	9b02      	ldr	r3, [sp, #8]
 8007288:	b113      	cbz	r3, 8007290 <__kernel_rem_pio2+0x5a8>
 800728a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800728e:	4619      	mov	r1, r3
 8007290:	9b01      	ldr	r3, [sp, #4]
 8007292:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007296:	e791      	b.n	80071bc <__kernel_rem_pio2+0x4d4>
 8007298:	465c      	mov	r4, fp
 800729a:	2000      	movs	r0, #0
 800729c:	2100      	movs	r1, #0
 800729e:	e7de      	b.n	800725e <__kernel_rem_pio2+0x576>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	e7e2      	b.n	800726c <__kernel_rem_pio2+0x584>
 80072a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80072aa:	f7f8 ff6f 	bl	800018c <__adddf3>
 80072ae:	3401      	adds	r4, #1
 80072b0:	e7e7      	b.n	8007282 <__kernel_rem_pio2+0x59a>
 80072b2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80072b6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80072ba:	4620      	mov	r0, r4
 80072bc:	4632      	mov	r2, r6
 80072be:	463b      	mov	r3, r7
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f8 ff63 	bl	800018c <__adddf3>
 80072c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f8 ff59 	bl	8000188 <__aeabi_dsub>
 80072d6:	4632      	mov	r2, r6
 80072d8:	463b      	mov	r3, r7
 80072da:	f7f8 ff57 	bl	800018c <__adddf3>
 80072de:	ed9d 7b04 	vldr	d7, [sp, #16]
 80072e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80072e6:	ed88 7b00 	vstr	d7, [r8]
 80072ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80072ee:	e776      	b.n	80071de <__kernel_rem_pio2+0x4f6>
 80072f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80072f4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80072f8:	4640      	mov	r0, r8
 80072fa:	4632      	mov	r2, r6
 80072fc:	463b      	mov	r3, r7
 80072fe:	4649      	mov	r1, r9
 8007300:	f7f8 ff44 	bl	800018c <__adddf3>
 8007304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f7f8 ff3a 	bl	8000188 <__aeabi_dsub>
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	f7f8 ff38 	bl	800018c <__adddf3>
 800731c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007320:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007324:	ed8a 7b00 	vstr	d7, [sl]
 8007328:	3c01      	subs	r4, #1
 800732a:	e75e      	b.n	80071ea <__kernel_rem_pio2+0x502>
 800732c:	ab48      	add	r3, sp, #288	; 0x120
 800732e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f8 ff29 	bl	800018c <__adddf3>
 800733a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800733e:	e75a      	b.n	80071f6 <__kernel_rem_pio2+0x50e>
 8007340:	9b01      	ldr	r3, [sp, #4]
 8007342:	9a01      	ldr	r2, [sp, #4]
 8007344:	601d      	str	r5, [r3, #0]
 8007346:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800734a:	605c      	str	r4, [r3, #4]
 800734c:	609f      	str	r7, [r3, #8]
 800734e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007352:	60d3      	str	r3, [r2, #12]
 8007354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007358:	6110      	str	r0, [r2, #16]
 800735a:	6153      	str	r3, [r2, #20]
 800735c:	e72e      	b.n	80071bc <__kernel_rem_pio2+0x4d4>
 800735e:	bf00      	nop
 8007360:	41700000 	.word	0x41700000
 8007364:	3e700000 	.word	0x3e700000

08007368 <__kernel_sin>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	ed2d 8b04 	vpush	{d8-d9}
 8007370:	eeb0 8a41 	vmov.f32	s16, s2
 8007374:	eef0 8a61 	vmov.f32	s17, s3
 8007378:	ec55 4b10 	vmov	r4, r5, d0
 800737c:	b083      	sub	sp, #12
 800737e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007382:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007386:	9001      	str	r0, [sp, #4]
 8007388:	da06      	bge.n	8007398 <__kernel_sin+0x30>
 800738a:	ee10 0a10 	vmov	r0, s0
 800738e:	4629      	mov	r1, r5
 8007390:	f7f9 fb4c 	bl	8000a2c <__aeabi_d2iz>
 8007394:	2800      	cmp	r0, #0
 8007396:	d051      	beq.n	800743c <__kernel_sin+0xd4>
 8007398:	4622      	mov	r2, r4
 800739a:	462b      	mov	r3, r5
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f9 f8aa 	bl	80004f8 <__aeabi_dmul>
 80073a4:	4682      	mov	sl, r0
 80073a6:	468b      	mov	fp, r1
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	f7f9 f8a2 	bl	80004f8 <__aeabi_dmul>
 80073b4:	a341      	add	r3, pc, #260	; (adr r3, 80074bc <__kernel_sin+0x154>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	4680      	mov	r8, r0
 80073bc:	4689      	mov	r9, r1
 80073be:	4650      	mov	r0, sl
 80073c0:	4659      	mov	r1, fp
 80073c2:	f7f9 f899 	bl	80004f8 <__aeabi_dmul>
 80073c6:	a33f      	add	r3, pc, #252	; (adr r3, 80074c4 <__kernel_sin+0x15c>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f7f8 fedc 	bl	8000188 <__aeabi_dsub>
 80073d0:	4652      	mov	r2, sl
 80073d2:	465b      	mov	r3, fp
 80073d4:	f7f9 f890 	bl	80004f8 <__aeabi_dmul>
 80073d8:	a33c      	add	r3, pc, #240	; (adr r3, 80074cc <__kernel_sin+0x164>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f7f8 fed5 	bl	800018c <__adddf3>
 80073e2:	4652      	mov	r2, sl
 80073e4:	465b      	mov	r3, fp
 80073e6:	f7f9 f887 	bl	80004f8 <__aeabi_dmul>
 80073ea:	a33a      	add	r3, pc, #232	; (adr r3, 80074d4 <__kernel_sin+0x16c>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f8 feca 	bl	8000188 <__aeabi_dsub>
 80073f4:	4652      	mov	r2, sl
 80073f6:	465b      	mov	r3, fp
 80073f8:	f7f9 f87e 	bl	80004f8 <__aeabi_dmul>
 80073fc:	a337      	add	r3, pc, #220	; (adr r3, 80074dc <__kernel_sin+0x174>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 fec3 	bl	800018c <__adddf3>
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	4606      	mov	r6, r0
 800740a:	460f      	mov	r7, r1
 800740c:	b9eb      	cbnz	r3, 800744a <__kernel_sin+0xe2>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4650      	mov	r0, sl
 8007414:	4659      	mov	r1, fp
 8007416:	f7f9 f86f 	bl	80004f8 <__aeabi_dmul>
 800741a:	a325      	add	r3, pc, #148	; (adr r3, 80074b0 <__kernel_sin+0x148>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f7f8 feb2 	bl	8000188 <__aeabi_dsub>
 8007424:	4642      	mov	r2, r8
 8007426:	464b      	mov	r3, r9
 8007428:	f7f9 f866 	bl	80004f8 <__aeabi_dmul>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4620      	mov	r0, r4
 8007432:	4629      	mov	r1, r5
 8007434:	f7f8 feaa 	bl	800018c <__adddf3>
 8007438:	4604      	mov	r4, r0
 800743a:	460d      	mov	r5, r1
 800743c:	ec45 4b10 	vmov	d0, r4, r5
 8007440:	b003      	add	sp, #12
 8007442:	ecbd 8b04 	vpop	{d8-d9}
 8007446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744a:	4b1b      	ldr	r3, [pc, #108]	; (80074b8 <__kernel_sin+0x150>)
 800744c:	ec51 0b18 	vmov	r0, r1, d8
 8007450:	2200      	movs	r2, #0
 8007452:	f7f9 f851 	bl	80004f8 <__aeabi_dmul>
 8007456:	4632      	mov	r2, r6
 8007458:	ec41 0b19 	vmov	d9, r0, r1
 800745c:	463b      	mov	r3, r7
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	f7f9 f849 	bl	80004f8 <__aeabi_dmul>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	ec51 0b19 	vmov	r0, r1, d9
 800746e:	f7f8 fe8b 	bl	8000188 <__aeabi_dsub>
 8007472:	4652      	mov	r2, sl
 8007474:	465b      	mov	r3, fp
 8007476:	f7f9 f83f 	bl	80004f8 <__aeabi_dmul>
 800747a:	ec53 2b18 	vmov	r2, r3, d8
 800747e:	f7f8 fe83 	bl	8000188 <__aeabi_dsub>
 8007482:	a30b      	add	r3, pc, #44	; (adr r3, 80074b0 <__kernel_sin+0x148>)
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	4606      	mov	r6, r0
 800748a:	460f      	mov	r7, r1
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 f832 	bl	80004f8 <__aeabi_dmul>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f8 fe76 	bl	800018c <__adddf3>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4620      	mov	r0, r4
 80074a6:	4629      	mov	r1, r5
 80074a8:	f7f8 fe6e 	bl	8000188 <__aeabi_dsub>
 80074ac:	e7c4      	b.n	8007438 <__kernel_sin+0xd0>
 80074ae:	bf00      	nop
 80074b0:	55555549 	.word	0x55555549
 80074b4:	3fc55555 	.word	0x3fc55555
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	5acfd57c 	.word	0x5acfd57c
 80074c0:	3de5d93a 	.word	0x3de5d93a
 80074c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80074c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80074cc:	57b1fe7d 	.word	0x57b1fe7d
 80074d0:	3ec71de3 	.word	0x3ec71de3
 80074d4:	19c161d5 	.word	0x19c161d5
 80074d8:	3f2a01a0 	.word	0x3f2a01a0
 80074dc:	1110f8a6 	.word	0x1110f8a6
 80074e0:	3f811111 	.word	0x3f811111

080074e4 <fabs>:
 80074e4:	ec51 0b10 	vmov	r0, r1, d0
 80074e8:	ee10 2a10 	vmov	r2, s0
 80074ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074f0:	ec43 2b10 	vmov	d0, r2, r3
 80074f4:	4770      	bx	lr
	...

080074f8 <floor>:
 80074f8:	ec51 0b10 	vmov	r0, r1, d0
 80074fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007500:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007504:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007508:	2e13      	cmp	r6, #19
 800750a:	ee10 5a10 	vmov	r5, s0
 800750e:	ee10 8a10 	vmov	r8, s0
 8007512:	460c      	mov	r4, r1
 8007514:	dc32      	bgt.n	800757c <floor+0x84>
 8007516:	2e00      	cmp	r6, #0
 8007518:	da14      	bge.n	8007544 <floor+0x4c>
 800751a:	a333      	add	r3, pc, #204	; (adr r3, 80075e8 <floor+0xf0>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f8 fe34 	bl	800018c <__adddf3>
 8007524:	2200      	movs	r2, #0
 8007526:	2300      	movs	r3, #0
 8007528:	f7f9 fa76 	bl	8000a18 <__aeabi_dcmpgt>
 800752c:	b138      	cbz	r0, 800753e <floor+0x46>
 800752e:	2c00      	cmp	r4, #0
 8007530:	da57      	bge.n	80075e2 <floor+0xea>
 8007532:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007536:	431d      	orrs	r5, r3
 8007538:	d001      	beq.n	800753e <floor+0x46>
 800753a:	4c2d      	ldr	r4, [pc, #180]	; (80075f0 <floor+0xf8>)
 800753c:	2500      	movs	r5, #0
 800753e:	4621      	mov	r1, r4
 8007540:	4628      	mov	r0, r5
 8007542:	e025      	b.n	8007590 <floor+0x98>
 8007544:	4f2b      	ldr	r7, [pc, #172]	; (80075f4 <floor+0xfc>)
 8007546:	4137      	asrs	r7, r6
 8007548:	ea01 0307 	and.w	r3, r1, r7
 800754c:	4303      	orrs	r3, r0
 800754e:	d01f      	beq.n	8007590 <floor+0x98>
 8007550:	a325      	add	r3, pc, #148	; (adr r3, 80075e8 <floor+0xf0>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f7f8 fe19 	bl	800018c <__adddf3>
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	f7f9 fa5b 	bl	8000a18 <__aeabi_dcmpgt>
 8007562:	2800      	cmp	r0, #0
 8007564:	d0eb      	beq.n	800753e <floor+0x46>
 8007566:	2c00      	cmp	r4, #0
 8007568:	bfbe      	ittt	lt
 800756a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800756e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007572:	19a4      	addlt	r4, r4, r6
 8007574:	ea24 0407 	bic.w	r4, r4, r7
 8007578:	2500      	movs	r5, #0
 800757a:	e7e0      	b.n	800753e <floor+0x46>
 800757c:	2e33      	cmp	r6, #51	; 0x33
 800757e:	dd0b      	ble.n	8007598 <floor+0xa0>
 8007580:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007584:	d104      	bne.n	8007590 <floor+0x98>
 8007586:	ee10 2a10 	vmov	r2, s0
 800758a:	460b      	mov	r3, r1
 800758c:	f7f8 fdfe 	bl	800018c <__adddf3>
 8007590:	ec41 0b10 	vmov	d0, r0, r1
 8007594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007598:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800759c:	f04f 33ff 	mov.w	r3, #4294967295
 80075a0:	fa23 f707 	lsr.w	r7, r3, r7
 80075a4:	4207      	tst	r7, r0
 80075a6:	d0f3      	beq.n	8007590 <floor+0x98>
 80075a8:	a30f      	add	r3, pc, #60	; (adr r3, 80075e8 <floor+0xf0>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f7f8 fded 	bl	800018c <__adddf3>
 80075b2:	2200      	movs	r2, #0
 80075b4:	2300      	movs	r3, #0
 80075b6:	f7f9 fa2f 	bl	8000a18 <__aeabi_dcmpgt>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d0bf      	beq.n	800753e <floor+0x46>
 80075be:	2c00      	cmp	r4, #0
 80075c0:	da02      	bge.n	80075c8 <floor+0xd0>
 80075c2:	2e14      	cmp	r6, #20
 80075c4:	d103      	bne.n	80075ce <floor+0xd6>
 80075c6:	3401      	adds	r4, #1
 80075c8:	ea25 0507 	bic.w	r5, r5, r7
 80075cc:	e7b7      	b.n	800753e <floor+0x46>
 80075ce:	2301      	movs	r3, #1
 80075d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80075d4:	fa03 f606 	lsl.w	r6, r3, r6
 80075d8:	4435      	add	r5, r6
 80075da:	4545      	cmp	r5, r8
 80075dc:	bf38      	it	cc
 80075de:	18e4      	addcc	r4, r4, r3
 80075e0:	e7f2      	b.n	80075c8 <floor+0xd0>
 80075e2:	2500      	movs	r5, #0
 80075e4:	462c      	mov	r4, r5
 80075e6:	e7aa      	b.n	800753e <floor+0x46>
 80075e8:	8800759c 	.word	0x8800759c
 80075ec:	7e37e43c 	.word	0x7e37e43c
 80075f0:	bff00000 	.word	0xbff00000
 80075f4:	000fffff 	.word	0x000fffff

080075f8 <scalbn>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	ec55 4b10 	vmov	r4, r5, d0
 80075fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007602:	4606      	mov	r6, r0
 8007604:	462b      	mov	r3, r5
 8007606:	b99a      	cbnz	r2, 8007630 <scalbn+0x38>
 8007608:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800760c:	4323      	orrs	r3, r4
 800760e:	d036      	beq.n	800767e <scalbn+0x86>
 8007610:	4b39      	ldr	r3, [pc, #228]	; (80076f8 <scalbn+0x100>)
 8007612:	4629      	mov	r1, r5
 8007614:	ee10 0a10 	vmov	r0, s0
 8007618:	2200      	movs	r2, #0
 800761a:	f7f8 ff6d 	bl	80004f8 <__aeabi_dmul>
 800761e:	4b37      	ldr	r3, [pc, #220]	; (80076fc <scalbn+0x104>)
 8007620:	429e      	cmp	r6, r3
 8007622:	4604      	mov	r4, r0
 8007624:	460d      	mov	r5, r1
 8007626:	da10      	bge.n	800764a <scalbn+0x52>
 8007628:	a32b      	add	r3, pc, #172	; (adr r3, 80076d8 <scalbn+0xe0>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	e03a      	b.n	80076a6 <scalbn+0xae>
 8007630:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007634:	428a      	cmp	r2, r1
 8007636:	d10c      	bne.n	8007652 <scalbn+0x5a>
 8007638:	ee10 2a10 	vmov	r2, s0
 800763c:	4620      	mov	r0, r4
 800763e:	4629      	mov	r1, r5
 8007640:	f7f8 fda4 	bl	800018c <__adddf3>
 8007644:	4604      	mov	r4, r0
 8007646:	460d      	mov	r5, r1
 8007648:	e019      	b.n	800767e <scalbn+0x86>
 800764a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800764e:	460b      	mov	r3, r1
 8007650:	3a36      	subs	r2, #54	; 0x36
 8007652:	4432      	add	r2, r6
 8007654:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007658:	428a      	cmp	r2, r1
 800765a:	dd08      	ble.n	800766e <scalbn+0x76>
 800765c:	2d00      	cmp	r5, #0
 800765e:	a120      	add	r1, pc, #128	; (adr r1, 80076e0 <scalbn+0xe8>)
 8007660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007664:	da1c      	bge.n	80076a0 <scalbn+0xa8>
 8007666:	a120      	add	r1, pc, #128	; (adr r1, 80076e8 <scalbn+0xf0>)
 8007668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800766c:	e018      	b.n	80076a0 <scalbn+0xa8>
 800766e:	2a00      	cmp	r2, #0
 8007670:	dd08      	ble.n	8007684 <scalbn+0x8c>
 8007672:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007676:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800767a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800767e:	ec45 4b10 	vmov	d0, r4, r5
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007688:	da19      	bge.n	80076be <scalbn+0xc6>
 800768a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800768e:	429e      	cmp	r6, r3
 8007690:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007694:	dd0a      	ble.n	80076ac <scalbn+0xb4>
 8007696:	a112      	add	r1, pc, #72	; (adr r1, 80076e0 <scalbn+0xe8>)
 8007698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e2      	bne.n	8007666 <scalbn+0x6e>
 80076a0:	a30f      	add	r3, pc, #60	; (adr r3, 80076e0 <scalbn+0xe8>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f8 ff27 	bl	80004f8 <__aeabi_dmul>
 80076aa:	e7cb      	b.n	8007644 <scalbn+0x4c>
 80076ac:	a10a      	add	r1, pc, #40	; (adr r1, 80076d8 <scalbn+0xe0>)
 80076ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0b8      	beq.n	8007628 <scalbn+0x30>
 80076b6:	a10e      	add	r1, pc, #56	; (adr r1, 80076f0 <scalbn+0xf8>)
 80076b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076bc:	e7b4      	b.n	8007628 <scalbn+0x30>
 80076be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076c2:	3236      	adds	r2, #54	; 0x36
 80076c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80076cc:	4620      	mov	r0, r4
 80076ce:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <scalbn+0x108>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	e7e8      	b.n	80076a6 <scalbn+0xae>
 80076d4:	f3af 8000 	nop.w
 80076d8:	c2f8f359 	.word	0xc2f8f359
 80076dc:	01a56e1f 	.word	0x01a56e1f
 80076e0:	8800759c 	.word	0x8800759c
 80076e4:	7e37e43c 	.word	0x7e37e43c
 80076e8:	8800759c 	.word	0x8800759c
 80076ec:	fe37e43c 	.word	0xfe37e43c
 80076f0:	c2f8f359 	.word	0xc2f8f359
 80076f4:	81a56e1f 	.word	0x81a56e1f
 80076f8:	43500000 	.word	0x43500000
 80076fc:	ffff3cb0 	.word	0xffff3cb0
 8007700:	3c900000 	.word	0x3c900000

08007704 <_init>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	bf00      	nop
 8007708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770a:	bc08      	pop	{r3}
 800770c:	469e      	mov	lr, r3
 800770e:	4770      	bx	lr

08007710 <_fini>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr
