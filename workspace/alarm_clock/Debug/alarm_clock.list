
alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d2c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08009e70  08009e70  00019e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1f8  0800a1f8  0001a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a200  0800a200  0001a200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a204  0800a204  0001a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  0800a208  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000540  20000074  0800a278  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200005b4  0800a278  000205b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025148  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004403  00000000  00000000  000451ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f70  00000000  00000000  000495f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001dc0  00000000  00000000  0004b560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002552b  00000000  00000000  0004d320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002177e  00000000  00000000  0007284b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ec2c0  00000000  00000000  00093fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00180289  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008bc4  00000000  00000000  001802dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08009e54 	.word	0x08009e54

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08009e54 	.word	0x08009e54

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96e 	b.w	8000e10 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468c      	mov	ip, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8083 	bne.w	8000c62 <__udivmoddi4+0x116>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4617      	mov	r7, r2
 8000b60:	d947      	bls.n	8000bf2 <__udivmoddi4+0xa6>
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	b142      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	f1c2 0020 	rsb	r0, r2, #32
 8000b6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4097      	lsls	r7, r2
 8000b74:	ea40 0c01 	orr.w	ip, r0, r1
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbbc f6f8 	udiv	r6, ip, r8
 8000b84:	fa1f fe87 	uxth.w	lr, r7
 8000b88:	fb08 c116 	mls	r1, r8, r6, ip
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f10e 	mul.w	r1, r6, lr
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 8119 	bcs.w	8000dd4 <__udivmoddi4+0x288>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8116 	bls.w	8000dd4 <__udivmoddi4+0x288>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8105 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	f240 8102 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	443c      	add	r4, r7
 8000bd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	b902      	cbnz	r2, 8000bf6 <__udivmoddi4+0xaa>
 8000bf4:	deff      	udf	#255	; 0xff
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d150      	bne.n	8000ca0 <__udivmoddi4+0x154>
 8000bfe:	1bcb      	subs	r3, r1, r7
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	2601      	movs	r6, #1
 8000c0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb08 f30c 	mul.w	r3, r8, ip
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0xe2>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	f200 80e9 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x10c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x10a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80d9 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e7bf      	b.n	8000be2 <__udivmoddi4+0x96>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x12e>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 80b1 	beq.w	8000dce <__udivmoddi4+0x282>
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c72:	4630      	mov	r0, r6
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f683 	clz	r6, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x1cc>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0x140>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80b8 	bhi.w	8000dfc <__udivmoddi4+0x2b0>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	468c      	mov	ip, r1
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0a8      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9e:	e7a5      	b.n	8000bec <__udivmoddi4+0xa0>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca8:	4097      	lsls	r7, r2
 8000caa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb2:	40d9      	lsrs	r1, r3
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cbc:	fa1f f887 	uxth.w	r8, r7
 8000cc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f108 	mul.w	r1, r6, r8
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x19c>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cda:	f080 808d 	bcs.w	8000df8 <__udivmoddi4+0x2ac>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 808a 	bls.w	8000df8 <__udivmoddi4+0x2ac>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b281      	uxth	r1, r0
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb00 f308 	mul.w	r3, r0, r8
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x1c4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d06:	d273      	bcs.n	8000df0 <__udivmoddi4+0x2a4>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d971      	bls.n	8000df0 <__udivmoddi4+0x2a4>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4439      	add	r1, r7
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d16:	e778      	b.n	8000c0a <__udivmoddi4+0xbe>
 8000d18:	f1c6 0c20 	rsb	ip, r6, #32
 8000d1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d24:	431c      	orrs	r4, r3
 8000d26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d36:	431f      	orrs	r7, r3
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3e:	fa1f f884 	uxth.w	r8, r4
 8000d42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	fa02 f206 	lsl.w	r2, r2, r6
 8000d54:	fa00 f306 	lsl.w	r3, r0, r6
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x220>
 8000d5a:	1861      	adds	r1, r4, r1
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d248      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000d62:	458a      	cmp	sl, r1
 8000d64:	d946      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4421      	add	r1, r4
 8000d6c:	eba1 010a 	sub.w	r1, r1, sl
 8000d70:	b2bf      	uxth	r7, r7
 8000d72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45b8      	cmp	r8, r7
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x24a>
 8000d86:	19e7      	adds	r7, r4, r7
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d22e      	bcs.n	8000dec <__udivmoddi4+0x2a0>
 8000d8e:	45b8      	cmp	r8, r7
 8000d90:	d92c      	bls.n	8000dec <__udivmoddi4+0x2a0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4427      	add	r7, r4
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba7 0708 	sub.w	r7, r7, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454f      	cmp	r7, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	d31a      	bcc.n	8000de0 <__udivmoddi4+0x294>
 8000daa:	d017      	beq.n	8000ddc <__udivmoddi4+0x290>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x27a>
 8000dae:	ebb3 020e 	subs.w	r2, r3, lr
 8000db2:	eb67 0701 	sbc.w	r7, r7, r1
 8000db6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dba:	40f2      	lsrs	r2, r6
 8000dbc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc0:	40f7      	lsrs	r7, r6
 8000dc2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e70b      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fd      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000ddc:	4543      	cmp	r3, r8
 8000dde:	d2e5      	bcs.n	8000dac <__udivmoddi4+0x260>
 8000de0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de4:	eb69 0104 	sbc.w	r1, r9, r4
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7df      	b.n	8000dac <__udivmoddi4+0x260>
 8000dec:	4608      	mov	r0, r1
 8000dee:	e7d2      	b.n	8000d96 <__udivmoddi4+0x24a>
 8000df0:	4660      	mov	r0, ip
 8000df2:	e78d      	b.n	8000d10 <__udivmoddi4+0x1c4>
 8000df4:	4681      	mov	r9, r0
 8000df6:	e7b9      	b.n	8000d6c <__udivmoddi4+0x220>
 8000df8:	4666      	mov	r6, ip
 8000dfa:	e775      	b.n	8000ce8 <__udivmoddi4+0x19c>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e74a      	b.n	8000c96 <__udivmoddi4+0x14a>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	4439      	add	r1, r7
 8000e06:	e713      	b.n	8000c30 <__udivmoddi4+0xe4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443c      	add	r4, r7
 8000e0c:	e724      	b.n	8000c58 <__udivmoddi4+0x10c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <set_time>:
#include "usart.h"
#include "gpio.h"
#include "project_functions.h"


void set_time(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b096      	sub	sp, #88	; 0x58
 8000e18:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef new_time;
	RTC_DateTypeDef new_date;
	HAL_UART_AbortTransmit(&huart1);
 8000e1a:	48a5      	ldr	r0, [pc, #660]	; (80010b0 <set_time+0x29c>)
 8000e1c:	f006 fdfa 	bl	8007a14 <HAL_UART_AbortTransmit>
	HAL_RTC_GetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000e20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e24:	2200      	movs	r2, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	48a2      	ldr	r0, [pc, #648]	; (80010b4 <set_time+0x2a0>)
 8000e2a:	f005 f95b 	bl	80060e4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &new_date, RTC_FORMAT_BIN);
 8000e2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	489f      	ldr	r0, [pc, #636]	; (80010b4 <set_time+0x2a0>)
 8000e38:	f005 fa5e 	bl	80062f8 <HAL_RTC_GetDate>
	char msg[50] = {'\0'};
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	222e      	movs	r2, #46	; 0x2e
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 fb98 	bl	800857c <memset>

	TIM2->CNT = 4*new_time.Hours;
 8000e4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e50:	009a      	lsls	r2, r3, #2
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t current_count = TIM2->CNT;
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000e60:	e046      	b.n	8000ef0 <set_time+0xdc>
		current_count = TIM2->CNT;
 8000e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	64fb      	str	r3, [r7, #76]	; 0x4c
		if ((current_count <= 65536)&(current_count > 65000)){
 8000e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e70:	bf94      	ite	ls
 8000e72:	2301      	movls	r3, #1
 8000e74:	2300      	movhi	r3, #0
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7a:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	bf8c      	ite	hi
 8000e82:	2301      	movhi	r3, #1
 8000e84:	2300      	movls	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <set_time+0x8a>
	  		  current_count = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8000e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e9c:	e015      	b.n	8000eca <set_time+0xb6>
		}
		else if ((current_count > 95)&(current_count<200)){
 8000e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ea2:	bf8c      	ite	hi
 8000ea4:	2301      	movhi	r3, #1
 8000ea6:	2300      	movls	r3, #0
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eac:	2bc7      	cmp	r3, #199	; 0xc7
 8000eae:	bf94      	ite	ls
 8000eb0:	2301      	movls	r3, #1
 8000eb2:	2300      	movhi	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <set_time+0xb6>
			current_count = 95;
 8000ebe:	235f      	movs	r3, #95	; 0x5f
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 95;
 8000ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec6:	225f      	movs	r2, #95	; 0x5f
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", (current_count>>2), new_time.Minutes, new_time.Seconds);
 8000eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ecc:	089a      	lsrs	r2, r3, #2
 8000ece:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000ed8:	4638      	mov	r0, r7
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	460b      	mov	r3, r1
 8000ede:	4976      	ldr	r1, [pc, #472]	; (80010b8 <set_time+0x2a4>)
 8000ee0:	f007 fb54 	bl	800858c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8000ee4:	4639      	mov	r1, r7
 8000ee6:	2364      	movs	r3, #100	; 0x64
 8000ee8:	2232      	movs	r2, #50	; 0x32
 8000eea:	4871      	ldr	r0, [pc, #452]	; (80010b0 <set_time+0x29c>)
 8000eec:	f006 fcfc 	bl	80078e8 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	4872      	ldr	r0, [pc, #456]	; (80010bc <set_time+0x2a8>)
 8000ef4:	f002 f882 	bl	8002ffc <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1b1      	bne.n	8000e62 <set_time+0x4e>
	}
	new_time.Hours = current_count>>2;
 8000efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	HAL_Delay(500);
 8000f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0c:	f001 faf2 	bl	80024f4 <HAL_Delay>

	TIM2->CNT = 4*new_time.Minutes;
 8000f10:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000f14:	009a      	lsls	r2, r3, #2
 8000f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8000f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000f24:	e048      	b.n	8000fb8 <set_time+0x1a4>
		current_count = TIM2->CNT;
 8000f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if ((current_count <= 65536)&(current_count > 65000)){
 8000f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f34:	bf94      	ite	ls
 8000f36:	2301      	movls	r3, #1
 8000f38:	2300      	movhi	r3, #0
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f3e:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	bf8c      	ite	hi
 8000f46:	2301      	movhi	r3, #1
 8000f48:	2300      	movls	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <set_time+0x14e>
	  		  current_count = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8000f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000f60:	e017      	b.n	8000f92 <set_time+0x17e>
		}
		else if ((current_count > 239)&(current_count<400)){
 8000f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f64:	2bef      	cmp	r3, #239	; 0xef
 8000f66:	bf8c      	ite	hi
 8000f68:	2301      	movhi	r3, #1
 8000f6a:	2300      	movls	r3, #0
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f70:	f240 118f 	movw	r1, #399	; 0x18f
 8000f74:	428b      	cmp	r3, r1
 8000f76:	bf94      	ite	ls
 8000f78:	2301      	movls	r3, #1
 8000f7a:	2300      	movhi	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <set_time+0x17e>
			current_count = 239;
 8000f86:	23ef      	movs	r3, #239	; 0xef
 8000f88:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 239;
 8000f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8e:	22ef      	movs	r2, #239	; 0xef
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_time.Hours, (current_count>>2), new_time.Seconds);
 8000f92:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000f96:	4619      	mov	r1, r3
 8000f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	9200      	str	r2, [sp, #0]
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	4944      	ldr	r1, [pc, #272]	; (80010b8 <set_time+0x2a4>)
 8000fa8:	f007 faf0 	bl	800858c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8000fac:	4639      	mov	r1, r7
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	2232      	movs	r2, #50	; 0x32
 8000fb2:	483f      	ldr	r0, [pc, #252]	; (80010b0 <set_time+0x29c>)
 8000fb4:	f006 fc98 	bl	80078e8 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4840      	ldr	r0, [pc, #256]	; (80010bc <set_time+0x2a8>)
 8000fbc:	f002 f81e 	bl	8002ffc <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1af      	bne.n	8000f26 <set_time+0x112>
	}
	new_time.Minutes = current_count>>2;
 8000fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	HAL_Delay(500);
 8000fd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd4:	f001 fa8e 	bl	80024f4 <HAL_Delay>

	TIM2->CNT = 4*new_time.Seconds;
 8000fd8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000fdc:	009a      	lsls	r2, r3, #2
 8000fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8000fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000fec:	e049      	b.n	8001082 <set_time+0x26e>
		current_count = TIM2->CNT;
 8000fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
		if ((current_count <= 65536)&(current_count > 65000)){
 8000ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffc:	bf94      	ite	ls
 8000ffe:	2301      	movls	r3, #1
 8001000:	2300      	movhi	r3, #0
 8001002:	b2da      	uxtb	r2, r3
 8001004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001006:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 800100a:	428b      	cmp	r3, r1
 800100c:	bf8c      	ite	hi
 800100e:	2301      	movhi	r3, #1
 8001010:	2300      	movls	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4013      	ands	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <set_time+0x216>
	  		  current_count = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8001020:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
 8001028:	e017      	b.n	800105a <set_time+0x246>
		}
		else if ((current_count > 239)&(current_count<400)){
 800102a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800102c:	2bef      	cmp	r3, #239	; 0xef
 800102e:	bf8c      	ite	hi
 8001030:	2301      	movhi	r3, #1
 8001032:	2300      	movls	r3, #0
 8001034:	b2da      	uxtb	r2, r3
 8001036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001038:	f240 118f 	movw	r1, #399	; 0x18f
 800103c:	428b      	cmp	r3, r1
 800103e:	bf94      	ite	ls
 8001040:	2301      	movls	r3, #1
 8001042:	2300      	movhi	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4013      	ands	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <set_time+0x246>
			current_count = 239;
 800104e:	23ef      	movs	r3, #239	; 0xef
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 239;
 8001052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001056:	22ef      	movs	r2, #239	; 0xef
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_time.Hours, new_time.Minutes, (current_count>>2));
 800105a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800105e:	461a      	mov	r2, r3
 8001060:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001064:	4619      	mov	r1, r3
 8001066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	4638      	mov	r0, r7
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	460b      	mov	r3, r1
 8001070:	4911      	ldr	r1, [pc, #68]	; (80010b8 <set_time+0x2a4>)
 8001072:	f007 fa8b 	bl	800858c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8001076:	4639      	mov	r1, r7
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	2232      	movs	r2, #50	; 0x32
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <set_time+0x29c>)
 800107e:	f006 fc33 	bl	80078e8 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001082:	2110      	movs	r1, #16
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <set_time+0x2a8>)
 8001086:	f001 ffb9 	bl	8002ffc <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1ae      	bne.n	8000fee <set_time+0x1da>
	}
	new_time.Seconds = current_count>>2;
 8001090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 800109a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <set_time+0x2a0>)
 80010a4:	f004 ff5a 	bl	8005f5c <HAL_RTC_SetTime>

	return;
 80010a8:	bf00      	nop
}
 80010aa:	3750      	adds	r7, #80	; 0x50
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000021c 	.word	0x2000021c
 80010b4:	200000b4 	.word	0x200000b4
 80010b8:	08009e70 	.word	0x08009e70
 80010bc:	48000400 	.word	0x48000400

080010c0 <set_alarm>:

void set_alarm(void){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09a      	sub	sp, #104	; 0x68
 80010c4:	af02      	add	r7, sp, #8
	RTC_AlarmTypeDef new_alarm;
	HAL_UART_AbortTransmit(&huart1);
 80010c6:	48a2      	ldr	r0, [pc, #648]	; (8001350 <set_alarm+0x290>)
 80010c8:	f006 fca4 	bl	8007a14 <HAL_UART_AbortTransmit>
	HAL_RTC_GetAlarm(&hrtc, &new_alarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 80010cc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80010d0:	2300      	movs	r3, #0
 80010d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d6:	489f      	ldr	r0, [pc, #636]	; (8001354 <set_alarm+0x294>)
 80010d8:	f005 fb2e 	bl	8006738 <HAL_RTC_GetAlarm>

	char msg[50] = {'\0'};
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	222e      	movs	r2, #46	; 0x2e
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fa48 	bl	800857c <memset>

	TIM2->CNT = 4*new_alarm.AlarmTime.Hours;
 80010ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010f0:	009a      	lsls	r2, r3, #2
 80010f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t current_count = TIM2->CNT;
 80010f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001100:	e046      	b.n	8001190 <set_alarm+0xd0>
		current_count = TIM2->CNT;
 8001102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	65fb      	str	r3, [r7, #92]	; 0x5c
		if ((current_count <= 65536)&(current_count > 65000)){
 800110a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	bf94      	ite	ls
 8001112:	2301      	movls	r3, #1
 8001114:	2300      	movhi	r3, #0
 8001116:	b2da      	uxtb	r2, r3
 8001118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800111a:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 800111e:	428b      	cmp	r3, r1
 8001120:	bf8c      	ite	hi
 8001122:	2301      	movhi	r3, #1
 8001124:	2300      	movls	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4013      	ands	r3, r2
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <set_alarm+0x7e>
	  		  current_count = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 8001134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
 800113c:	e015      	b.n	800116a <set_alarm+0xaa>
		}
		else if ((current_count > 95)&(current_count<200)){
 800113e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001140:	2b5f      	cmp	r3, #95	; 0x5f
 8001142:	bf8c      	ite	hi
 8001144:	2301      	movhi	r3, #1
 8001146:	2300      	movls	r3, #0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114c:	2bc7      	cmp	r3, #199	; 0xc7
 800114e:	bf94      	ite	ls
 8001150:	2301      	movls	r3, #1
 8001152:	2300      	movhi	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4013      	ands	r3, r2
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <set_alarm+0xaa>
			current_count = 95;
 800115e:	235f      	movs	r3, #95	; 0x5f
 8001160:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 95;
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	225f      	movs	r2, #95	; 0x5f
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", (current_count>>2), new_alarm.AlarmTime.Minutes, new_alarm.AlarmTime.Seconds);
 800116a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800116c:	089a      	lsrs	r2, r3, #2
 800116e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001172:	4619      	mov	r1, r3
 8001174:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001178:	4638      	mov	r0, r7
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	460b      	mov	r3, r1
 800117e:	4976      	ldr	r1, [pc, #472]	; (8001358 <set_alarm+0x298>)
 8001180:	f007 fa04 	bl	800858c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8001184:	4639      	mov	r1, r7
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2232      	movs	r2, #50	; 0x32
 800118a:	4871      	ldr	r0, [pc, #452]	; (8001350 <set_alarm+0x290>)
 800118c:	f006 fbac 	bl	80078e8 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001190:	2110      	movs	r1, #16
 8001192:	4872      	ldr	r0, [pc, #456]	; (800135c <set_alarm+0x29c>)
 8001194:	f001 ff32 	bl	8002ffc <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1b1      	bne.n	8001102 <set_alarm+0x42>
	}
	new_alarm.AlarmTime.Hours = current_count>>2;
 800119e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	HAL_Delay(500);
 80011a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ac:	f001 f9a2 	bl	80024f4 <HAL_Delay>

	TIM2->CNT = 4*new_alarm.AlarmTime.Minutes;
 80011b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011b4:	009a      	lsls	r2, r3, #2
 80011b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80011c4:	e048      	b.n	8001258 <set_alarm+0x198>
		current_count = TIM2->CNT;
 80011c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	65fb      	str	r3, [r7, #92]	; 0x5c
		if ((current_count <= 65536)&(current_count > 65000)){
 80011ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	bf94      	ite	ls
 80011d6:	2301      	movls	r3, #1
 80011d8:	2300      	movhi	r3, #0
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011de:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 80011e2:	428b      	cmp	r3, r1
 80011e4:	bf8c      	ite	hi
 80011e6:	2301      	movhi	r3, #1
 80011e8:	2300      	movls	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <set_alarm+0x142>
	  		  current_count = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 80011f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001200:	e017      	b.n	8001232 <set_alarm+0x172>
		}
		else if ((current_count > 239)&(current_count<400)){
 8001202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001204:	2bef      	cmp	r3, #239	; 0xef
 8001206:	bf8c      	ite	hi
 8001208:	2301      	movhi	r3, #1
 800120a:	2300      	movls	r3, #0
 800120c:	b2da      	uxtb	r2, r3
 800120e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001210:	f240 118f 	movw	r1, #399	; 0x18f
 8001214:	428b      	cmp	r3, r1
 8001216:	bf94      	ite	ls
 8001218:	2301      	movls	r3, #1
 800121a:	2300      	movhi	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4013      	ands	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <set_alarm+0x172>
			current_count = 239;
 8001226:	23ef      	movs	r3, #239	; 0xef
 8001228:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 239;
 800122a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122e:	22ef      	movs	r2, #239	; 0xef
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_alarm.AlarmTime.Hours, (current_count>>2), new_alarm.AlarmTime.Seconds);
 8001232:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001236:	4619      	mov	r1, r3
 8001238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001240:	4638      	mov	r0, r7
 8001242:	9200      	str	r2, [sp, #0]
 8001244:	460a      	mov	r2, r1
 8001246:	4944      	ldr	r1, [pc, #272]	; (8001358 <set_alarm+0x298>)
 8001248:	f007 f9a0 	bl	800858c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 800124c:	4639      	mov	r1, r7
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	2232      	movs	r2, #50	; 0x32
 8001252:	483f      	ldr	r0, [pc, #252]	; (8001350 <set_alarm+0x290>)
 8001254:	f006 fb48 	bl	80078e8 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001258:	2110      	movs	r1, #16
 800125a:	4840      	ldr	r0, [pc, #256]	; (800135c <set_alarm+0x29c>)
 800125c:	f001 fece 	bl	8002ffc <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1af      	bne.n	80011c6 <set_alarm+0x106>
	}
	new_alarm.AlarmTime.Minutes = current_count>>2;
 8001266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	HAL_Delay(500);
 8001270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001274:	f001 f93e 	bl	80024f4 <HAL_Delay>

	TIM2->CNT = 4*new_alarm.AlarmTime.Seconds;
 8001278:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800127c:	009a      	lsls	r2, r3, #2
 800127e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8001284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 800128c:	e049      	b.n	8001322 <set_alarm+0x262>
		current_count = TIM2->CNT;
 800128e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	65fb      	str	r3, [r7, #92]	; 0x5c
		if ((current_count <= 65536)&(current_count > 65000)){
 8001296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	bf94      	ite	ls
 800129e:	2301      	movls	r3, #1
 80012a0:	2300      	movhi	r3, #0
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a6:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 80012aa:	428b      	cmp	r3, r1
 80012ac:	bf8c      	ite	hi
 80012ae:	2301      	movhi	r3, #1
 80012b0:	2300      	movls	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4013      	ands	r3, r2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <set_alarm+0x20a>
	  		  current_count = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 80012c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
 80012c8:	e017      	b.n	80012fa <set_alarm+0x23a>
		}
		else if ((current_count > 239)&(current_count<400)){
 80012ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012cc:	2bef      	cmp	r3, #239	; 0xef
 80012ce:	bf8c      	ite	hi
 80012d0:	2301      	movhi	r3, #1
 80012d2:	2300      	movls	r3, #0
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d8:	f240 118f 	movw	r1, #399	; 0x18f
 80012dc:	428b      	cmp	r3, r1
 80012de:	bf94      	ite	ls
 80012e0:	2301      	movls	r3, #1
 80012e2:	2300      	movhi	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4013      	ands	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <set_alarm+0x23a>
			current_count = 239;
 80012ee:	23ef      	movs	r3, #239	; 0xef
 80012f0:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 239;
 80012f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f6:	22ef      	movs	r2, #239	; 0xef
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_alarm.AlarmTime.Hours, new_alarm.AlarmTime.Minutes, (current_count>>2));
 80012fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012fe:	461a      	mov	r2, r3
 8001300:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001304:	4619      	mov	r1, r3
 8001306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	4638      	mov	r0, r7
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	460b      	mov	r3, r1
 8001310:	4911      	ldr	r1, [pc, #68]	; (8001358 <set_alarm+0x298>)
 8001312:	f007 f93b 	bl	800858c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8001316:	4639      	mov	r1, r7
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <set_alarm+0x290>)
 800131e:	f006 fae3 	bl	80078e8 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001322:	2110      	movs	r1, #16
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <set_alarm+0x29c>)
 8001326:	f001 fe69 	bl	8002ffc <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ae      	bne.n	800128e <set_alarm+0x1ce>
	}
	new_alarm.AlarmTime.Seconds = current_count>>2;
 8001330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	HAL_RTC_SetAlarm_IT(&hrtc, &new_alarm, RTC_FORMAT_BIN);
 800133a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <set_alarm+0x294>)
 8001344:	f005 f826 	bl	8006394 <HAL_RTC_SetAlarm_IT>


	return;
 8001348:	bf00      	nop
}
 800134a:	3760      	adds	r7, #96	; 0x60
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000021c 	.word	0x2000021c
 8001354:	200000b4 	.word	0x200000b4
 8001358:	08009e70 	.word	0x08009e70
 800135c:	48000400 	.word	0x48000400

08001360 <snooze_alarm>:


void snooze_alarm(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef new_alarm;
	HAL_UART_AbortTransmit(&huart1);
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <snooze_alarm+0x40>)
 8001368:	f006 fb54 	bl	8007a14 <HAL_UART_AbortTransmit>
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800136c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <snooze_alarm+0x44>)
 8001372:	f005 f94d 	bl	8006610 <HAL_RTC_DeactivateAlarm>
	HAL_RTC_GetAlarm(&hrtc, &new_alarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 8001376:	4639      	mov	r1, r7
 8001378:	2300      	movs	r3, #0
 800137a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <snooze_alarm+0x44>)
 8001380:	f005 f9da 	bl	8006738 <HAL_RTC_GetAlarm>

	new_alarm.AlarmTime.Minutes = new_alarm.AlarmTime.Minutes + 9;
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	3309      	adds	r3, #9
 8001388:	b2db      	uxtb	r3, r3
 800138a:	707b      	strb	r3, [r7, #1]
	HAL_RTC_SetAlarm_IT(&hrtc, &new_alarm, RTC_FORMAT_BIN);
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <snooze_alarm+0x44>)
 8001394:	f004 fffe 	bl	8006394 <HAL_RTC_SetAlarm_IT>
	return;
 8001398:	bf00      	nop
}
 800139a:	3728      	adds	r7, #40	; 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000021c 	.word	0x2000021c
 80013a4:	200000b4 	.word	0x200000b4

080013a8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013de:	2004      	movs	r0, #4
 80013e0:	f7ff ffe2 	bl	80013a8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff ffdf 	bl	80013a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200b      	movs	r0, #11
 80013f0:	f001 f97f 	bl	80026f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013f4:	200b      	movs	r0, #11
 80013f6:	f001 f996 	bl	8002726 <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800140c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4313      	orrs	r3, r2
 8001414:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001444:	2004      	movs	r0, #4
 8001446:	f7ff ffda 	bl	80013fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2002      	movs	r0, #2
 800144c:	f7ff ffd7 	bl	80013fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff ffd4 	bl	80013fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	2008      	movs	r0, #8
 8001458:	f7ff ffd1 	bl	80013fe <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2123      	movs	r1, #35	; 0x23
 8001460:	482b      	ldr	r0, [pc, #172]	; (8001510 <MX_GPIO_Init+0xe0>)
 8001462:	f001 fde3 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW1_Pin;
 8001466:	2314      	movs	r3, #20
 8001468:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800146e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001470:	2301      	movs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4826      	ldr	r0, [pc, #152]	; (8001514 <MX_GPIO_Init+0xe4>)
 800147a:	f001 fc4f 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800147e:	2323      	movs	r3, #35	; 0x23
 8001480:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	481f      	ldr	r0, [pc, #124]	; (8001510 <MX_GPIO_Init+0xe0>)
 8001494:	f001 fc42 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8001498:	2303      	movs	r3, #3
 800149a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	481b      	ldr	r0, [pc, #108]	; (8001518 <MX_GPIO_Init+0xe8>)
 80014ac:	f001 fc36 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = rotary_but_Pin;
 80014b0:	2310      	movs	r3, #16
 80014b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(rotary_but_GPIO_Port, &GPIO_InitStruct);
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4813      	ldr	r0, [pc, #76]	; (8001510 <MX_GPIO_Init+0xe0>)
 80014c2:	f001 fc2b 	bl	8002d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2006      	movs	r0, #6
 80014cc:	f001 f911 	bl	80026f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014d0:	2006      	movs	r0, #6
 80014d2:	f001 f928 	bl	8002726 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2007      	movs	r0, #7
 80014dc:	f001 f909 	bl	80026f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014e0:	2007      	movs	r0, #7
 80014e2:	f001 f920 	bl	8002726 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2008      	movs	r0, #8
 80014ec:	f001 f901 	bl	80026f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014f0:	2008      	movs	r0, #8
 80014f2:	f001 f918 	bl	8002726 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	200a      	movs	r0, #10
 80014fc:	f001 f8f9 	bl	80026f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001500:	200a      	movs	r0, #10
 8001502:	f001 f910 	bl	8002726 <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	48000400 	.word	0x48000400
 8001514:	48000800 	.word	0x48000800
 8001518:	48000c00 	.word	0x48000c00

0800151c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152c:	f023 0218 	bic.w	r2, r3, #24
 8001530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b0b5      	sub	sp, #212	; 0xd4
 800154c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 ff4b 	bl	80023e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f989 	bl	8001868 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001556:	f000 f9ff 	bl	8001958 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155a:	f7ff ff69 	bl	8001430 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800155e:	f000 fdef 	bl	8002140 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001562:	f000 feb1 	bl	80022c8 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8001566:	f000 fa59 	bl	8001a1c <MX_RTC_Init>
  MX_DMA_Init();
 800156a:	f7ff ff36 	bl	80013da <MX_DMA_Init>
  MX_SAI1_Init();
 800156e:	f000 fb3d 	bl	8001bec <MX_SAI1_Init>
  MX_TIM2_Init();
 8001572:	f000 fd33 	bl	8001fdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_MspInit(&hrtc);
 8001576:	48ae      	ldr	r0, [pc, #696]	; (8001830 <main+0x2e8>)
 8001578:	f000 faea 	bl	8001b50 <HAL_RTC_MspInit>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800157c:	213c      	movs	r1, #60	; 0x3c
 800157e:	48ad      	ldr	r0, [pc, #692]	; (8001834 <main+0x2ec>)
 8001580:	f005 ffca 	bl	8007518 <HAL_TIM_Encoder_Start>
  char time_msg[50] = {'\0'};
 8001584:	2300      	movs	r3, #0
 8001586:	653b      	str	r3, [r7, #80]	; 0x50
 8001588:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800158c:	222e      	movs	r2, #46	; 0x2e
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fff3 	bl	800857c <memset>
  uint8_t esc_message[50] = {'\0'};
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	222e      	movs	r2, #46	; 0x2e
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f006 ffea 	bl	800857c <memset>
  RTC_TimeTypeDef Time;
  RTC_DateTypeDef Date;

  double dur = .5;
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	4ba2      	ldr	r3, [pc, #648]	; (8001838 <main+0x2f0>)
 80015ae:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  double fs = 16000.0;
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4ba1      	ldr	r3, [pc, #644]	; (800183c <main+0x2f4>)
 80015b8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  double f0 = 261.63; // Middle C
 80015bc:	a396      	add	r3, pc, #600	; (adr r3, 8001818 <main+0x2d0>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  double delta_t = 1.0 / fs;
 80015c6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	499c      	ldr	r1, [pc, #624]	; (8001840 <main+0x2f8>)
 80015d0:	f7ff f90c 	bl	80007ec <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  double volume = 12000.0;
 80015dc:	a390      	add	r3, pc, #576	; (adr r3, 8001820 <main+0x2d8>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  int numberOfSamples = 2.0 * dur * fs; // 2 channels * duration (sec) * samples per sec
 80015e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	f7fe fe1d 	bl	800022c <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80015fe:	f7fe ffcb 	bl	8000598 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff fa5f 	bl	8000acc <__aeabi_d2iz>
 800160e:	4603      	mov	r3, r0
 8001610:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int16_t signal[numberOfSamples];
 8001614:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8001618:	1e63      	subs	r3, r4, #1
 800161a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800161e:	4623      	mov	r3, r4
 8001620:	4618      	mov	r0, r3
 8001622:	f04f 0100 	mov.w	r1, #0
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	010b      	lsls	r3, r1, #4
 8001630:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001634:	0102      	lsls	r2, r0, #4
 8001636:	4623      	mov	r3, r4
 8001638:	4618      	mov	r0, r3
 800163a:	f04f 0100 	mov.w	r1, #0
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	010b      	lsls	r3, r1, #4
 8001648:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800164c:	0102      	lsls	r2, r0, #4
 800164e:	4623      	mov	r3, r4
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	3307      	adds	r3, #7
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	ebad 0d03 	sub.w	sp, sp, r3
 800165c:	ab02      	add	r3, sp, #8
 800165e:	3301      	adds	r3, #1
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  // Single tone
  double t = 0;
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  int count = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  while (count < numberOfSamples) {
 800167a:	e048      	b.n	800170e <main+0x1c6>
	  signal[count] = volume * sin(2.0 * PI * f0 * t); // left
 800167c:	a36a      	add	r3, pc, #424	; (adr r3, 8001828 <main+0x2e0>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001686:	f7fe ff87 	bl	8000598 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001696:	f7fe ff7f 	bl	8000598 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ec43 2b17 	vmov	d7, r2, r3
 80016a2:	eeb0 0a47 	vmov.f32	s0, s14
 80016a6:	eef0 0a67 	vmov.f32	s1, s15
 80016aa:	f007 fb9d 	bl	8008de8 <sin>
 80016ae:	ec51 0b10 	vmov	r0, r1, d0
 80016b2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa03 	bl	8000acc <__aeabi_d2iz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b219      	sxth	r1, r3
 80016ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80016d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  signal[count + 1] = signal[count]; // right
 80016d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016e0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80016e4:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 80016e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  count += 2;
 80016f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016f4:	3302      	adds	r3, #2
 80016f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  t += delta_t;
 80016fa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80016fe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001702:	f7fe fd93 	bl	800022c <__adddf3>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  while (count < numberOfSamples) {
 800170e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001716:	429a      	cmp	r2, r3
 8001718:	dbb0      	blt.n	800167c <main+0x134>

    /* USER CODE BEGIN 3 */



	  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	4843      	ldr	r0, [pc, #268]	; (8001830 <main+0x2e8>)
 8001724:	f004 fcde 	bl	80060e4 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	4840      	ldr	r0, [pc, #256]	; (8001830 <main+0x2e8>)
 8001730:	f004 fde2 	bl	80062f8 <HAL_RTC_GetDate>
	  sprintf(time_msg, "\033[2K%02d:%02d:%02d\r", Time.Hours, Time.Minutes, Time.Seconds);
 8001734:	7a3b      	ldrb	r3, [r7, #8]
 8001736:	461a      	mov	r2, r3
 8001738:	7a7b      	ldrb	r3, [r7, #9]
 800173a:	4619      	mov	r1, r3
 800173c:	7abb      	ldrb	r3, [r7, #10]
 800173e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	460b      	mov	r3, r1
 8001746:	493f      	ldr	r1, [pc, #252]	; (8001844 <main+0x2fc>)
 8001748:	f006 ff20 	bl	800858c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)time_msg, sizeof(time_msg), 100);
 800174c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001750:	2364      	movs	r3, #100	; 0x64
 8001752:	2232      	movs	r2, #50	; 0x32
 8001754:	483c      	ldr	r0, [pc, #240]	; (8001848 <main+0x300>)
 8001756:	f006 f8c7 	bl	80078e8 <HAL_UART_Transmit>
	  //sprintf(esc_message, "\033[2K");
	  //HAL_UART_Transmit(&huart1, esc_message, sizeof(esc_message), 100);

	  if (set_time_flag){
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <main+0x304>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <main+0x224>
	  	  set_time();
 8001762:	f7ff fb57 	bl	8000e14 <set_time>
	  	  set_time_flag = 0;
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <main+0x304>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
	  }
	  if (set_alarm_flag){
 800176c:	4b38      	ldr	r3, [pc, #224]	; (8001850 <main+0x308>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <main+0x236>
		  set_alarm();
 8001774:	f7ff fca4 	bl	80010c0 <set_alarm>
		  set_alarm_flag = 0;
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <main+0x308>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
	  }
	  if (alarm_triggered_flag){
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <main+0x30c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d018      	beq.n	80017b8 <main+0x270>
		  HAL_SAI_Transmit_DMA(&hsai_BlockA1, signal, numberOfSamples);
 8001786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800178a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800178e:	b292      	uxth	r2, r2
 8001790:	4619      	mov	r1, r3
 8001792:	4831      	ldr	r0, [pc, #196]	; (8001858 <main+0x310>)
 8001794:	f005 fb3a 	bl	8006e0c <HAL_SAI_Transmit_DMA>
		  if(Time.Seconds & 1)
 8001798:	7abb      	ldrb	r3, [r7, #10]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <main+0x266>
			  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2120      	movs	r1, #32
 80017a6:	482d      	ldr	r0, [pc, #180]	; (800185c <main+0x314>)
 80017a8:	f001 fc40 	bl	800302c <HAL_GPIO_WritePin>
 80017ac:	e004      	b.n	80017b8 <main+0x270>
		  else
			  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2120      	movs	r1, #32
 80017b2:	482a      	ldr	r0, [pc, #168]	; (800185c <main+0x314>)
 80017b4:	f001 fc3a 	bl	800302c <HAL_GPIO_WritePin>
	  }
	  if (alarm_snooze_flag & alarm_triggered_flag){
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <main+0x318>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <main+0x30c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d011      	beq.n	80017ea <main+0x2a2>
		  snooze_alarm();
 80017c6:	f7ff fdcb 	bl	8001360 <snooze_alarm>
		  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2120      	movs	r1, #32
 80017ce:	4823      	ldr	r0, [pc, #140]	; (800185c <main+0x314>)
 80017d0:	f001 fc2c 	bl	800302c <HAL_GPIO_WritePin>
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80017d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d8:	4815      	ldr	r0, [pc, #84]	; (8001830 <main+0x2e8>)
 80017da:	f004 ff19 	bl	8006610 <HAL_RTC_DeactivateAlarm>
		  alarm_triggered_flag = 0;
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <main+0x30c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
		  alarm_snooze_flag = 0;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <main+0x318>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
	  }
	  if (alarm_off_flag){
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <main+0x31c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d093      	beq.n	800171a <main+0x1d2>
		  alarm_off_flag = 0;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <main+0x31c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
		  alarm_triggered_flag = 0;
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <main+0x30c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80017fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <main+0x2e8>)
 8001804:	f004 ff04 	bl	8006610 <HAL_RTC_DeactivateAlarm>
		  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2120      	movs	r1, #32
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <main+0x314>)
 800180e:	f001 fc0d 	bl	800302c <HAL_GPIO_WritePin>
  {
 8001812:	e782      	b.n	800171a <main+0x1d2>
 8001814:	f3af 8000 	nop.w
 8001818:	7ae147ae 	.word	0x7ae147ae
 800181c:	40705a14 	.word	0x40705a14
 8001820:	00000000 	.word	0x00000000
 8001824:	40c77000 	.word	0x40c77000
 8001828:	53c8d4f1 	.word	0x53c8d4f1
 800182c:	401921fb 	.word	0x401921fb
 8001830:	200000b4 	.word	0x200000b4
 8001834:	200001d0 	.word	0x200001d0
 8001838:	3fe00000 	.word	0x3fe00000
 800183c:	40cf4000 	.word	0x40cf4000
 8001840:	3ff00000 	.word	0x3ff00000
 8001844:	08009e80 	.word	0x08009e80
 8001848:	2000021c 	.word	0x2000021c
 800184c:	200000b0 	.word	0x200000b0
 8001850:	200000a8 	.word	0x200000a8
 8001854:	200000a0 	.word	0x200000a0
 8001858:	20000138 	.word	0x20000138
 800185c:	48000400 	.word	0x48000400
 8001860:	200000ac 	.word	0x200000ac
 8001864:	200000a4 	.word	0x200000a4

08001868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b09a      	sub	sp, #104	; 0x68
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	2248      	movs	r2, #72	; 0x48
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f006 fe80 	bl	800857c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189c:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f023 0303 	bic.w	r3, r3, #3
 80018a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018b2:	f001 fd05 	bl	80032c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fe30 	bl	800151c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <SystemClock_Config+0xec>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <SystemClock_Config+0xec>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <SystemClock_Config+0xec>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80018d8:	232f      	movs	r3, #47	; 0x2f
 80018da:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018e2:	2301      	movs	r3, #1
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018ec:	2301      	movs	r3, #1
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f0:	2340      	movs	r3, #64	; 0x40
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018f8:	2360      	movs	r3, #96	; 0x60
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018fc:	2305      	movs	r3, #5
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	4618      	mov	r0, r3
 800190a:	f002 f86d 	bl	80039e8 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001914:	f000 f852 	bl	80019bc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001918:	236f      	movs	r3, #111	; 0x6f
 800191a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800191c:	2302      	movs	r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2101      	movs	r1, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fbe1 	bl	8004100 <HAL_RCC_ClockConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001944:	f000 f83a 	bl	80019bc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001948:	f003 ffa5 	bl	8005896 <HAL_RCCEx_EnableMSIPLLMode>
}
 800194c:	bf00      	nop
 800194e:	3768      	adds	r7, #104	; 0x68
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58000400 	.word	0x58000400

08001958 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b094      	sub	sp, #80	; 0x50
 800195c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800195e:	463b      	mov	r3, r7
 8001960:	2250      	movs	r2, #80	; 0x50
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f006 fe09 	bl	800857c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_SAI1
 800196a:	f44f 5305 	mov.w	r3, #8512	; 0x2140
 800196e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001970:	2318      	movs	r3, #24
 8001972:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800197a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800197e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001980:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001984:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <PeriphCommonClock_Config+0x60>)
 8001988:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800198e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001994:	2300      	movs	r3, #0
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001998:	2300      	movs	r3, #0
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 f9ec 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80019aa:	f000 f807 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019ae:	bf00      	nop
 80019b0:	3750      	adds	r7, #80	; 0x50
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	01010000 	.word	0x01010000

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <Error_Handler+0x8>

080019c6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b090      	sub	sp, #64	; 0x40
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001a36:	463b      	mov	r3, r7
 8001a38:	2228      	movs	r2, #40	; 0x28
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f006 fd9d 	bl	800857c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a44:	4a41      	ldr	r2, [pc, #260]	; (8001b4c <MX_RTC_Init+0x130>)
 8001a46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a48:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a50:	227f      	movs	r2, #127	; 0x7f
 8001a52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a54:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a56:	22ff      	movs	r2, #255	; 0xff
 8001a58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a72:	4835      	ldr	r0, [pc, #212]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001a74:	f004 f9d4 	bl	8005e20 <HAL_RTC_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a7e:	f7ff ff9d 	bl	80019bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.SubSeconds = 0x0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4827      	ldr	r0, [pc, #156]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001aaa:	f004 fa57 	bl	8005f5c <HAL_RTC_SetTime>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8001ab4:	f7ff ff82 	bl	80019bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481b      	ldr	r0, [pc, #108]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001ada:	f004 fb5f 	bl	800619c <HAL_RTC_SetDate>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8001ae4:	f7ff ff6a 	bl	80019bc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001b00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b04:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <MX_RTC_Init+0x12c>)
 8001b22:	f004 fc37 	bl	8006394 <HAL_RTC_SetAlarm_IT>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001b2c:	f7ff ff46 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	2029      	movs	r0, #41	; 0x29
 8001b36:	f000 fddc 	bl	80026f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b3a:	2029      	movs	r0, #41	; 0x29
 8001b3c:	f000 fdf3 	bl	8002726 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3740      	adds	r7, #64	; 0x40
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200000b4 	.word	0x200000b4
 8001b4c:	40002800 	.word	0x40002800

08001b50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b096      	sub	sp, #88	; 0x58
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	2250      	movs	r2, #80	; 0x50
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f006 fd0b 	bl	800857c <memset>
  if(rtcHandle->Instance==RTC)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_RTC_MspInit+0x64>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d11d      	bne.n	8001bac <HAL_RTC_MspInit+0x5c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b74:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 f8fb 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b8c:	f7ff ff16 	bl	80019bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b90:	f7ff ff19 	bl	80019c6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b98:	f7ff ff26 	bl	80019e8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2029      	movs	r0, #41	; 0x29
 8001ba2:	f000 fda6 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ba6:	2029      	movs	r0, #41	; 0x29
 8001ba8:	f000 fdbd 	bl	8002726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001bac:	bf00      	nop
 8001bae:	3758      	adds	r7, #88	; 0x58
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40002800 	.word	0x40002800

08001bb8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001bf2:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <MX_SAI1_Init+0x6c>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c1c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001c20:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_SAI1_Init+0x68>)
 8001c42:	f004 ff1f 	bl	8006a84 <HAL_SAI_InitProtocol>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8001c4c:	f7ff feb6 	bl	80019bc <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000138 	.word	0x20000138
 8001c58:	40015404 	.word	0x40015404

08001c5c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a3c      	ldr	r2, [pc, #240]	; (8001d5c <HAL_SAI_MspInit+0x100>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d172      	bne.n	8001d54 <HAL_SAI_MspInit+0xf8>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <HAL_SAI_MspInit+0x104>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d103      	bne.n	8001c7e <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001c76:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001c7a:	f7ff ff9d 	bl	8001bb8 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_SAI_MspInit+0x104>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a36      	ldr	r2, [pc, #216]	; (8001d60 <HAL_SAI_MspInit+0x104>)
 8001c86:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PB9     ------> SAI1_FS_A
    PC3     ------> SAI1_SD_A
    PA8     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c9a:	230d      	movs	r3, #13
 8001c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	482f      	ldr	r0, [pc, #188]	; (8001d64 <HAL_SAI_MspInit+0x108>)
 8001ca6:	f001 f839 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001caa:	2308      	movs	r3, #8
 8001cac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001cba:	230d      	movs	r3, #13
 8001cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4828      	ldr	r0, [pc, #160]	; (8001d68 <HAL_SAI_MspInit+0x10c>)
 8001cc6:	f001 f829 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001cdc:	230d      	movs	r3, #13
 8001cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f001 f817 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel1;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_SAI_MspInit+0x114>)
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001cf6:	2212      	movs	r2, #18
 8001cf8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d12:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d1a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001d28:	4810      	ldr	r0, [pc, #64]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d2a:	f000 fd17 	bl	800275c <HAL_DMA_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 8001d34:	f7ff fe42 	bl	80019bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001d40:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001d4e:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_SAI_MspInit+0x110>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40015404 	.word	0x40015404
 8001d60:	20000090 	.word	0x20000090
 8001d64:	48000400 	.word	0x48000400
 8001d68:	48000800 	.word	0x48000800
 8001d6c:	200000d8 	.word	0x200000d8
 8001d70:	40020008 	.word	0x40020008

08001d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <NMI_Handler+0x4>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <HardFault_Handler+0x4>

08001d8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <MemManage_Handler+0x4>

08001d94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <BusFault_Handler+0x4>

08001d9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <UsageFault_Handler+0x4>

08001da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dce:	f000 fb65 	bl	800249c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	set_alarm_flag = 1;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <EXTI0_IRQHandler+0x14>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f001 f93a 	bl	800305c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200000a8 	.word	0x200000a8

08001df0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	alarm_snooze_flag = 1;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <EXTI1_IRQHandler+0x14>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f001 f92e 	bl	800305c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200000ac 	.word	0x200000ac

08001e08 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	alarm_off_flag = 1;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <EXTI2_IRQHandler+0x14>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 8001e12:	2004      	movs	r0, #4
 8001e14:	f001 f922 	bl	800305c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200000a4 	.word	0x200000a4

08001e20 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	set_time_flag = 1;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <EXTI4_IRQHandler+0x14>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8001e2a:	2010      	movs	r0, #16
 8001e2c:	f001 f916 	bl	800305c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200000b0 	.word	0x200000b0

08001e38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <DMA1_Channel1_IRQHandler+0x10>)
 8001e3e:	f000 fe0f 	bl	8002a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200000d8 	.word	0x200000d8

08001e4c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	alarm_triggered_flag = 1;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <RTC_Alarm_IRQHandler+0x14>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e56:	4803      	ldr	r0, [pc, #12]	; (8001e64 <RTC_Alarm_IRQHandler+0x18>)
 8001e58:	f004 fd2e 	bl	80068b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200000a0 	.word	0x200000a0
 8001e64:	200000b4 	.word	0x200000b4

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f006 fb46 	bl	8008528 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20030000 	.word	0x20030000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	20000094 	.word	0x20000094
 8001ed0:	200005b8 	.word	0x200005b8

08001ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <SystemInit+0x98>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <SystemInit+0x98>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f00:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <SystemInit+0x9c>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1e:	f023 0305 	bic.w	r3, r3, #5
 8001f22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <SystemInit+0xa0>)
 8001f40:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <SystemInit+0xa0>)
 8001f48:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00
 8001f70:	faf6fefb 	.word	0xfaf6fefb
 8001f74:	22041000 	.word	0x22041000

08001f78 <LL_AHB2_GRP1_EnableClock>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_APB1_GRP1_EnableClock>:
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f006 fac6 	bl	800857c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <MX_TIM2_Init+0xa4>)
 8001ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002000:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_TIM2_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_TIM2_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <MX_TIM2_Init+0xa4>)
 8002010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002014:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_TIM2_Init+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_TIM2_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002022:	2303      	movs	r3, #3
 8002024:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800202a:	2301      	movs	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002032:	230a      	movs	r3, #10
 8002034:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800203a:	2301      	movs	r3, #1
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <MX_TIM2_Init+0xa4>)
 800204e:	f005 f9bd 	bl	80073cc <HAL_TIM_Encoder_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002058:	f7ff fcb0 	bl	80019bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002064:	463b      	mov	r3, r7
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_TIM2_Init+0xa4>)
 800206a:	f005 fb6d 	bl	8007748 <HAL_TIMEx_MasterConfigSynchronization>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002074:	f7ff fca2 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	3730      	adds	r7, #48	; 0x30
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200001d0 	.word	0x200001d0

08002084 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d116      	bne.n	80020d4 <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff ff7f 	bl	8001faa <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff ff63 	bl	8001f78 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b2:	2303      	movs	r3, #3
 80020b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4619      	mov	r1, r3
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f000 fe24 	bl	8002d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020d4:	bf00      	nop
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <LL_AHB2_GRP1_EnableClock>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002100:	68fb      	ldr	r3, [r7, #12]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_APB2_GRP1_EnableClock>:
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800211c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4313      	orrs	r3, r2
 8002124:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4013      	ands	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 8002146:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <MX_USART1_UART_Init+0x94>)
 8002148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 800214c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 800217e:	2200      	movs	r2, #0
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002188:	4811      	ldr	r0, [pc, #68]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 800218a:	f005 fb5d 	bl	8007848 <HAL_UART_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002194:	f7ff fc12 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002198:	2100      	movs	r1, #0
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 800219c:	f006 f8be 	bl	800831c <HAL_UARTEx_SetTxFifoThreshold>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021a6:	f7ff fc09 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021aa:	2100      	movs	r1, #0
 80021ac:	4808      	ldr	r0, [pc, #32]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 80021ae:	f006 f8f3 	bl	8008398 <HAL_UARTEx_SetRxFifoThreshold>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80021b8:	f7ff fc00 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MX_USART1_UART_Init+0x90>)
 80021be:	f006 f874 	bl	80082aa <HAL_UARTEx_DisableFifoMode>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80021c8:	f7ff fbf8 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000021c 	.word	0x2000021c
 80021d4:	40013800 	.word	0x40013800

080021d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b09c      	sub	sp, #112	; 0x70
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	2250      	movs	r2, #80	; 0x50
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f006 f9bf 	bl	800857c <memset>
  if(uartHandle->Instance==USART1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a16      	ldr	r2, [pc, #88]	; (800225c <HAL_UART_MspInit+0x84>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d124      	bne.n	8002252 <HAL_UART_MspInit+0x7a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002208:	2301      	movs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4618      	mov	r0, r3
 8002216:	f002 fdb1 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002220:	f7ff fbcc 	bl	80019bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002224:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002228:	f7ff ff71 	bl	800210e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff ff55 	bl	80020dc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002232:	23c0      	movs	r3, #192	; 0xc0
 8002234:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800223a:	2301      	movs	r3, #1
 800223c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002242:	2307      	movs	r3, #7
 8002244:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800224a:	4619      	mov	r1, r3
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <HAL_UART_MspInit+0x88>)
 800224e:	f000 fd65 	bl	8002d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002252:	bf00      	nop
 8002254:	3770      	adds	r7, #112	; 0x70
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40013800 	.word	0x40013800
 8002260:	48000400 	.word	0x48000400

08002264 <LL_AHB2_GRP1_EnableClock>:
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002288:	68fb      	ldr	r3, [r7, #12]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_APB1_GRP1_EnableClock>:
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4013      	ands	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022ce:	4a11      	ldr	r2, [pc, #68]	; (8002314 <MX_USB_PCD_Init+0x4c>)
 80022d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022d4:	2208      	movs	r2, #8
 80022d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022da:	2202      	movs	r2, #2
 80022dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	; (8002310 <MX_USB_PCD_Init+0x48>)
 80022fe:	f000 fed0 	bl	80030a2 <HAL_PCD_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002308:	f7ff fb58 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200002ac 	.word	0x200002ac
 8002314:	40006800 	.word	0x40006800

08002318 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <HAL_PCD_MspInit+0x5c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d118      	bne.n	800236c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff ff92 	bl	8002264 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002340:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002344:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002352:	230a      	movs	r3, #10
 8002354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002360:	f000 fcdc 	bl	8002d1c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002364:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002368:	f7ff ff95 	bl	8002296 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800236c:	bf00      	nop
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40006800 	.word	0x40006800

08002378 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002378:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237c:	3304      	adds	r3, #4

0800237e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002380:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002382:	d3f9      	bcc.n	8002378 <CopyDataInit>
  bx lr
 8002384:	4770      	bx	lr

08002386 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002386:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002388:	3004      	adds	r0, #4

0800238a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800238a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800238c:	d3fb      	bcc.n	8002386 <FillZerobss>
  bx lr
 800238e:	4770      	bx	lr

08002390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002394:	f7ff fd9e 	bl	8001ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002398:	480b      	ldr	r0, [pc, #44]	; (80023c8 <LoopForever+0x8>)
 800239a:	490c      	ldr	r1, [pc, #48]	; (80023cc <LoopForever+0xc>)
 800239c:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <LoopForever+0x10>)
 800239e:	2300      	movs	r3, #0
 80023a0:	f7ff ffed 	bl	800237e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80023a4:	480b      	ldr	r0, [pc, #44]	; (80023d4 <LoopForever+0x14>)
 80023a6:	490c      	ldr	r1, [pc, #48]	; (80023d8 <LoopForever+0x18>)
 80023a8:	2300      	movs	r3, #0
 80023aa:	f7ff ffee 	bl	800238a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <LoopForever+0x1c>)
 80023b0:	490b      	ldr	r1, [pc, #44]	; (80023e0 <LoopForever+0x20>)
 80023b2:	2300      	movs	r3, #0
 80023b4:	f7ff ffe9 	bl	800238a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023b8:	f006 f8bc 	bl	8008534 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80023bc:	f7ff f8c4 	bl	8001548 <main>

080023c0 <LoopForever>:

LoopForever:
  b LoopForever
 80023c0:	e7fe      	b.n	80023c0 <LoopForever>
 80023c2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80023c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80023c8:	20000004 	.word	0x20000004
 80023cc:	20000074 	.word	0x20000074
 80023d0:	0800a208 	.word	0x0800a208
  INIT_BSS _sbss, _ebss
 80023d4:	20000074 	.word	0x20000074
 80023d8:	200005b4 	.word	0x200005b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80023dc:	20030000 	.word	0x20030000
 80023e0:	20030000 	.word	0x20030000

080023e4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC1_IRQHandler>
	...

080023e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_Init+0x3c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <HAL_Init+0x3c>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fe:	2003      	movs	r0, #3
 8002400:	f000 f96c 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002404:	2000      	movs	r0, #0
 8002406:	f000 f80f 	bl	8002428 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	e001      	b.n	800241a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002416:	f7ff fcad 	bl	8001d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800241a:	79fb      	ldrb	r3, [r7, #7]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	58004000 	.word	0x58004000

08002428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_InitTick+0x6c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d024      	beq.n	8002486 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800243c:	f002 f80c 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_InitTick+0x6c>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f974 	bl	8002742 <HAL_SYSTICK_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10f      	bne.n	8002480 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b0f      	cmp	r3, #15
 8002464:	d809      	bhi.n	800247a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002466:	2200      	movs	r2, #0
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	f04f 30ff 	mov.w	r0, #4294967295
 800246e:	f000 f940 	bl	80026f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_InitTick+0x70>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e007      	b.n	800248a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e004      	b.n	800248a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e001      	b.n	800248a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000000c 	.word	0x2000000c
 8002498:	20000008 	.word	0x20000008

0800249c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x20>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x24>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_IncTick+0x24>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	200005a0 	.word	0x200005a0

080024c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return uwTick;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_GetTick+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	200005a0 	.word	0x200005a0

080024dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTickPrio+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffe2 	bl	80024c4 <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffd2 	bl	80024c4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
    {
    }
  }
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000000c 	.word	0x2000000c

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <__NVIC_EnableIRQ+0x38>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
         );
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d301      	bcc.n	80026ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00f      	b.n	80026ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <SysTick_Config+0x40>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b6:	210f      	movs	r1, #15
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f7ff ff8e 	bl	80025dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <SysTick_Config+0x40>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <SysTick_Config+0x40>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	e000e010 	.word	0xe000e010

080026dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff29 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002700:	f7ff ff40 	bl	8002584 <__NVIC_GetPriorityGrouping>
 8002704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ff90 	bl	8002630 <NVIC_EncodePriority>
 8002710:	4602      	mov	r2, r0
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff5f 	bl	80025dc <__NVIC_SetPriority>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff33 	bl	80025a0 <__NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffa4 	bl	8002698 <SysTick_Config>
 8002750:	4603      	mov	r3, r0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e08e      	b.n	800288c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_DMA_Init+0x138>)
 8002776:	429a      	cmp	r2, r3
 8002778:	d80f      	bhi.n	800279a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	4b45      	ldr	r3, [pc, #276]	; (8002898 <HAL_DMA_Init+0x13c>)
 8002782:	4413      	add	r3, r2
 8002784:	4a45      	ldr	r2, [pc, #276]	; (800289c <HAL_DMA_Init+0x140>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a42      	ldr	r2, [pc, #264]	; (80028a0 <HAL_DMA_Init+0x144>)
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
 8002798:	e00e      	b.n	80027b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <HAL_DMA_Init+0x148>)
 80027a2:	4413      	add	r3, r2
 80027a4:	4a3d      	ldr	r2, [pc, #244]	; (800289c <HAL_DMA_Init+0x140>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	009a      	lsls	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a3c      	ldr	r2, [pc, #240]	; (80028a8 <HAL_DMA_Init+0x14c>)
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa22 	bl	8002c54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002818:	d102      	bne.n	8002820 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800282c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002836:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d010      	beq.n	8002862 <HAL_DMA_Init+0x106>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d80c      	bhi.n	8002862 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fa41 	bl	8002cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	e008      	b.n	8002874 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40020407 	.word	0x40020407
 8002898:	bffdfff8 	.word	0xbffdfff8
 800289c:	cccccccd 	.word	0xcccccccd
 80028a0:	40020000 	.word	0x40020000
 80028a4:	bffdfbf8 	.word	0xbffdfbf8
 80028a8:	40020400 	.word	0x40020400

080028ac <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_DMA_Start_IT+0x20>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e066      	b.n	800299a <HAL_DMA_Start_IT+0xee>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d155      	bne.n	800298c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f966 	bl	8002bd6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 020e 	orr.w	r2, r2, #14
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e00f      	b.n	8002944 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0204 	bic.w	r2, r2, #4
 8002932:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 020a 	orr.w	r2, r2, #10
 8002942:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002960:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002978:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e005      	b.n	8002998 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002994:	2302      	movs	r3, #2
 8002996:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002998:	7dfb      	ldrb	r3, [r7, #23]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e04f      	b.n	8002a54 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d008      	beq.n	80029d2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2204      	movs	r2, #4
 80029c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e040      	b.n	8002a54 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 020e 	bic.w	r2, r2, #14
 80029e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f003 021c 	and.w	r2, r3, #28
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a1e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00c      	beq.n	8002a42 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a40:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f003 031c 	and.w	r3, r3, #28
 8002a80:	2204      	movs	r2, #4
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d026      	beq.n	8002ada <HAL_DMA_IRQHandler+0x7a>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d021      	beq.n	8002ada <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0204 	bic.w	r2, r2, #4
 8002ab2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f003 021c 	and.w	r2, r3, #28
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d071      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ad8:	e06c      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 031c 	and.w	r3, r3, #28
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d02e      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xec>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d029      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 020a 	bic.w	r2, r2, #10
 8002b14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f003 021c 	and.w	r2, r3, #28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d038      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b4a:	e033      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	f003 031c 	and.w	r3, r3, #28
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d02a      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x156>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d025      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 020e 	bic.w	r2, r2, #14
 8002b78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f003 021c 	and.w	r2, r3, #28
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
}
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bec:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	f003 021c 	and.w	r2, r3, #28
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d108      	bne.n	8002c36 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c34:	e007      	b.n	8002c46 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	60da      	str	r2, [r3, #12]
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d80a      	bhi.n	8002c7e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c74:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6493      	str	r3, [r2, #72]	; 0x48
 8002c7c:	e007      	b.n	8002c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3b08      	subs	r3, #8
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002ca4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40020407 	.word	0x40020407
 8002cc4:	4002081c 	.word	0x4002081c
 8002cc8:	cccccccd 	.word	0xcccccccd
 8002ccc:	40020880 	.word	0x40020880

08002cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2201      	movs	r2, #1
 8002d00:	409a      	lsls	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	1000823f 	.word	0x1000823f
 8002d18:	40020940 	.word	0x40020940

08002d1c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2a:	e14c      	b.n	8002fc6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 813e 	beq.w	8002fc0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d005      	beq.n	8002d5c <HAL_GPIO_Init+0x40>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d130      	bne.n	8002dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d92:	2201      	movs	r2, #1
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 0201 	and.w	r2, r3, #1
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d017      	beq.n	8002dfa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d123      	bne.n	8002e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	6939      	ldr	r1, [r7, #16]
 8002e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0203 	and.w	r2, r3, #3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8098 	beq.w	8002fc0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e90:	4a54      	ldr	r2, [pc, #336]	; (8002fe4 <HAL_GPIO_Init+0x2c8>)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eba:	d019      	beq.n	8002ef0 <HAL_GPIO_Init+0x1d4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_GPIO_Init+0x1d0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a49      	ldr	r2, [pc, #292]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00d      	beq.n	8002ee8 <HAL_GPIO_Init+0x1cc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a48      	ldr	r2, [pc, #288]	; (8002ff0 <HAL_GPIO_Init+0x2d4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <HAL_GPIO_Init+0x1c8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a47      	ldr	r2, [pc, #284]	; (8002ff4 <HAL_GPIO_Init+0x2d8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_GPIO_Init+0x1c4>
 8002edc:	2304      	movs	r3, #4
 8002ede:	e008      	b.n	8002ef2 <HAL_GPIO_Init+0x1d6>
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	e006      	b.n	8002ef2 <HAL_GPIO_Init+0x1d6>
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e004      	b.n	8002ef2 <HAL_GPIO_Init+0x1d6>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e002      	b.n	8002ef2 <HAL_GPIO_Init+0x1d6>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_GPIO_Init+0x1d6>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	f002 0203 	and.w	r2, r2, #3
 8002ef8:	0092      	lsls	r2, r2, #2
 8002efa:	4093      	lsls	r3, r2
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f02:	4938      	ldr	r1, [pc, #224]	; (8002fe4 <HAL_GPIO_Init+0x2c8>)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	3302      	adds	r3, #2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f34:	4a30      	ldr	r2, [pc, #192]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f5e:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f64:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_GPIO_Init+0x2dc>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f aeab 	bne.w	8002d2c <HAL_GPIO_Init+0x10>
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	48000400 	.word	0x48000400
 8002fec:	48000800 	.word	0x48000800
 8002ff0:	48000c00 	.word	0x48000c00
 8002ff4:	48001000 	.word	0x48001000
 8002ff8:	58000800 	.word	0x58000800

08002ffc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	887b      	ldrh	r3, [r7, #2]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	e001      	b.n	800301e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800301e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003048:	e002      	b.n	8003050 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f806 	bl	800308c <HAL_GPIO_EXTI_Callback>
  }
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	58000800 	.word	0x58000800

0800308c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a4:	b08b      	sub	sp, #44	; 0x2c
 80030a6:	af06      	add	r7, sp, #24
 80030a8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0d7      	b.n	8003264 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff f925 	bl	8002318 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2203      	movs	r2, #3
 80030d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f005 f9e8 	bl	80084b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e04c      	b.n	8003180 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	3301      	adds	r3, #1
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	b298      	uxth	r0, r3
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	3336      	adds	r3, #54	; 0x36
 8003124:	4602      	mov	r2, r0
 8003126:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	3303      	adds	r3, #3
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	3338      	adds	r3, #56	; 0x38
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	333c      	adds	r3, #60	; 0x3c
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	3340      	adds	r3, #64	; 0x40
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	3301      	adds	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	d3ad      	bcc.n	80030e6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	e044      	b.n	800321a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	f203 1369 	addw	r3, r3, #361	; 0x169
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	3301      	adds	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	d3b5      	bcc.n	8003190 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	687e      	ldr	r6, [r7, #4]
 800322c:	466d      	mov	r5, sp
 800322e:	f106 0410 	add.w	r4, r6, #16
 8003232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	602b      	str	r3, [r5, #0]
 800323a:	1d33      	adds	r3, r6, #4
 800323c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323e:	6838      	ldr	r0, [r7, #0]
 8003240:	f005 f951 	bl	80084e6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f805 	bl	800326c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800326c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003290:	b29b      	uxth	r3, r3
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	58000400 	.word	0x58000400

080032e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	58000400 	.word	0x58000400

080032fc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330e:	d101      	bne.n	8003314 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_RCC_HSE_Enable>:
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_RCC_HSE_Disable>:
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_RCC_HSE_IsReady>:
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800336e:	d101      	bne.n	8003374 <LL_RCC_HSE_IsReady+0x18>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_RCC_HSE_IsReady+0x1a>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_RCC_HSI_Enable>:
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <LL_RCC_HSI_Disable>:
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_RCC_HSI_IsReady>:
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80033c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	d101      	bne.n	80033d4 <LL_RCC_HSI_IsReady+0x18>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <LL_RCC_HSI_IsReady+0x1a>
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <LL_RCC_HSI48_Enable>:
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800340e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_RCC_HSI48_Disable>:
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_RCC_HSI48_IsReady>:
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d101      	bne.n	8003466 <LL_RCC_HSI48_IsReady+0x18>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <LL_RCC_HSI48_IsReady+0x1a>
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_RCC_LSE_Enable>:
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_RCC_LSE_Disable>:
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_RCC_LSE_EnableBypass>:
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_RCC_LSE_DisableBypass>:
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_RCC_LSE_IsReady>:
{
 80034fa:	b480      	push	{r7}
 80034fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80034fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d101      	bne.n	8003512 <LL_RCC_LSE_IsReady+0x18>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <LL_RCC_LSE_IsReady+0x1a>
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_RCC_LSI1_Enable>:
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_RCC_LSI1_Disable>:
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <LL_RCC_LSI1_IsReady>:
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d101      	bne.n	800357a <LL_RCC_LSI1_IsReady+0x18>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <LL_RCC_LSI1_IsReady+0x1a>
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_RCC_LSI2_Enable>:
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003596:	f043 0304 	orr.w	r3, r3, #4
 800359a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_RCC_LSI2_Disable>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_RCC_LSI2_IsReady>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d101      	bne.n	80035e2 <LL_RCC_LSI2_IsReady+0x18>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <LL_RCC_LSI2_IsReady+0x1a>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_RCC_LSI2_SetTrimming>:
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_RCC_MSI_Enable>:
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6013      	str	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <LL_RCC_MSI_Disable>:
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_RCC_MSI_IsReady>:
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800365c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d101      	bne.n	800366e <LL_RCC_MSI_IsReady+0x16>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <LL_RCC_MSI_IsReady+0x18>
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_RCC_MSI_SetRange>:
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <LL_RCC_MSI_GetRange>:
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2bb0      	cmp	r3, #176	; 0xb0
 80036b8:	d901      	bls.n	80036be <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80036ba:	23b0      	movs	r3, #176	; 0xb0
 80036bc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80036be:	687b      	ldr	r3, [r7, #4]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_RCC_MSI_SetCalibTrimming>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_RCC_SetSysClkSource>:
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80036fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 0203 	bic.w	r2, r3, #3
 8003708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_RCC_GetSysClkSource>:
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LL_RCC_SetAHBPrescaler>:
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800373e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_C2_RCC_SetAHBPrescaler>:
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800376e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <LL_RCC_SetAHB4Prescaler>:
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003796:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800379a:	f023 020f 	bic.w	r2, r3, #15
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_RCC_SetAPB1Prescaler>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_RCC_SetAPB2Prescaler>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	608b      	str	r3, [r1, #8]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_RCC_GetAHBPrescaler>:
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800380c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_RCC_GetAHB4Prescaler>:
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_RCC_GetAPB1Prescaler>:
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_RCC_GetAPB2Prescaler>:
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389c:	6013      	str	r3, [r2, #0]
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80038ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ba:	d101      	bne.n	80038c0 <LL_RCC_PLL_IsReady+0x18>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <LL_RCC_PLL_IsReady+0x1a>
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800391a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0303 	and.w	r3, r3, #3
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d101      	bne.n	8003946 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003966:	d101      	bne.n	800396c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003980:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d101      	bne.n	8003992 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039b0:	d101      	bne.n	80039b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d4:	d101      	bne.n	80039da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b08d      	sub	sp, #52	; 0x34
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e37e      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8092 	beq.w	8003b2c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a08:	f7ff fe89 	bl	800371e <LL_RCC_GetSysClkSource>
 8003a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a0e:	f7ff ff82 	bl	8003916 <LL_RCC_PLL_GetMainSource>
 8003a12:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_RCC_OscConfig+0x3e>
 8003a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	d14c      	bne.n	8003aba <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d149      	bne.n	8003aba <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a26:	f7ff fe17 	bl	8003658 <LL_RCC_MSI_IsReady>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_OscConfig+0x54>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e35d      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003a40:	f7ff fe2f 	bl	80036a2 <LL_RCC_MSI_GetRange>
 8003a44:	4603      	mov	r3, r0
 8003a46:	429c      	cmp	r4, r3
 8003a48:	d914      	bls.n	8003a74 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fd42 	bl	80044d8 <RCC_SetFlashLatencyFromMSIRange>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e34c      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fe09 	bl	800367a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fe2d 	bl	80036cc <LL_RCC_MSI_SetCalibTrimming>
 8003a72:	e013      	b.n	8003a9c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fdfe 	bl	800367a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fe22 	bl	80036cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fd23 	bl	80044d8 <RCC_SetFlashLatencyFromMSIRange>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e32d      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a9c:	f000 fcdc 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4ab3      	ldr	r2, [pc, #716]	; (8003d70 <HAL_RCC_OscConfig+0x388>)
 8003aa4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aa6:	4bb3      	ldr	r3, [pc, #716]	; (8003d74 <HAL_RCC_OscConfig+0x38c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fcbc 	bl	8002428 <HAL_InitTick>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d039      	beq.n	8003b2a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e31e      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01e      	beq.n	8003b00 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ac2:	f7ff fdab 	bl	800361c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fcfd 	bl	80024c4 <HAL_GetTick>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ace:	f7fe fcf9 	bl	80024c4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e30b      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ae0:	f7ff fdba 	bl	8003658 <LL_RCC_MSI_IsReady>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f1      	beq.n	8003ace <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fdc3 	bl	800367a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fde7 	bl	80036cc <LL_RCC_MSI_SetCalibTrimming>
 8003afe:	e015      	b.n	8003b2c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b00:	f7ff fd9b 	bl	800363a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fcde 	bl	80024c4 <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b0c:	f7fe fcda 	bl	80024c4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e2ec      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003b1e:	f7ff fd9b 	bl	8003658 <LL_RCC_MSI_IsReady>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f1      	bne.n	8003b0c <HAL_RCC_OscConfig+0x124>
 8003b28:	e000      	b.n	8003b2c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b2a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d04e      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b38:	f7ff fdf1 	bl	800371e <LL_RCC_GetSysClkSource>
 8003b3c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b3e:	f7ff feea 	bl	8003916 <LL_RCC_PLL_GetMainSource>
 8003b42:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x16e>
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d10a      	bne.n	8003b6c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b56:	f7ff fc01 	bl	800335c <LL_RCC_HSE_IsReady>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d039      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x1ec>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d135      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e2c5      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d102      	bne.n	8003b7c <HAL_RCC_OscConfig+0x194>
 8003b76:	f7ff fbd3 	bl	8003320 <LL_RCC_HSE_Enable>
 8003b7a:	e001      	b.n	8003b80 <HAL_RCC_OscConfig+0x198>
 8003b7c:	f7ff fbdf 	bl	800333e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d012      	beq.n	8003bae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fe fc9c 	bl	80024c4 <HAL_GetTick>
 8003b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fe fc98 	bl	80024c4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e2aa      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ba2:	f7ff fbdb 	bl	800335c <LL_RCC_HSE_IsReady>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f1      	beq.n	8003b90 <HAL_RCC_OscConfig+0x1a8>
 8003bac:	e013      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe fc89 	bl	80024c4 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb6:	f7fe fc85 	bl	80024c4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b64      	cmp	r3, #100	; 0x64
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e297      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003bc8:	f7ff fbc8 	bl	800335c <LL_RCC_HSE_IsReady>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f1      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x1ce>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d051      	beq.n	8003c86 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be2:	f7ff fd9c 	bl	800371e <LL_RCC_GetSysClkSource>
 8003be6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be8:	f7ff fe95 	bl	8003916 <LL_RCC_PLL_GetMainSource>
 8003bec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_OscConfig+0x218>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d113      	bne.n	8003c22 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d110      	bne.n	8003c22 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c00:	f7ff fbdc 	bl	80033bc <LL_RCC_HSI_IsReady>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x22e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e270      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fbe0 	bl	80033e0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c20:	e031      	b.n	8003c86 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d019      	beq.n	8003c5e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2a:	f7ff fba9 	bl	8003380 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fe fc49 	bl	80024c4 <HAL_GetTick>
 8003c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c36:	f7fe fc45 	bl	80024c4 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e257      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c48:	f7ff fbb8 	bl	80033bc <LL_RCC_HSI_IsReady>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f1      	beq.n	8003c36 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fbc2 	bl	80033e0 <LL_RCC_HSI_SetCalibTrimming>
 8003c5c:	e013      	b.n	8003c86 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5e:	f7ff fb9e 	bl	800339e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7fe fc2f 	bl	80024c4 <HAL_GetTick>
 8003c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6a:	f7fe fc2b 	bl	80024c4 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e23d      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003c7c:	f7ff fb9e 	bl	80033bc <LL_RCC_HSI_IsReady>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f1      	bne.n	8003c6a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80a3 	beq.w	8003de6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d076      	beq.n	8003d96 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d046      	beq.n	8003d42 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003cb4:	f7ff fc55 	bl	8003562 <LL_RCC_LSI1_IsReady>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d113      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003cbe:	f7ff fc2e 	bl	800351e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cc2:	f7fe fbff 	bl	80024c4 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003cca:	f7fe fbfb 	bl	80024c4 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e20d      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003cdc:	f7ff fc41 	bl	8003562 <LL_RCC_LSI1_IsReady>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f1      	beq.n	8003cca <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003ce6:	f7ff fc4e 	bl	8003586 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fe fbeb 	bl	80024c4 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003cf2:	f7fe fbe7 	bl	80024c4 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1f9      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003d04:	f7ff fc61 	bl	80035ca <LL_RCC_LSI2_IsReady>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f1      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fc6b 	bl	80035ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003d18:	f7ff fc12 	bl	8003540 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fbd2 	bl	80024c4 <HAL_GetTick>
 8003d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d24:	f7fe fbce 	bl	80024c4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1e0      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003d36:	f7ff fc14 	bl	8003562 <LL_RCC_LSI1_IsReady>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f1      	bne.n	8003d24 <HAL_RCC_OscConfig+0x33c>
 8003d40:	e051      	b.n	8003de6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003d42:	f7ff fbec 	bl	800351e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe fbbd 	bl	80024c4 <HAL_GetTick>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d4e:	f7fe fbb9 	bl	80024c4 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1cb      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003d60:	f7ff fbff 	bl	8003562 <LL_RCC_LSI1_IsReady>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f1      	beq.n	8003d4e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003d6a:	f7ff fc1d 	bl	80035a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003d6e:	e00c      	b.n	8003d8a <HAL_RCC_OscConfig+0x3a2>
 8003d70:	20000004 	.word	0x20000004
 8003d74:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003d78:	f7fe fba4 	bl	80024c4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1b6      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003d8a:	f7ff fc1e 	bl	80035ca <LL_RCC_LSI2_IsReady>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f1      	bne.n	8003d78 <HAL_RCC_OscConfig+0x390>
 8003d94:	e027      	b.n	8003de6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003d96:	f7ff fc07 	bl	80035a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fe fb93 	bl	80024c4 <HAL_GetTick>
 8003d9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003da2:	f7fe fb8f 	bl	80024c4 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e1a1      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003db4:	f7ff fc09 	bl	80035ca <LL_RCC_LSI2_IsReady>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f1      	bne.n	8003da2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003dbe:	f7ff fbbf 	bl	8003540 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fe fb7f 	bl	80024c4 <HAL_GetTick>
 8003dc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003dca:	f7fe fb7b 	bl	80024c4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e18d      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003ddc:	f7ff fbc1 	bl	8003562 <LL_RCC_LSI1_IsReady>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f1      	bne.n	8003dca <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d05b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df2:	4bb5      	ldr	r3, [pc, #724]	; (80040c8 <HAL_RCC_OscConfig+0x6e0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d114      	bne.n	8003e28 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003dfe:	f7ff fa5f 	bl	80032c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fe fb5f 	bl	80024c4 <HAL_GetTick>
 8003e06:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fe fb5b 	bl	80024c4 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e16d      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1c:	4baa      	ldr	r3, [pc, #680]	; (80040c8 <HAL_RCC_OscConfig+0x6e0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d102      	bne.n	8003e36 <HAL_RCC_OscConfig+0x44e>
 8003e30:	f7ff fb1f 	bl	8003472 <LL_RCC_LSE_Enable>
 8003e34:	e00c      	b.n	8003e50 <HAL_RCC_OscConfig+0x468>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d104      	bne.n	8003e48 <HAL_RCC_OscConfig+0x460>
 8003e3e:	f7ff fb3a 	bl	80034b6 <LL_RCC_LSE_EnableBypass>
 8003e42:	f7ff fb16 	bl	8003472 <LL_RCC_LSE_Enable>
 8003e46:	e003      	b.n	8003e50 <HAL_RCC_OscConfig+0x468>
 8003e48:	f7ff fb24 	bl	8003494 <LL_RCC_LSE_Disable>
 8003e4c:	f7ff fb44 	bl	80034d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d014      	beq.n	8003e82 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fe fb34 	bl	80024c4 <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fe fb30 	bl	80024c4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e140      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003e76:	f7ff fb40 	bl	80034fa <LL_RCC_LSE_IsReady>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ef      	beq.n	8003e60 <HAL_RCC_OscConfig+0x478>
 8003e80:	e013      	b.n	8003eaa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fe fb1f 	bl	80024c4 <HAL_GetTick>
 8003e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fe fb1b 	bl	80024c4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e12b      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003ea0:	f7ff fb2b 	bl	80034fa <LL_RCC_LSE_IsReady>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ef      	bne.n	8003e8a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02c      	beq.n	8003f10 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d014      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ebe:	f7ff faa4 	bl	800340a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fe faff 	bl	80024c4 <HAL_GetTick>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eca:	f7fe fafb 	bl	80024c4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e10d      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003edc:	f7ff fab7 	bl	800344e <LL_RCC_HSI48_IsReady>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f1      	beq.n	8003eca <HAL_RCC_OscConfig+0x4e2>
 8003ee6:	e013      	b.n	8003f10 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ee8:	f7ff faa0 	bl	800342c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fe faea 	bl	80024c4 <HAL_GetTick>
 8003ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ef4:	f7fe fae6 	bl	80024c4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0f8      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003f06:	f7ff faa2 	bl	800344e <LL_RCC_HSI48_IsReady>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f1      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80ee 	beq.w	80040f6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f1a:	f7ff fc00 	bl	800371e <LL_RCC_GetSysClkSource>
 8003f1e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	f040 80af 	bne.w	8004090 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0203 	and.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d123      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d11c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d114      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d05d      	beq.n	8004044 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d058      	beq.n	8004040 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0ab      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fa0:	f7ff fc73 	bl	800388a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fa4:	f7fe fa8e 	bl	80024c4 <HAL_GetTick>
 8003fa8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fe fa8a 	bl	80024c4 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e09c      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ef      	bne.n	8003fac <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <HAL_RCC_OscConfig+0x6e4>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fde:	4311      	orrs	r1, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fe4:	0212      	lsls	r2, r2, #8
 8003fe6:	4311      	orrs	r1, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fec:	4311      	orrs	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004002:	f7ff fc33 	bl	800386c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004016:	f7fe fa55 	bl	80024c4 <HAL_GetTick>
 800401a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401e:	f7fe fa51 	bl	80024c4 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e063      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ef      	beq.n	800401e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800403e:	e05a      	b.n	80040f6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e059      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d151      	bne.n	80040f6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004052:	f7ff fc0b 	bl	800386c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004064:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004066:	f7fe fa2d 	bl	80024c4 <HAL_GetTick>
 800406a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fe fa29 	bl	80024c4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e03b      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ef      	beq.n	800406e <HAL_RCC_OscConfig+0x686>
 800408e:	e032      	b.n	80040f6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d02d      	beq.n	80040f2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	f7ff fbf8 	bl	800388a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a4:	f023 0303 	bic.w	r3, r3, #3
 80040a8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80040b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fe fa01 	bl	80024c4 <HAL_GetTick>
 80040c2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c4:	e00d      	b.n	80040e2 <HAL_RCC_OscConfig+0x6fa>
 80040c6:	bf00      	nop
 80040c8:	58000400 	.word	0x58000400
 80040cc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fe f9f8 	bl	80024c4 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ef      	bne.n	80040d0 <HAL_RCC_OscConfig+0x6e8>
 80040f0:	e001      	b.n	80040f6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3734      	adds	r7, #52	; 0x34
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e12d      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b98      	ldr	r3, [pc, #608]	; (8004378 <HAL_RCC_ClockConfig+0x278>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d91b      	bls.n	800415a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b95      	ldr	r3, [pc, #596]	; (8004378 <HAL_RCC_ClockConfig+0x278>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 0207 	bic.w	r2, r3, #7
 800412a:	4993      	ldr	r1, [pc, #588]	; (8004378 <HAL_RCC_ClockConfig+0x278>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004132:	f7fe f9c7 	bl	80024c4 <HAL_GetTick>
 8004136:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004138:	e008      	b.n	800414c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800413a:	f7fe f9c3 	bl	80024c4 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e111      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414c:	4b8a      	ldr	r3, [pc, #552]	; (8004378 <HAL_RCC_ClockConfig+0x278>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d1ef      	bne.n	800413a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fae3 	bl	8003736 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004170:	f7fe f9a8 	bl	80024c4 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004178:	f7fe f9a4 	bl	80024c4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e0f2      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800418a:	f7ff fbd0 	bl	800392e <LL_RCC_IsActiveFlag_HPRE>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f1      	beq.n	8004178 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d016      	beq.n	80041ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fada 	bl	800375e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041aa:	f7fe f98b 	bl	80024c4 <HAL_GetTick>
 80041ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041b2:	f7fe f987 	bl	80024c4 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e0d5      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80041c4:	f7ff fbc5 	bl	8003952 <LL_RCC_IsActiveFlag_C2HPRE>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f1      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fad3 	bl	800378a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041e4:	f7fe f96e 	bl	80024c4 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041ec:	f7fe f96a 	bl	80024c4 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0b8      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80041fe:	f7ff fbbb 	bl	8003978 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f1      	beq.n	80041ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d016      	beq.n	8004242 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff facd 	bl	80037b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800421e:	f7fe f951 	bl	80024c4 <HAL_GetTick>
 8004222:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004226:	f7fe f94d 	bl	80024c4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e09b      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004238:	f7ff fbb1 	bl	800399e <LL_RCC_IsActiveFlag_PPRE1>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f1      	beq.n	8004226 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d017      	beq.n	800427e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fac3 	bl	80037e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800425a:	f7fe f933 	bl	80024c4 <HAL_GetTick>
 800425e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004262:	f7fe f92f 	bl	80024c4 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e07d      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004274:	f7ff fba5 	bl	80039c2 <LL_RCC_IsActiveFlag_PPRE2>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f1      	beq.n	8004262 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d043      	beq.n	8004312 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d106      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004292:	f7ff f863 	bl	800335c <LL_RCC_HSE_IsReady>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11e      	bne.n	80042da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e067      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80042a8:	f7ff fafe 	bl	80038a8 <LL_RCC_PLL_IsReady>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d113      	bne.n	80042da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e05c      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80042be:	f7ff f9cb 	bl	8003658 <LL_RCC_MSI_IsReady>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e051      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80042cc:	f7ff f876 	bl	80033bc <LL_RCC_HSI_IsReady>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e04a      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fa09 	bl	80036f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e4:	f7fe f8ee 	bl	80024c4 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fe f8ea 	bl	80024c4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e036      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	f7ff fa0c 	bl	800371e <LL_RCC_GetSysClkSource>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	429a      	cmp	r2, r3
 8004310:	d1ec      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_RCC_ClockConfig+0x278>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d21b      	bcs.n	8004358 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004320:	4b15      	ldr	r3, [pc, #84]	; (8004378 <HAL_RCC_ClockConfig+0x278>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 0207 	bic.w	r2, r3, #7
 8004328:	4913      	ldr	r1, [pc, #76]	; (8004378 <HAL_RCC_ClockConfig+0x278>)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004330:	f7fe f8c8 	bl	80024c4 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	e008      	b.n	800434a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004338:	f7fe f8c4 	bl	80024c4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e012      	b.n	8004370 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_ClockConfig+0x278>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d1ef      	bne.n	8004338 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004358:	f000 f87e 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 800435c:	4603      	mov	r3, r0
 800435e:	4a07      	ldr	r2, [pc, #28]	; (800437c <HAL_RCC_ClockConfig+0x27c>)
 8004360:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004362:	f7fe f8bb 	bl	80024dc <HAL_GetTickPrio>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe f85d 	bl	8002428 <HAL_InitTick>
 800436e:	4603      	mov	r3, r0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	58004000 	.word	0x58004000
 800437c:	20000004 	.word	0x20000004

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004386:	f7ff f9ca 	bl	800371e <LL_RCC_GetSysClkSource>
 800438a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004392:	f7ff f986 	bl	80036a2 <LL_RCC_MSI_GetRange>
 8004396:	4603      	mov	r3, r0
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	4a2b      	ldr	r2, [pc, #172]	; (800444c <HAL_RCC_GetSysClockFreq+0xcc>)
 80043a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	e04b      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d102      	bne.n	80043b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e045      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d10a      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80043ba:	f7fe ff9f 	bl	80032fc <LL_RCC_HSE_IsEnabledDiv2>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e03a      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80043ca:	4b22      	ldr	r3, [pc, #136]	; (8004454 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	e037      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80043d0:	f7ff faa1 	bl	8003916 <LL_RCC_PLL_GetMainSource>
 80043d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d003      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x64>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d003      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x6a>
 80043e2:	e00d      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043e6:	60bb      	str	r3, [r7, #8]
        break;
 80043e8:	e015      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80043ea:	f7fe ff87 	bl	80032fc <LL_RCC_HSE_IsEnabledDiv2>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d102      	bne.n	80043fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80043f8:	e00d      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043fc:	60bb      	str	r3, [r7, #8]
        break;
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004400:	f7ff f94f 	bl	80036a2 <LL_RCC_MSI_GetRange>
 8004404:	4603      	mov	r3, r0
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	4a0f      	ldr	r2, [pc, #60]	; (800444c <HAL_RCC_GetSysClockFreq+0xcc>)
 800440e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004412:	60bb      	str	r3, [r7, #8]
        break;
 8004414:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004416:	f7ff fa59 	bl	80038cc <LL_RCC_PLL_GetN>
 800441a:	4602      	mov	r2, r0
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	fb03 f402 	mul.w	r4, r3, r2
 8004422:	f7ff fa6c 	bl	80038fe <LL_RCC_PLL_GetDivider>
 8004426:	4603      	mov	r3, r0
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	3301      	adds	r3, #1
 800442c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004430:	f7ff fa59 	bl	80038e6 <LL_RCC_PLL_GetR>
 8004434:	4603      	mov	r3, r0
 8004436:	0f5b      	lsrs	r3, r3, #29
 8004438:	3301      	adds	r3, #1
 800443a:	fbb4 f3f3 	udiv	r3, r4, r3
 800443e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004440:	68fb      	ldr	r3, [r7, #12]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bd90      	pop	{r4, r7, pc}
 800444a:	bf00      	nop
 800444c:	08009f20 	.word	0x08009f20
 8004450:	00f42400 	.word	0x00f42400
 8004454:	01e84800 	.word	0x01e84800

08004458 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b598      	push	{r3, r4, r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800445c:	f7ff ff90 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8004460:	4604      	mov	r4, r0
 8004462:	f7ff f9d1 	bl	8003808 <LL_RCC_GetAHBPrescaler>
 8004466:	4603      	mov	r3, r0
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	4a03      	ldr	r2, [pc, #12]	; (800447c <HAL_RCC_GetHCLKFreq+0x24>)
 8004470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004474:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd98      	pop	{r3, r4, r7, pc}
 800447c:	08009ec0 	.word	0x08009ec0

08004480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004480:	b598      	push	{r3, r4, r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004484:	f7ff ffe8 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004488:	4604      	mov	r4, r0
 800448a:	f7ff f9d7 	bl	800383c <LL_RCC_GetAPB1Prescaler>
 800448e:	4603      	mov	r3, r0
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd98      	pop	{r3, r4, r7, pc}
 80044a8:	08009f00 	.word	0x08009f00

080044ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ac:	b598      	push	{r3, r4, r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80044b0:	f7ff ffd2 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 80044b4:	4604      	mov	r4, r0
 80044b6:	f7ff f9cd 	bl	8003854 <LL_RCC_GetAPB2Prescaler>
 80044ba:	4603      	mov	r3, r0
 80044bc:	0adb      	lsrs	r3, r3, #11
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd98      	pop	{r3, r4, r7, pc}
 80044d4:	08009f00 	.word	0x08009f00

080044d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80044d8:	b590      	push	{r4, r7, lr}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2bb0      	cmp	r3, #176	; 0xb0
 80044e4:	d903      	bls.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e007      	b.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	4a11      	ldr	r2, [pc, #68]	; (800453c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80044f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80044fe:	f7ff f98f 	bl	8003820 <LL_RCC_GetAHB4Prescaler>
 8004502:	4603      	mov	r3, r0
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	0c9c      	lsrs	r4, r3, #18
 8004522:	f7fe fedd 	bl	80032e0 <HAL_PWREx_GetVoltageRange>
 8004526:	4603      	mov	r3, r0
 8004528:	4619      	mov	r1, r3
 800452a:	4620      	mov	r0, r4
 800452c:	f000 f80c 	bl	8004548 <RCC_SetFlashLatency>
 8004530:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bd90      	pop	{r4, r7, pc}
 800453a:	bf00      	nop
 800453c:	08009f20 	.word	0x08009f20
 8004540:	08009ec0 	.word	0x08009ec0
 8004544:	431bde83 	.word	0x431bde83

08004548 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b093      	sub	sp, #76	; 0x4c
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004552:	4b39      	ldr	r3, [pc, #228]	; (8004638 <RCC_SetFlashLatency+0xf0>)
 8004554:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004558:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800455a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800455e:	4a37      	ldr	r2, [pc, #220]	; (800463c <RCC_SetFlashLatency+0xf4>)
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	ca07      	ldmia	r2, {r0, r1, r2}
 8004566:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800456a:	4b35      	ldr	r3, [pc, #212]	; (8004640 <RCC_SetFlashLatency+0xf8>)
 800456c:	f107 040c 	add.w	r4, r7, #12
 8004570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004576:	2300      	movs	r3, #0
 8004578:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004580:	d11c      	bne.n	80045bc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004582:	2300      	movs	r3, #0
 8004584:	643b      	str	r3, [r7, #64]	; 0x40
 8004586:	e015      	b.n	80045b4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004590:	4413      	add	r3, r2
 8004592:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	d808      	bhi.n	80045ae <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800459c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045a4:	4413      	add	r3, r2
 80045a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80045aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80045ac:	e022      	b.n	80045f4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80045ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b0:	3301      	adds	r3, #1
 80045b2:	643b      	str	r3, [r7, #64]	; 0x40
 80045b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d9e6      	bls.n	8004588 <RCC_SetFlashLatency+0x40>
 80045ba:	e01b      	b.n	80045f4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80045bc:	2300      	movs	r3, #0
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c0:	e015      	b.n	80045ee <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80045c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045ca:	4413      	add	r3, r2
 80045cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d808      	bhi.n	80045e8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80045d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045de:	4413      	add	r3, r2
 80045e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80045e4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80045e6:	e005      	b.n	80045f4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	3301      	adds	r3, #1
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d9e6      	bls.n	80045c2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <RCC_SetFlashLatency+0xfc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f023 0207 	bic.w	r2, r3, #7
 80045fc:	4911      	ldr	r1, [pc, #68]	; (8004644 <RCC_SetFlashLatency+0xfc>)
 80045fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004604:	f7fd ff5e 	bl	80024c4 <HAL_GetTick>
 8004608:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800460a:	e008      	b.n	800461e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800460c:	f7fd ff5a 	bl	80024c4 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e007      	b.n	800462e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <RCC_SetFlashLatency+0xfc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004628:	429a      	cmp	r2, r3
 800462a:	d1ef      	bne.n	800460c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	374c      	adds	r7, #76	; 0x4c
 8004632:	46bd      	mov	sp, r7
 8004634:	bd90      	pop	{r4, r7, pc}
 8004636:	bf00      	nop
 8004638:	08009e94 	.word	0x08009e94
 800463c:	08009ea4 	.word	0x08009ea4
 8004640:	08009eb0 	.word	0x08009eb0
 8004644:	58004000 	.word	0x58004000

08004648 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465a:	d101      	bne.n	8004660 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LL_RCC_HSE_IsReady>:
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800467e:	d101      	bne.n	8004684 <LL_RCC_HSE_IsReady+0x18>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <LL_RCC_HSE_IsReady+0x1a>
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_RCC_HSI_IsReady>:
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a2:	d101      	bne.n	80046a8 <LL_RCC_HSI_IsReady+0x18>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <LL_RCC_HSI_IsReady+0x1a>
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_RCC_HSI48_IsReady>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d101      	bne.n	80046cc <LL_RCC_HSI48_IsReady+0x18>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <LL_RCC_HSI48_IsReady+0x1a>
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <LL_RCC_LSE_IsEnabled>:
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80046dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <LL_RCC_LSE_IsEnabled+0x18>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <LL_RCC_LSE_IsEnabled+0x1a>
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <LL_RCC_LSE_IsReady>:
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d101      	bne.n	8004714 <LL_RCC_LSE_IsReady+0x18>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <LL_RCC_LSE_IsReady+0x1a>
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_RCC_LSI1_IsReady>:
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b02      	cmp	r3, #2
 8004732:	d101      	bne.n	8004738 <LL_RCC_LSI1_IsReady+0x18>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <LL_RCC_LSI1_IsReady+0x1a>
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <LL_RCC_LSI2_IsReady>:
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d101      	bne.n	800475c <LL_RCC_LSI2_IsReady+0x18>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <LL_RCC_LSI2_IsReady+0x1a>
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <LL_RCC_MSI_IsReady>:
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d101      	bne.n	800477e <LL_RCC_MSI_IsReady+0x16>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <LL_RCC_MSI_IsReady+0x18>
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_RCC_MSI_EnablePLLMode>:
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800478e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_RCC_MSI_GetRange>:
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80047ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b8:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2bb0      	cmp	r3, #176	; 0xb0
 80047be:	d901      	bls.n	80047c4 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80047c0:	23b0      	movs	r3, #176	; 0xb0
 80047c2:	607b      	str	r3, [r7, #4]
  return msiRange;
 80047c4:	687b      	ldr	r3, [r7, #4]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_RCC_SetRFWKPClockSource>:
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80047da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_RCC_GetRFWKPClockSource>:
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_GetAHBPrescaler>:
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_RCC_GetAPB1Prescaler>:
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_RCC_GetAPB2Prescaler>:
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_RCC_SetSMPSClockSource>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f023 0203 	bic.w	r2, r3, #3
 8004872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4313      	orrs	r3, r2
 800487a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_RCC_GetSMPSClockSource>:
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <LL_RCC_SetSMPSPrescaler>:
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_RCC_GetSMPSPrescaler>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 80048cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_RCC_SetUSARTClockSource>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f023 0203 	bic.w	r2, r3, #3
 80048f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <LL_RCC_SetLPUARTClockSource>:
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_RCC_SetI2CClockSource>:
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004944:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004950:	43db      	mvns	r3, r3
 8004952:	401a      	ands	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800495c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <LL_RCC_SetLPTIMClockSource>:
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <LL_RCC_SetSAIClockSource>:
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <LL_RCC_SetRNGClockSource>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80049e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_SetCLK48ClockSource>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <LL_RCC_SetUSBClockSource>:
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff ffe3 	bl	80049fe <LL_RCC_SetCLK48ClockSource>
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <LL_RCC_SetADCClockSource>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_RCC_GetUSARTClockSource>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4013      	ands	r3, r2
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_GetLPUARTClockSource>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4013      	ands	r3, r2
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_RCC_GetI2CClockSource>:
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8004ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	091a      	lsrs	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4313      	orrs	r3, r2
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_RCC_GetLPTIMClockSource>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	0c1a      	lsrs	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4313      	orrs	r3, r2
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_GetSAIClockSource>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4013      	ands	r3, r2
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <LL_RCC_GetRNGClockSource>:
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4013      	ands	r3, r2
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_RCC_GetCLK48ClockSource>:
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4013      	ands	r3, r2
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <LL_RCC_GetUSBClockSource>:
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ffe9 	bl	8004b3a <LL_RCC_GetCLK48ClockSource>
 8004b68:	4603      	mov	r3, r0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <LL_RCC_GetADCClockSource>:
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8004b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4013      	ands	r3, r2
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_SetRTCClockSource>:
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_RCC_GetRTCClockSource>:
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_RCC_ForceBackupDomainReset>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_ReleaseBackupDomainReset>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c12:	bf00      	nop
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <LL_RCC_PLL_IsReady>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c2e:	d101      	bne.n	8004c34 <LL_RCC_PLL_IsReady+0x18>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <LL_RCC_PLL_IsReady+0x1a>
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_RCC_PLL_GetN>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <LL_RCC_PLL_GetP>:
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <LL_RCC_PLL_GetQ>:
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8004c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_RCC_PLL_GetDivider>:
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <LL_RCC_PLLSAI1_Enable>:
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cb4:	6013      	str	r3, [r2, #0]
}
 8004cb6:	bf00      	nop
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_RCC_PLLSAI1_Disable>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cd2:	6013      	str	r3, [r2, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_PLLSAI1_IsReady>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf0:	d101      	bne.n	8004cf6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <LL_RCC_PLLSAI1_GetN>:
{
 8004d02:	b480      	push	{r7}
 8004d04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8004d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <LL_RCC_PLLSAI1_GetP>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <LL_RCC_PLLSAI1_GetQ>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8004d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <LL_RCC_PLLSAI1_GetR>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8004d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_RCC_PLL_GetMainSource>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d034      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004da0:	d021      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004da2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004da6:	d81b      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dac:	d01d      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004db2:	d815      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dbc:	d110      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dce:	e00d      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fd64 	bl	80058a2 <RCCEx_PLLSAI1_ConfigNP>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dde:	e005      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	77fb      	strb	r3, [r7, #31]
        break;
 8004de4:	e002      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004de6:	bf00      	nop
 8004de8:	e000      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dec:	7ffb      	ldrb	r3, [r7, #31]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fdd5 	bl	80049a6 <LL_RCC_SetSAIClockSource>
 8004dfc:	e001      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfe:	7ffb      	ldrb	r3, [r7, #31]
 8004e00:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d046      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004e0e:	f7ff fed6 	bl	8004bbe <LL_RCC_GetRTCClockSource>
 8004e12:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d03c      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e1e:	f7fe fa4f 	bl	80032c0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff feb0 	bl	8004b92 <LL_RCC_SetRTCClockSource>
 8004e32:	e02e      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004e3e:	f7ff fecb 	bl	8004bd8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004e42:	f7ff feda 	bl	8004bfa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004e5e:	f7ff fc3b 	bl	80046d8 <LL_RCC_LSE_IsEnabled>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d114      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e68:	f7fd fb2c 	bl	80024c4 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e70:	f7fd fb28 	bl	80024c4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d902      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	77fb      	strb	r3, [r7, #31]
              break;
 8004e86:	e004      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004e88:	f7ff fc38 	bl	80046fc <LL_RCC_LSE_IsReady>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d1ee      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004e92:	7ffb      	ldrb	r3, [r7, #31]
 8004e94:	77bb      	strb	r3, [r7, #30]
 8004e96:	e001      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	7ffb      	ldrb	r3, [r7, #31]
 8004e9a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d004      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fd17 	bl	80048e0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fd22 	bl	800490c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d004      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fd4a 	bl	8004972 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fd3f 	bl	8004972 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fd17 	bl	8004938 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fd0c 	bl	8004938 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d022      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fd7a 	bl	8004a2a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f58:	d10b      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fcfa 	bl	8005958 <RCCEx_PLLSAI1_ConfigNQ>
 8004f64:	4603      	mov	r3, r0
 8004f66:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004f6e:	7ffb      	ldrb	r3, [r7, #31]
 8004f70:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02b      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d008      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f90:	d003      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fd17 	bl	80049d2 <LL_RCC_SetRNGClockSource>
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f7ff fd0e 	bl	80049d2 <LL_RCC_SetRNGClockSource>
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff fd21 	bl	80049fe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d022      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff fd2a 	bl	8004a40 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ff4:	d107      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800500e:	d10b      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fcfa 	bl	8005a0e <RCCEx_PLLSAI1_ConfigNR>
 800501a:	4603      	mov	r3, r0
 800501c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005024:	7ffb      	ldrb	r3, [r7, #31]
 8005026:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fbca 	bl	80047d2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fc26 	bl	80048a0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fc01 	bl	8004860 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800505e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b093      	sub	sp, #76	; 0x4c
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8005074:	f7ff fc28 	bl	80048c8 <LL_RCC_GetSMPSPrescaler>
 8005078:	4603      	mov	r3, r0
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005084:	d12d      	bne.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8005086:	f7ff fd9a 	bl	8004bbe <LL_RCC_GetRTCClockSource>
 800508a:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005092:	d109      	bne.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8005094:	f7ff fb32 	bl	80046fc <LL_RCC_LSE_IsReady>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	f040 83d8 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80050a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a4:	647b      	str	r3, [r7, #68]	; 0x44
 80050a6:	e3d3      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ae:	d110      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80050b0:	f7ff fb36 	bl	8004720 <LL_RCC_LSI1_IsReady>
 80050b4:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80050b6:	f7ff fb45 	bl	8004744 <LL_RCC_LSI2_IsReady>
 80050ba:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d003      	beq.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	f040 83c3 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80050ca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
 80050d0:	e3be      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d8:	f040 83ba 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 80050dc:	4bba      	ldr	r3, [pc, #744]	; (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80050de:	647b      	str	r3, [r7, #68]	; 0x44
 80050e0:	e3b6      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	d130      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 80050e8:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80050ec:	f7ff fd05 	bl	8004afa <LL_RCC_GetSAIClockSource>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f6:	d008      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80050f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050fc:	d822      	bhi.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8005102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005106:	d013      	beq.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8005108:	e01c      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 800510a:	f7ff fac1 	bl	8004690 <LL_RCC_HSI_IsReady>
 800510e:	4603      	mov	r3, r0
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 837e 	bne.w	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 8005116:	4bad      	ldr	r3, [pc, #692]	; (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005118:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800511a:	e37a      	b.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800511c:	f7ff fddf 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	f040 8377 	bne.w	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8005128:	f000 fdce 	bl	8005cc8 <RCC_PLLSAI1_GetFreqDomain_P>
 800512c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800512e:	e372      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8005130:	f7ff fd74 	bl	8004c1c <LL_RCC_PLL_IsReady>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	f040 836f 	bne.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 800513c:	f000 fcc2 	bl	8005ac4 <RCC_PLL_GetFreqDomain_P>
 8005140:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005142:	e36a      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005144:	4ba2      	ldr	r3, [pc, #648]	; (80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8005146:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8005148:	e382      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005150:	d168      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 8005152:	f000 fb87 	bl	8005864 <HAL_RCCEx_GetRngCLKSource>
 8005156:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d110      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8005160:	f7ff fade 	bl	8004720 <LL_RCC_LSI1_IsReady>
 8005164:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8005166:	f7ff faed 	bl	8004744 <LL_RCC_LSI2_IsReady>
 800516a:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d003      	beq.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b01      	cmp	r3, #1
 8005176:	f040 836b 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800517a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800517e:	647b      	str	r3, [r7, #68]	; 0x44
 8005180:	e366      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005188:	d109      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800518a:	f7ff fab7 	bl	80046fc <LL_RCC_LSE_IsReady>
 800518e:	4603      	mov	r3, r0
 8005190:	2b01      	cmp	r3, #1
 8005192:	f040 835d 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8005196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519a:	647b      	str	r3, [r7, #68]	; 0x44
 800519c:	e358      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80051a4:	d10e      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 80051a6:	f7ff fd39 	bl	8004c1c <LL_RCC_PLL_IsReady>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 834f 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80051b2:	f000 fcdd 	bl	8005b70 <RCC_PLL_GetFreqDomain_Q>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a86      	ldr	r2, [pc, #536]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
 80051c2:	e345      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 80051ca:	d114      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 80051cc:	f7ff facc 	bl	8004768 <LL_RCC_MSI_IsReady>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	f040 833c 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 80051d8:	f7ff fae6 	bl	80047a8 <LL_RCC_MSI_GetRange>
 80051dc:	4603      	mov	r3, r0
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	4a7c      	ldr	r2, [pc, #496]	; (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80051e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ea:	4a7a      	ldr	r2, [pc, #488]	; (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	647b      	str	r3, [r7, #68]	; 0x44
 80051f4:	e32c      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 80051fc:	d109      	bne.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80051fe:	f7ff fd6e 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 8005202:	4603      	mov	r3, r0
 8005204:	2b01      	cmp	r3, #1
 8005206:	f040 8323 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800520a:	f000 fdb3 	bl	8005d74 <RCC_PLLSAI1_GetFreqDomain_Q>
 800520e:	6478      	str	r0, [r7, #68]	; 0x44
 8005210:	e31e      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 8005212:	f7ff fa4f 	bl	80046b4 <LL_RCC_HSI48_IsReady>
 8005216:	4603      	mov	r3, r0
 8005218:	2b01      	cmp	r3, #1
 800521a:	f040 8319 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 800521e:	4b6b      	ldr	r3, [pc, #428]	; (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005220:	647b      	str	r3, [r7, #68]	; 0x44
 8005222:	e315      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d13f      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 800522c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8005230:	f7ff fc93 	bl	8004b5a <LL_RCC_GetUSBClockSource>
 8005234:	4603      	mov	r3, r0
 8005236:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800523a:	d01d      	beq.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800523c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005240:	d82b      	bhi.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 8005242:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8005248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800524e:	e024      	b.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8005250:	f7ff fd45 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	f040 82e1 	bne.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800525c:	f000 fd8a 	bl	8005d74 <RCC_PLLSAI1_GetFreqDomain_Q>
 8005260:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005262:	e2dc      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8005264:	f7ff fcda 	bl	8004c1c <LL_RCC_PLL_IsReady>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	f040 82d9 	bne.w	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 8005270:	f000 fc7e 	bl	8005b70 <RCC_PLL_GetFreqDomain_Q>
 8005274:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005276:	e2d4      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8005278:	f7ff fa76 	bl	8004768 <LL_RCC_MSI_IsReady>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	f040 82d1 	bne.w	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005284:	f7ff fa90 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005288:	4603      	mov	r3, r0
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	4a51      	ldr	r2, [pc, #324]	; (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8005292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005296:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005298:	e2c5      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 800529a:	f7ff fa0b 	bl	80046b4 <LL_RCC_HSI48_IsReady>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	f040 82c2 	bne.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 80052a6:	4b4d      	ldr	r3, [pc, #308]	; (80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80052a8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80052aa:	e2be      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d140      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80052b2:	2003      	movs	r0, #3
 80052b4:	f7ff fbda 	bl	8004a6c <LL_RCC_GetUSARTClockSource>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d013      	beq.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d81b      	bhi.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d002      	beq.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d004      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80052ca:	e016      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80052cc:	f7ff f858 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 80052d0:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80052d2:	e2bd      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80052d4:	f7ff f9dc 	bl	8004690 <LL_RCC_HSI_IsReady>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	f040 82a7 	bne.w	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 80052e0:	4b3a      	ldr	r3, [pc, #232]	; (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80052e2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80052e4:	e2a3      	b.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80052e6:	f7ff fa09 	bl	80046fc <LL_RCC_LSE_IsReady>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	f040 82a0 	bne.w	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 80052f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80052f8:	e29b      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80052fa:	f7ff f841 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 80052fe:	4604      	mov	r4, r0
 8005300:	f7ff fa8a 	bl	8004818 <LL_RCC_GetAHBPrescaler>
 8005304:	4603      	mov	r3, r0
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	4a34      	ldr	r2, [pc, #208]	; (80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800530e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005312:	fbb4 f4f3 	udiv	r4, r4, r3
 8005316:	f7ff fa97 	bl	8004848 <LL_RCC_GetAPB2Prescaler>
 800531a:	4603      	mov	r3, r0
 800531c:	0adb      	lsrs	r3, r3, #11
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	4a30      	ldr	r2, [pc, #192]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	fa24 f303 	lsr.w	r3, r4, r3
 8005330:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 8005332:	e28d      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d156      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 800533a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800533e:	f7ff fba5 	bl	8004a8c <LL_RCC_GetLPUARTClockSource>
 8005342:	4603      	mov	r3, r0
 8005344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005348:	d016      	beq.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800534a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800534e:	d81d      	bhi.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d003      	beq.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d004      	beq.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800535c:	e016      	b.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800535e:	f7ff f80f 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8005362:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005364:	e274      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8005366:	f7ff f993 	bl	8004690 <LL_RCC_HSI_IsReady>
 800536a:	4603      	mov	r3, r0
 800536c:	2b01      	cmp	r3, #1
 800536e:	f040 8262 	bne.w	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005374:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005376:	e25e      	b.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8005378:	f7ff f9c0 	bl	80046fc <LL_RCC_LSE_IsReady>
 800537c:	4603      	mov	r3, r0
 800537e:	2b01      	cmp	r3, #1
 8005380:	f040 825b 	bne.w	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 8005384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005388:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800538a:	e256      	b.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800538c:	f7fe fff8 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8005390:	4604      	mov	r4, r0
 8005392:	f7ff fa41 	bl	8004818 <LL_RCC_GetAHBPrescaler>
 8005396:	4603      	mov	r3, r0
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80053a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a4:	fbb4 f4f3 	udiv	r4, r4, r3
 80053a8:	f7ff fa42 	bl	8004830 <LL_RCC_GetAPB1Prescaler>
 80053ac:	4603      	mov	r3, r0
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4a0b      	ldr	r2, [pc, #44]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80053b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	fa24 f303 	lsr.w	r3, r4, r3
 80053c2:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80053c4:	e244      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80053c6:	bf00      	nop
 80053c8:	000f4240 	.word	0x000f4240
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	001fff68 	.word	0x001fff68
 80053d4:	aaaaaaab 	.word	0xaaaaaaab
 80053d8:	08009f20 	.word	0x08009f20
 80053dc:	02dc6c00 	.word	0x02dc6c00
 80053e0:	08009ec0 	.word	0x08009ec0
 80053e4:	08009f00 	.word	0x08009f00
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ee:	d12a      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 80053f0:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 80053f4:	f7ff fbbd 	bl	8004b72 <LL_RCC_GetADCClockSource>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053fe:	d014      	beq.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005400:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005404:	f200 821b 	bhi.w	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8005408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800540c:	d003      	beq.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800540e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005412:	d00e      	beq.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 8005414:	e213      	b.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8005416:	f7ff fc62 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 800541a:	4603      	mov	r3, r0
 800541c:	2b01      	cmp	r3, #1
 800541e:	f040 8210 	bne.w	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 8005422:	f000 fbfb 	bl	8005c1c <RCC_PLLSAI1_GetFreqDomain_R>
 8005426:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005428:	e20b      	b.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 800542a:	f7fe ffa9 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800542e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005430:	e20e      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 8005432:	f7ff fbf3 	bl	8004c1c <LL_RCC_PLL_IsReady>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	f040 8204 	bne.w	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 800543e:	f000 fb41 	bl	8005ac4 <RCC_PLL_GetFreqDomain_P>
 8005442:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005444:	e1ff      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b04      	cmp	r3, #4
 800544a:	d135      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 800544c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8005450:	f7ff fb2c 	bl	8004aac <LL_RCC_GetI2CClockSource>
 8005454:	4603      	mov	r3, r0
 8005456:	4ab7      	ldr	r2, [pc, #732]	; (8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800545c:	4ab6      	ldr	r2, [pc, #728]	; (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8005462:	e00c      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8005464:	f7fe ff8c 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8005468:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800546a:	e1f1      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800546c:	f7ff f910 	bl	8004690 <LL_RCC_HSI_IsReady>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	f040 81e9 	bne.w	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 8005478:	4bb0      	ldr	r3, [pc, #704]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800547c:	e1e5      	b.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800547e:	f7fe ff7f 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8005482:	4604      	mov	r4, r0
 8005484:	f7ff f9c8 	bl	8004818 <LL_RCC_GetAHBPrescaler>
 8005488:	4603      	mov	r3, r0
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	4aab      	ldr	r2, [pc, #684]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	fbb4 f4f3 	udiv	r4, r4, r3
 800549a:	f7ff f9c9 	bl	8004830 <LL_RCC_GetAPB1Prescaler>
 800549e:	4603      	mov	r3, r0
 80054a0:	0a1b      	lsrs	r3, r3, #8
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	4aa7      	ldr	r2, [pc, #668]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80054a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	fa24 f303 	lsr.w	r3, r4, r3
 80054b4:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80054b6:	e1cb      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d135      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80054be:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80054c2:	f7ff faf3 	bl	8004aac <LL_RCC_GetI2CClockSource>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4a9f      	ldr	r2, [pc, #636]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80054ce:	4a9f      	ldr	r2, [pc, #636]	; (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80054d4:	e00c      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80054d6:	f7fe ff53 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 80054da:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80054dc:	e1b8      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80054de:	f7ff f8d7 	bl	8004690 <LL_RCC_HSI_IsReady>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f040 81b2 	bne.w	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 80054ea:	4b94      	ldr	r3, [pc, #592]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80054ee:	e1ae      	b.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80054f0:	f7fe ff46 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 80054f4:	4604      	mov	r4, r0
 80054f6:	f7ff f98f 	bl	8004818 <LL_RCC_GetAHBPrescaler>
 80054fa:	4603      	mov	r3, r0
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	4a8f      	ldr	r2, [pc, #572]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8005504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005508:	fbb4 f4f3 	udiv	r4, r4, r3
 800550c:	f7ff f990 	bl	8004830 <LL_RCC_GetAPB1Prescaler>
 8005510:	4603      	mov	r3, r0
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4a8a      	ldr	r2, [pc, #552]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800551a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551e:	f003 031f 	and.w	r3, r3, #31
 8005522:	fa24 f303 	lsr.w	r3, r4, r3
 8005526:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8005528:	e192      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b10      	cmp	r3, #16
 800552e:	d151      	bne.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 8005530:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8005534:	f7ff face 	bl	8004ad4 <LL_RCC_GetLPTIMClockSource>
 8005538:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	4a84      	ldr	r2, [pc, #528]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d110      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8005542:	f7ff f8ed 	bl	8004720 <LL_RCC_LSI1_IsReady>
 8005546:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8005548:	f7ff f8fc 	bl	8004744 <LL_RCC_LSI2_IsReady>
 800554c:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	2b01      	cmp	r3, #1
 8005552:	d003      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b01      	cmp	r3, #1
 8005558:	f040 817a 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800555c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
 8005562:	e175      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	4a7b      	ldr	r2, [pc, #492]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800556c:	f7ff f890 	bl	8004690 <LL_RCC_HSI_IsReady>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	f040 816c 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8005578:	4b70      	ldr	r3, [pc, #448]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800557a:	647b      	str	r3, [r7, #68]	; 0x44
 800557c:	e168      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005584:	d109      	bne.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8005586:	f7ff f8b9 	bl	80046fc <LL_RCC_LSE_IsReady>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	f040 815f 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8005592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005596:	647b      	str	r3, [r7, #68]	; 0x44
 8005598:	e15a      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 800559a:	f7fe fef1 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800559e:	4604      	mov	r4, r0
 80055a0:	f7ff f93a 	bl	8004818 <LL_RCC_GetAHBPrescaler>
 80055a4:	4603      	mov	r3, r0
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	4a64      	ldr	r2, [pc, #400]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80055ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b2:	fbb4 f4f3 	udiv	r4, r4, r3
 80055b6:	f7ff f93b 	bl	8004830 <LL_RCC_GetAPB1Prescaler>
 80055ba:	4603      	mov	r3, r0
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	4a60      	ldr	r2, [pc, #384]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80055c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	fa24 f303 	lsr.w	r3, r4, r3
 80055d0:	647b      	str	r3, [r7, #68]	; 0x44
 80055d2:	e13d      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d151      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 80055da:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80055de:	f7ff fa79 	bl	8004ad4 <LL_RCC_GetLPTIMClockSource>
 80055e2:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	4a5c      	ldr	r2, [pc, #368]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d110      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80055ec:	f7ff f898 	bl	8004720 <LL_RCC_LSI1_IsReady>
 80055f0:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80055f2:	f7ff f8a7 	bl	8004744 <LL_RCC_LSI2_IsReady>
 80055f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d003      	beq.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80055fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005600:	2b01      	cmp	r3, #1
 8005602:	f040 8125 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8005606:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800560a:	647b      	str	r3, [r7, #68]	; 0x44
 800560c:	e120      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	4a52      	ldr	r2, [pc, #328]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8005616:	f7ff f83b 	bl	8004690 <LL_RCC_HSI_IsReady>
 800561a:	4603      	mov	r3, r0
 800561c:	2b01      	cmp	r3, #1
 800561e:	f040 8117 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8005622:	4b46      	ldr	r3, [pc, #280]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
 8005626:	e113      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800562e:	d109      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8005630:	f7ff f864 	bl	80046fc <LL_RCC_LSE_IsReady>
 8005634:	4603      	mov	r3, r0
 8005636:	2b01      	cmp	r3, #1
 8005638:	f040 810a 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800563c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
 8005642:	e105      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8005644:	f7fe fe9c 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8005648:	4604      	mov	r4, r0
 800564a:	f7ff f8e5 	bl	8004818 <LL_RCC_GetAHBPrescaler>
 800564e:	4603      	mov	r3, r0
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	4a3a      	ldr	r2, [pc, #232]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8005658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005660:	f7ff f8e6 	bl	8004830 <LL_RCC_GetAPB1Prescaler>
 8005664:	4603      	mov	r3, r0
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	4a35      	ldr	r2, [pc, #212]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800566e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	fa24 f303 	lsr.w	r3, r4, r3
 800567a:	647b      	str	r3, [r7, #68]	; 0x44
 800567c:	e0e8      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d119      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 8005686:	f7ff f8ba 	bl	80047fe <LL_RCC_GetRFWKPClockSource>
 800568a:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005692:	d109      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8005694:	f7ff f832 	bl	80046fc <LL_RCC_LSE_IsReady>
 8005698:	4603      	mov	r3, r0
 800569a:	2b01      	cmp	r3, #1
 800569c:	f040 80d8 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80056a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a4:	647b      	str	r3, [r7, #68]	; 0x44
 80056a6:	e0d3      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056ae:	f040 80cf 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 80056b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80056b6:	647b      	str	r3, [r7, #68]	; 0x44
 80056b8:	e0ca      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c0:	f040 80c6 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 80056c4:	f7ff f8e0 	bl	8004888 <LL_RCC_GetSMPSClockSource>
 80056c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 80056ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d115      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80056d0:	f7fe ffde 	bl	8004690 <LL_RCC_HSI_IsReady>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	f040 80ba 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 80056dc:	4920      	ldr	r1, [pc, #128]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80056de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056e0:	4613      	mov	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4413      	add	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	440b      	add	r3, r1
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a13      	ldr	r2, [pc, #76]	; (800573c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 80056f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	647b      	str	r3, [r7, #68]	; 0x44
 80056fa:	e0a9      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 80056fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005702:	d131      	bne.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 8005704:	f7fe ffb2 	bl	800466c <LL_RCC_HSE_IsReady>
 8005708:	4603      	mov	r3, r0
 800570a:	2b01      	cmp	r3, #1
 800570c:	f040 80a0 	bne.w	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8005710:	4913      	ldr	r1, [pc, #76]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8005712:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005714:	4613      	mov	r3, r2
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	4413      	add	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	440b      	add	r3, r1
 800571e:	3314      	adds	r3, #20
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 800572a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
 8005730:	e08e      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8005732:	bf00      	nop
 8005734:	00030100 	.word	0x00030100
 8005738:	00030200 	.word	0x00030200
 800573c:	00f42400 	.word	0x00f42400
 8005740:	08009ec0 	.word	0x08009ec0
 8005744:	08009f00 	.word	0x08009f00
 8005748:	00301000 	.word	0x00301000
 800574c:	00302000 	.word	0x00302000
 8005750:	000c0004 	.word	0x000c0004
 8005754:	000c0008 	.word	0x000c0008
 8005758:	00300010 	.word	0x00300010
 800575c:	00300020 	.word	0x00300020
 8005760:	08009f60 	.word	0x08009f60
 8005764:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576e:	d16f      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 8005770:	f7ff f81a 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005774:	4603      	mov	r3, r0
 8005776:	2bb0      	cmp	r3, #176	; 0xb0
 8005778:	d037      	beq.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800577a:	2bb0      	cmp	r3, #176	; 0xb0
 800577c:	d844      	bhi.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800577e:	2ba0      	cmp	r3, #160	; 0xa0
 8005780:	d024      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8005782:	2ba0      	cmp	r3, #160	; 0xa0
 8005784:	d840      	bhi.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d002      	beq.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800578a:	2b90      	cmp	r3, #144	; 0x90
 800578c:	d00f      	beq.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 800578e:	e03b      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8005790:	4b32      	ldr	r3, [pc, #200]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8005792:	6a19      	ldr	r1, [r3, #32]
 8005794:	4832      	ldr	r0, [pc, #200]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005798:	4613      	mov	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4403      	add	r3, r0
 80057a2:	3310      	adds	r3, #16
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80057ac:	e02d      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 80057ae:	4b2b      	ldr	r3, [pc, #172]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80057b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057b2:	482b      	ldr	r0, [pc, #172]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80057b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	4403      	add	r3, r0
 80057c0:	330c      	adds	r3, #12
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80057ca:	e01e      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 80057cc:	4b23      	ldr	r3, [pc, #140]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80057ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80057d0:	4823      	ldr	r0, [pc, #140]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80057d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057d4:	4613      	mov	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4403      	add	r3, r0
 80057de:	3308      	adds	r3, #8
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80057e8:	e00f      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 80057ea:	4b1c      	ldr	r3, [pc, #112]	; (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80057ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057ee:	481c      	ldr	r0, [pc, #112]	; (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80057f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4403      	add	r3, r0
 80057fc:	3304      	adds	r3, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	fbb1 f3f3 	udiv	r3, r1, r3
 8005804:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005806:	e000      	b.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8005808:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 800580a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
 8005810:	e01e      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005812:	bf00      	nop
 8005814:	e01c      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005816:	bf00      	nop
 8005818:	e01a      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800581a:	bf00      	nop
 800581c:	e018      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800581e:	bf00      	nop
 8005820:	e016      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005822:	bf00      	nop
 8005824:	e014      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005826:	bf00      	nop
 8005828:	e012      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800582a:	bf00      	nop
 800582c:	e010      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800582e:	bf00      	nop
 8005830:	e00e      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005832:	bf00      	nop
 8005834:	e00c      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005836:	bf00      	nop
 8005838:	e00a      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800583a:	bf00      	nop
 800583c:	e008      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800583e:	bf00      	nop
 8005840:	e006      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005842:	bf00      	nop
 8005844:	e004      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005846:	bf00      	nop
 8005848:	e002      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800584e:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 8005850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005852:	4618      	mov	r0, r3
 8005854:	374c      	adds	r7, #76	; 0x4c
 8005856:	46bd      	mov	sp, r7
 8005858:	bd90      	pop	{r4, r7, pc}
 800585a:	bf00      	nop
 800585c:	08009f20 	.word	0x08009f20
 8005860:	08009f60 	.word	0x08009f60

08005864 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 800586a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800586e:	f7ff f954 	bl	8004b1a <LL_RCC_GetRNGClockSource>
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d108      	bne.n	800588c <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 800587a:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800587e:	f7ff f95c 	bl	8004b3a <LL_RCC_GetCLK48ClockSource>
 8005882:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588a:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 800588c:	687b      	ldr	r3, [r7, #4]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800589a:	f7fe ff76 	bl	800478a <LL_RCC_MSI_EnablePLLMode>
}
 800589e:	bf00      	nop
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80058ae:	f7ff fa07 	bl	8004cc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058b2:	f7fc fe07 	bl	80024c4 <HAL_GetTick>
 80058b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058b8:	e009      	b.n	80058ce <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ba:	f7fc fe03 	bl	80024c4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d902      	bls.n	80058ce <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	73fb      	strb	r3, [r7, #15]
      break;
 80058cc:	e004      	b.n	80058d8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80058ce:	f7ff fa06 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f0      	bne.n	80058ba <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d137      	bne.n	800594e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f2:	4313      	orrs	r3, r2
 80058f4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005908:	4313      	orrs	r3, r2
 800590a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800590c:	f7ff f9c9 	bl	8004ca2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005910:	f7fc fdd8 	bl	80024c4 <HAL_GetTick>
 8005914:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005916:	e009      	b.n	800592c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005918:	f7fc fdd4 	bl	80024c4 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d902      	bls.n	800592c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	73fb      	strb	r3, [r7, #15]
        break;
 800592a:	e004      	b.n	8005936 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800592c:	f7ff f9d7 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 8005930:	4603      	mov	r3, r0
 8005932:	2b01      	cmp	r3, #1
 8005934:	d1f0      	bne.n	8005918 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d108      	bne.n	800594e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800594a:	4313      	orrs	r3, r2
 800594c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005964:	f7ff f9ac 	bl	8004cc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005968:	f7fc fdac 	bl	80024c4 <HAL_GetTick>
 800596c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800596e:	e009      	b.n	8005984 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005970:	f7fc fda8 	bl	80024c4 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d902      	bls.n	8005984 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	73fb      	strb	r3, [r7, #15]
      break;
 8005982:	e004      	b.n	800598e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005984:	f7ff f9ab 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d137      	bne.n	8005a04 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059a8:	4313      	orrs	r3, r2
 80059aa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059be:	4313      	orrs	r3, r2
 80059c0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80059c2:	f7ff f96e 	bl	8004ca2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c6:	f7fc fd7d 	bl	80024c4 <HAL_GetTick>
 80059ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059cc:	e009      	b.n	80059e2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ce:	f7fc fd79 	bl	80024c4 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d902      	bls.n	80059e2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	73fb      	strb	r3, [r7, #15]
        break;
 80059e0:	e004      	b.n	80059ec <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059e2:	f7ff f97c 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d1f0      	bne.n	80059ce <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d108      	bne.n	8005a04 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a00:	4313      	orrs	r3, r2
 8005a02:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a1a:	f7ff f951 	bl	8004cc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a1e:	f7fc fd51 	bl	80024c4 <HAL_GetTick>
 8005a22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a24:	e009      	b.n	8005a3a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a26:	f7fc fd4d 	bl	80024c4 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d902      	bls.n	8005a3a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	73fb      	strb	r3, [r7, #15]
      break;
 8005a38:	e004      	b.n	8005a44 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a3a:	f7ff f950 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f0      	bne.n	8005a26 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d137      	bne.n	8005aba <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a74:	4313      	orrs	r3, r2
 8005a76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a78:	f7ff f913 	bl	8004ca2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7c:	f7fc fd22 	bl	80024c4 <HAL_GetTick>
 8005a80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a82:	e009      	b.n	8005a98 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a84:	f7fc fd1e 	bl	80024c4 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d902      	bls.n	8005a98 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	73fb      	strb	r3, [r7, #15]
        break;
 8005a96:	e004      	b.n	8005aa2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a98:	f7ff f921 	bl	8004cde <LL_RCC_PLLSAI1_IsReady>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d1f0      	bne.n	8005a84 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d108      	bne.n	8005aba <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005aca:	f7ff f94b 	bl	8004d64 <LL_RCC_PLL_GetMainSource>
 8005ace:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d017      	beq.n	8005b06 <RCC_PLL_GetFreqDomain_P+0x42>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d81f      	bhi.n	8005b1c <RCC_PLL_GetFreqDomain_P+0x58>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d003      	beq.n	8005aea <RCC_PLL_GetFreqDomain_P+0x26>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d00b      	beq.n	8005b00 <RCC_PLL_GetFreqDomain_P+0x3c>
 8005ae8:	e018      	b.n	8005b1c <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005aea:	f7fe fe5d 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005aee:	4603      	mov	r3, r0
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8005af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afc:	607b      	str	r3, [r7, #4]
      break;
 8005afe:	e018      	b.n	8005b32 <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8005b02:	607b      	str	r3, [r7, #4]
      break;
 8005b04:	e015      	b.n	8005b32 <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b06:	f7fe fd9f 	bl	8004648 <LL_RCC_HSE_IsEnabledDiv2>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d102      	bne.n	8005b16 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005b10:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8005b12:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005b14:	e00d      	b.n	8005b32 <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8005b16:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <RCC_PLL_GetFreqDomain_P+0xa8>)
 8005b18:	607b      	str	r3, [r7, #4]
      break;
 8005b1a:	e00a      	b.n	8005b32 <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b1c:	f7fe fe44 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005b20:	4603      	mov	r3, r0
 8005b22:	091b      	lsrs	r3, r3, #4
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	4a0e      	ldr	r2, [pc, #56]	; (8005b64 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8005b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2e:	607b      	str	r3, [r7, #4]
      break;
 8005b30:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005b32:	f7ff f885 	bl	8004c40 <LL_RCC_PLL_GetN>
 8005b36:	4602      	mov	r2, r0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	fb03 f402 	mul.w	r4, r3, r2
 8005b3e:	f7ff f8a4 	bl	8004c8a <LL_RCC_PLL_GetDivider>
 8005b42:	4603      	mov	r3, r0
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	3301      	adds	r3, #1
 8005b48:	fbb4 f4f3 	udiv	r4, r4, r3
 8005b4c:	f7ff f885 	bl	8004c5a <LL_RCC_PLL_GetP>
 8005b50:	4603      	mov	r3, r0
 8005b52:	0c5b      	lsrs	r3, r3, #17
 8005b54:	3301      	adds	r3, #1
 8005b56:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd90      	pop	{r4, r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08009f20 	.word	0x08009f20
 8005b68:	00f42400 	.word	0x00f42400
 8005b6c:	01e84800 	.word	0x01e84800

08005b70 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005b76:	f7ff f8f5 	bl	8004d64 <LL_RCC_PLL_GetMainSource>
 8005b7a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d017      	beq.n	8005bb2 <RCC_PLL_GetFreqDomain_Q+0x42>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d81f      	bhi.n	8005bc8 <RCC_PLL_GetFreqDomain_Q+0x58>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d003      	beq.n	8005b96 <RCC_PLL_GetFreqDomain_Q+0x26>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d00b      	beq.n	8005bac <RCC_PLL_GetFreqDomain_Q+0x3c>
 8005b94:	e018      	b.n	8005bc8 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b96:	f7fe fe07 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	; (8005c10 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8005ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba8:	607b      	str	r3, [r7, #4]
      break;
 8005baa:	e018      	b.n	8005bde <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005bac:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8005bae:	607b      	str	r3, [r7, #4]
      break;
 8005bb0:	e015      	b.n	8005bde <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005bb2:	f7fe fd49 	bl	8004648 <LL_RCC_HSE_IsEnabledDiv2>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d102      	bne.n	8005bc2 <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005bbc:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8005bbe:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8005bc0:	e00d      	b.n	8005bde <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8005bc4:	607b      	str	r3, [r7, #4]
      break;
 8005bc6:	e00a      	b.n	8005bde <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005bc8:	f7fe fdee 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8005bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bda:	607b      	str	r3, [r7, #4]
      break;
 8005bdc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005bde:	f7ff f82f 	bl	8004c40 <LL_RCC_PLL_GetN>
 8005be2:	4602      	mov	r2, r0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	fb03 f402 	mul.w	r4, r3, r2
 8005bea:	f7ff f84e 	bl	8004c8a <LL_RCC_PLL_GetDivider>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	fbb4 f4f3 	udiv	r4, r4, r3
 8005bf8:	f7ff f83b 	bl	8004c72 <LL_RCC_PLL_GetQ>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	0e5b      	lsrs	r3, r3, #25
 8005c00:	3301      	adds	r3, #1
 8005c02:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd90      	pop	{r4, r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	08009f20 	.word	0x08009f20
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	01e84800 	.word	0x01e84800

08005c1c <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8005c1c:	b590      	push	{r4, r7, lr}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005c22:	f7ff f89f 	bl	8004d64 <LL_RCC_PLL_GetMainSource>
 8005c26:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d017      	beq.n	8005c5e <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d81f      	bhi.n	8005c74 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d003      	beq.n	8005c42 <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d00b      	beq.n	8005c58 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8005c40:	e018      	b.n	8005c74 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c42:	f7fe fdb1 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005c46:	4603      	mov	r3, r0
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	4a1b      	ldr	r2, [pc, #108]	; (8005cbc <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8005c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c54:	607b      	str	r3, [r7, #4]
      break;
 8005c56:	e018      	b.n	8005c8a <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005c58:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8005c5a:	607b      	str	r3, [r7, #4]
      break;
 8005c5c:	e015      	b.n	8005c8a <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c5e:	f7fe fcf3 	bl	8004648 <LL_RCC_HSE_IsEnabledDiv2>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d102      	bne.n	8005c6e <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005c68:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8005c6a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005c6c:	e00d      	b.n	8005c8a <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8005c70:	607b      	str	r3, [r7, #4]
      break;
 8005c72:	e00a      	b.n	8005c8a <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c74:	f7fe fd98 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	4a0e      	ldr	r2, [pc, #56]	; (8005cbc <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8005c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c86:	607b      	str	r3, [r7, #4]
      break;
 8005c88:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c8a:	f7ff f83a 	bl	8004d02 <LL_RCC_PLLSAI1_GetN>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	fb03 f402 	mul.w	r4, r3, r2
 8005c96:	f7fe fff8 	bl	8004c8a <LL_RCC_PLL_GetDivider>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	fbb4 f4f3 	udiv	r4, r4, r3
 8005ca4:	f7ff f852 	bl	8004d4c <LL_RCC_PLLSAI1_GetR>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	0f5b      	lsrs	r3, r3, #29
 8005cac:	3301      	adds	r3, #1
 8005cae:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	08009f20 	.word	0x08009f20
 8005cc0:	00f42400 	.word	0x00f42400
 8005cc4:	01e84800 	.word	0x01e84800

08005cc8 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005cce:	f7ff f849 	bl	8004d64 <LL_RCC_PLL_GetMainSource>
 8005cd2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d017      	beq.n	8005d0a <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d81f      	bhi.n	8005d20 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d003      	beq.n	8005cee <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d00b      	beq.n	8005d04 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8005cec:	e018      	b.n	8005d20 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005cee:	f7fe fd5b 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	4a1b      	ldr	r2, [pc, #108]	; (8005d68 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8005cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d00:	607b      	str	r3, [r7, #4]
      break;
 8005d02:	e018      	b.n	8005d36 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005d04:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8005d06:	607b      	str	r3, [r7, #4]
      break;
 8005d08:	e015      	b.n	8005d36 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d0a:	f7fe fc9d 	bl	8004648 <LL_RCC_HSE_IsEnabledDiv2>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d102      	bne.n	8005d1a <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8005d16:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005d18:	e00d      	b.n	8005d36 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8005d1c:	607b      	str	r3, [r7, #4]
      break;
 8005d1e:	e00a      	b.n	8005d36 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d20:	f7fe fd42 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005d24:	4603      	mov	r3, r0
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	4a0e      	ldr	r2, [pc, #56]	; (8005d68 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8005d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d32:	607b      	str	r3, [r7, #4]
      break;
 8005d34:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d36:	f7fe ffe4 	bl	8004d02 <LL_RCC_PLLSAI1_GetN>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	fb03 f402 	mul.w	r4, r3, r2
 8005d42:	f7fe ffa2 	bl	8004c8a <LL_RCC_PLL_GetDivider>
 8005d46:	4603      	mov	r3, r0
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005d50:	f7fe ffe4 	bl	8004d1c <LL_RCC_PLLSAI1_GetP>
 8005d54:	4603      	mov	r3, r0
 8005d56:	0c5b      	lsrs	r3, r3, #17
 8005d58:	3301      	adds	r3, #1
 8005d5a:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	08009f20 	.word	0x08009f20
 8005d6c:	00f42400 	.word	0x00f42400
 8005d70:	01e84800 	.word	0x01e84800

08005d74 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005d7a:	f7fe fff3 	bl	8004d64 <LL_RCC_PLL_GetMainSource>
 8005d7e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d017      	beq.n	8005db6 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d81f      	bhi.n	8005dcc <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d003      	beq.n	8005d9a <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d00b      	beq.n	8005db0 <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8005d98:	e018      	b.n	8005dcc <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d9a:	f7fe fd05 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8005da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dac:	607b      	str	r3, [r7, #4]
      break;
 8005dae:	e018      	b.n	8005de2 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005db0:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8005db2:	607b      	str	r3, [r7, #4]
      break;
 8005db4:	e015      	b.n	8005de2 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005db6:	f7fe fc47 	bl	8004648 <LL_RCC_HSE_IsEnabledDiv2>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d102      	bne.n	8005dc6 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005dc0:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8005dc2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005dc4:	e00d      	b.n	8005de2 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8005dc6:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8005dc8:	607b      	str	r3, [r7, #4]
      break;
 8005dca:	e00a      	b.n	8005de2 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dcc:	f7fe fcec 	bl	80047a8 <LL_RCC_MSI_GetRange>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	091b      	lsrs	r3, r3, #4
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	4a0e      	ldr	r2, [pc, #56]	; (8005e14 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8005dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dde:	607b      	str	r3, [r7, #4]
      break;
 8005de0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005de2:	f7fe ff8e 	bl	8004d02 <LL_RCC_PLLSAI1_GetN>
 8005de6:	4602      	mov	r2, r0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	fb03 f402 	mul.w	r4, r3, r2
 8005dee:	f7fe ff4c 	bl	8004c8a <LL_RCC_PLL_GetDivider>
 8005df2:	4603      	mov	r3, r0
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	3301      	adds	r3, #1
 8005df8:	fbb4 f4f3 	udiv	r4, r4, r3
 8005dfc:	f7fe ff9a 	bl	8004d34 <LL_RCC_PLLSAI1_GetQ>
 8005e00:	4603      	mov	r3, r0
 8005e02:	0e5b      	lsrs	r3, r3, #25
 8005e04:	3301      	adds	r3, #1
 8005e06:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd90      	pop	{r4, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	08009f20 	.word	0x08009f20
 8005e18:	00f42400 	.word	0x00f42400
 8005e1c:	01e84800 	.word	0x01e84800

08005e20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e090      	b.n	8005f54 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fb fe82 	bl	8001b50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	22ca      	movs	r2, #202	; 0xca
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2253      	movs	r2, #83	; 0x53
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fd9d 	bl	80069a4 <RTC_EnterInitMode>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	22ff      	movs	r2, #255	; 0xff
 8005e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e067      	b.n	8005f54 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e96:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6899      	ldr	r1, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	68d2      	ldr	r2, [r2, #12]
 8005ebe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6919      	ldr	r1, [r3, #16]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	041a      	lsls	r2, r3, #16
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0203 	bic.w	r2, r2, #3
 8005ef2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d113      	bne.n	8005f42 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fd1c 	bl	8006958 <HAL_RTC_WaitForSynchro>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00d      	beq.n	8005f42 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	22ff      	movs	r2, #255	; 0xff
 8005f2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2204      	movs	r2, #4
 8005f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e008      	b.n	8005f54 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005f52:	2300      	movs	r3, #0
  }
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_RTC_SetTime+0x1a>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e0b2      	b.n	80060dc <HAL_RTC_SetTime+0x180>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d126      	bne.n	8005fda <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fd27 	bl	80069f8 <RTC_ByteToBcd2>
 8005faa:	4603      	mov	r3, r0
 8005fac:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fd20 	bl	80069f8 <RTC_ByteToBcd2>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fbc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	789b      	ldrb	r3, [r3, #2]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fd18 	bl	80069f8 <RTC_ByteToBcd2>
 8005fc8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005fca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	78db      	ldrb	r3, [r3, #3]
 8005fd2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e018      	b.n	800600c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2200      	movs	r2, #0
 8005fec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ffa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006000:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	78db      	ldrb	r3, [r3, #3]
 8006006:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	22ca      	movs	r2, #202	; 0xca
 8006012:	625a      	str	r2, [r3, #36]	; 0x24
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2253      	movs	r2, #83	; 0x53
 800601a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fcc1 	bl	80069a4 <RTC_EnterInitMode>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	22ff      	movs	r2, #255	; 0xff
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2204      	movs	r2, #4
 8006034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e04b      	b.n	80060dc <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800604e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006052:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006062:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6899      	ldr	r1, [r3, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	431a      	orrs	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800608a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d113      	bne.n	80060c2 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fc5c 	bl	8006958 <HAL_RTC_WaitForSynchro>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	22ff      	movs	r2, #255	; 0xff
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2204      	movs	r2, #4
 80060b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e00c      	b.n	80060dc <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	22ff      	movs	r2, #255	; 0xff
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80060da:	2300      	movs	r3, #0
  }
}
 80060dc:	4618      	mov	r0, r3
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd90      	pop	{r4, r7, pc}

080060e4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006112:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006116:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	0c1b      	lsrs	r3, r3, #16
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006122:	b2da      	uxtb	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	0a1b      	lsrs	r3, r3, #8
 800612c:	b2db      	uxtb	r3, r3
 800612e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006140:	b2da      	uxtb	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d11a      	bne.n	8006192 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fc69 	bl	8006a38 <RTC_Bcd2ToByte>
 8006166:	4603      	mov	r3, r0
 8006168:	461a      	mov	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fc60 	bl	8006a38 <RTC_Bcd2ToByte>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	789b      	ldrb	r3, [r3, #2]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fc57 	bl	8006a38 <RTC_Bcd2ToByte>
 800618a:	4603      	mov	r3, r0
 800618c:	461a      	mov	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_RTC_SetDate+0x1a>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e09c      	b.n	80062f0 <HAL_RTC_SetDate+0x154>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10e      	bne.n	80061ea <HAL_RTC_SetDate+0x4e>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	f023 0310 	bic.w	r3, r3, #16
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	330a      	adds	r3, #10
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d11c      	bne.n	800622a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	78db      	ldrb	r3, [r3, #3]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fbff 	bl	80069f8 <RTC_ByteToBcd2>
 80061fa:	4603      	mov	r3, r0
 80061fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fbf8 	bl	80069f8 <RTC_ByteToBcd2>
 8006208:	4603      	mov	r3, r0
 800620a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800620c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	789b      	ldrb	r3, [r3, #2]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fbf0 	bl	80069f8 <RTC_ByteToBcd2>
 8006218:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800621a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	e00e      	b.n	8006248 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	78db      	ldrb	r3, [r3, #3]
 800622e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006236:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800623c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	22ca      	movs	r2, #202	; 0xca
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2253      	movs	r2, #83	; 0x53
 8006256:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fba3 	bl	80069a4 <RTC_EnterInitMode>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00d      	beq.n	8006280 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	22ff      	movs	r2, #255	; 0xff
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2204      	movs	r2, #4
 8006270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e037      	b.n	80062f0 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800628e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800629e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d113      	bne.n	80062d6 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fb52 	bl	8006958 <HAL_RTC_WaitForSynchro>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00d      	beq.n	80062d6 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	22ff      	movs	r2, #255	; 0xff
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2204      	movs	r2, #4
 80062c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e00c      	b.n	80062f0 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	22ff      	movs	r2, #255	; 0xff
 80062dc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80062ee:	2300      	movs	r3, #0
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800630e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006312:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	b2da      	uxtb	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006336:	b2da      	uxtb	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	0b5b      	lsrs	r3, r3, #13
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d11a      	bne.n	8006388 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fb6e 	bl	8006a38 <RTC_Bcd2ToByte>
 800635c:	4603      	mov	r3, r0
 800635e:	461a      	mov	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fb65 	bl	8006a38 <RTC_Bcd2ToByte>
 800636e:	4603      	mov	r3, r0
 8006370:	461a      	mov	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	789b      	ldrb	r3, [r3, #2]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fb5c 	bl	8006a38 <RTC_Bcd2ToByte>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b089      	sub	sp, #36	; 0x24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_RTC_SetAlarm_IT+0x1a>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e129      	b.n	8006602 <HAL_RTC_SetAlarm_IT+0x26e>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d137      	bne.n	8006434 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2200      	movs	r2, #0
 80063d6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fb0b 	bl	80069f8 <RTC_ByteToBcd2>
 80063e2:	4603      	mov	r3, r0
 80063e4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fb04 	bl	80069f8 <RTC_ByteToBcd2>
 80063f0:	4603      	mov	r3, r0
 80063f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80063f4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	789b      	ldrb	r3, [r3, #2]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fafc 	bl	80069f8 <RTC_ByteToBcd2>
 8006400:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006402:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	78db      	ldrb	r3, [r3, #3]
 800640a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800640c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 faee 	bl	80069f8 <RTC_ByteToBcd2>
 800641c:	4603      	mov	r3, r0
 800641e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006420:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006428:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800642e:	4313      	orrs	r3, r2
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	e023      	b.n	800647c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006454:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800645a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	78db      	ldrb	r3, [r3, #3]
 8006460:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006462:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800646a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800646c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006472:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006478:	4313      	orrs	r3, r2
 800647a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	4313      	orrs	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	22ca      	movs	r2, #202	; 0xca
 800648e:	625a      	str	r2, [r3, #36]	; 0x24
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2253      	movs	r2, #83	; 0x53
 8006496:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a0:	d14a      	bne.n	8006538 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80064c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80064c4:	f7fb fffe 	bl	80024c4 <HAL_GetTick>
 80064c8:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80064ca:	e015      	b.n	80064f8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064cc:	f7fb fffa 	bl	80024c4 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064da:	d90d      	bls.n	80064f8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	22ff      	movs	r2, #255	; 0xff
 80064e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2203      	movs	r2, #3
 80064e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e084      	b.n	8006602 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0e2      	beq.n	80064cc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006524:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006534:	609a      	str	r2, [r3, #8]
 8006536:	e049      	b.n	80065cc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006546:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006558:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800655a:	f7fb ffb3 	bl	80024c4 <HAL_GetTick>
 800655e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006560:	e015      	b.n	800658e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006562:	f7fb ffaf 	bl	80024c4 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006570:	d90d      	bls.n	800658e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	22ff      	movs	r2, #255	; 0xff
 8006578:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2203      	movs	r2, #3
 800657e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e039      	b.n	8006602 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0e2      	beq.n	8006562 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ca:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80065cc:	4b0f      	ldr	r3, [pc, #60]	; (800660c <HAL_RTC_SetAlarm_IT+0x278>)
 80065ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d2:	4a0e      	ldr	r2, [pc, #56]	; (800660c <HAL_RTC_SetAlarm_IT+0x278>)
 80065d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <HAL_RTC_SetAlarm_IT+0x278>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <HAL_RTC_SetAlarm_IT+0x278>)
 80065e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065e6:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	22ff      	movs	r2, #255	; 0xff
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3724      	adds	r7, #36	; 0x24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd90      	pop	{r4, r7, pc}
 800660a:	bf00      	nop
 800660c:	58000800 	.word	0x58000800

08006610 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_RTC_DeactivateAlarm+0x18>
 8006624:	2302      	movs	r3, #2
 8006626:	e083      	b.n	8006730 <HAL_RTC_DeactivateAlarm+0x120>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	22ca      	movs	r2, #202	; 0xca
 800663e:	625a      	str	r2, [r3, #36]	; 0x24
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2253      	movs	r2, #83	; 0x53
 8006646:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664e:	d131      	bne.n	80066b4 <HAL_RTC_DeactivateAlarm+0xa4>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800665e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800666e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006670:	f7fb ff28 	bl	80024c4 <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006676:	e015      	b.n	80066a4 <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006678:	f7fb ff24 	bl	80024c4 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006686:	d90d      	bls.n	80066a4 <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2203      	movs	r2, #3
 8006694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e045      	b.n	8006730 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0e2      	beq.n	8006678 <HAL_RTC_DeactivateAlarm+0x68>
 80066b2:	e030      	b.n	8006716 <HAL_RTC_DeactivateAlarm+0x106>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066c2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80066d4:	f7fb fef6 	bl	80024c4 <HAL_GetTick>
 80066d8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80066da:	e015      	b.n	8006708 <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066dc:	f7fb fef2 	bl	80024c4 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ea:	d90d      	bls.n	8006708 <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	22ff      	movs	r2, #255	; 0xff
 80066f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2203      	movs	r2, #3
 80066f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e013      	b.n	8006730 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0e2      	beq.n	80066dc <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	22ff      	movs	r2, #255	; 0xff
 800671c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674c:	d143      	bne.n	80067d6 <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006764:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006768:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	b2db      	uxtb	r3, r3
 8006770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006774:	b2da      	uxtb	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006784:	b2da      	uxtb	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006792:	b2da      	uxtb	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	0e1b      	lsrs	r3, r3, #24
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	615a      	str	r2, [r3, #20]
 80067d4:	e042      	b.n	800685c <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80067f0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> 16U);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> 8U);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	0a1b      	lsrs	r3, r3, #8
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)(tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU));
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681a:	b2da      	uxtb	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> 16U);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	b2da      	uxtb	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	0e1b      	lsrs	r3, r3, #24
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006840:	b2da      	uxtb	r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d125      	bne.n	80068ae <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f8e6 	bl	8006a38 <RTC_Bcd2ToByte>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	785b      	ldrb	r3, [r3, #1]
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f8dd 	bl	8006a38 <RTC_Bcd2ToByte>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	789b      	ldrb	r3, [r3, #2]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 f8d4 	bl	8006a38 <RTC_Bcd2ToByte>
 8006890:	4603      	mov	r3, r0
 8006892:	461a      	mov	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f8ca 	bl	8006a38 <RTC_Bcd2ToByte>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d012      	beq.n	80068f4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f831 	bl	8006944 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80068f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d012      	beq.n	8006928 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f8ad 	bl	8006a70 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	b2da      	uxtb	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006926:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <HAL_RTC_AlarmIRQHandler+0x88>)
 800692a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800692e:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	58000800 	.word	0x58000800

08006944 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800696e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006970:	f7fb fda8 	bl	80024c4 <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006976:	e009      	b.n	800698c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006978:	f7fb fda4 	bl	80024c4 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006986:	d901      	bls.n	800698c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e007      	b.n	800699c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0ee      	beq.n	8006978 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d119      	bne.n	80069ee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f04f 32ff 	mov.w	r2, #4294967295
 80069c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80069c4:	f7fb fd7e 	bl	80024c4 <HAL_GetTick>
 80069c8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069ca:	e009      	b.n	80069e0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80069cc:	f7fb fd7a 	bl	80024c4 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069da:	d901      	bls.n	80069e0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e007      	b.n	80069f0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0ee      	beq.n	80069cc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006a0a:	e005      	b.n	8006a18 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	3b0a      	subs	r3, #10
 8006a16:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006a18:	7afb      	ldrb	r3, [r7, #11]
 8006a1a:	2b09      	cmp	r3, #9
 8006a1c:	d8f6      	bhi.n	8006a0c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b2db      	uxtb	r3, r3
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	091b      	lsrs	r3, r3, #4
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	b2db      	uxtb	r3, r3
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d904      	bls.n	8006aa2 <HAL_SAI_InitProtocol+0x1e>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	3b03      	subs	r3, #3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d812      	bhi.n	8006ac6 <HAL_SAI_InitProtocol+0x42>
 8006aa0:	e008      	b.n	8006ab4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fa83 	bl	8006fb4 <SAI_InitI2S>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab2:	e00b      	b.n	8006acc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fb2c 	bl	8007118 <SAI_InitPCM>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac4:	e002      	b.n	8006acc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aca:	bf00      	nop
  }

  if (status == HAL_OK)
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f808 	bl	8006ae8 <HAL_SAI_Init>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e17c      	b.n	8006df4 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d10e      	bne.n	8006b22 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a5c      	ldr	r2, [pc, #368]	; (8006c7c <HAL_SAI_Init+0x194>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d107      	bne.n	8006b1e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d103      	bne.n	8006b1e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e168      	b.n	8006df4 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fb f890 	bl	8001c5c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fba5 	bl	800728c <SAI_Disable>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e153      	b.n	8006df4 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_SAI_Init+0x7a>
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d003      	beq.n	8006b68 <HAL_SAI_Init+0x80>
 8006b60:	e006      	b.n	8006b70 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	61bb      	str	r3, [r7, #24]
      break;
 8006b66:	e006      	b.n	8006b76 <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b6c:	61bb      	str	r3, [r7, #24]
      break;
 8006b6e:	e002      	b.n	8006b76 <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61bb      	str	r3, [r7, #24]
      break;
 8006b74:	bf00      	nop
  }

  SAI1->GCR = 0;
 8006b76:	4b42      	ldr	r3, [pc, #264]	; (8006c80 <HAL_SAI_Init+0x198>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d062      	beq.n	8006c4a <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b84:	2040      	movs	r0, #64	; 0x40
 8006b86:	f7fe fa6f 	bl	8005068 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b8a:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b94:	d120      	bne.n	8006bd8 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d102      	bne.n	8006ba4 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006b9e:	2340      	movs	r3, #64	; 0x40
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	e00a      	b.n	8006bba <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	d103      	bne.n	8006bb4 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	e002      	b.n	8006bba <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	fb02 f303 	mul.w	r3, r2, r3
 8006bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	e017      	b.n	8006c08 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006be0:	d101      	bne.n	8006be6 <HAL_SAI_Init+0xfe>
 8006be2:	2302      	movs	r3, #2
 8006be4:	e000      	b.n	8006be8 <HAL_SAI_Init+0x100>
 8006be6:	2301      	movs	r3, #1
 8006be8:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	fb02 f303 	mul.w	r3, r2, r3
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c06:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	4a1e      	ldr	r2, [pc, #120]	; (8006c84 <HAL_SAI_Init+0x19c>)
 8006c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c10:	08da      	lsrs	r2, r3, #3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006c16:	6979      	ldr	r1, [r7, #20]
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <HAL_SAI_Init+0x19c>)
 8006c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c1e:	08da      	lsrs	r2, r3, #3
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	1aca      	subs	r2, r1, r3
 8006c2a:	2a08      	cmp	r2, #8
 8006c2c:	d904      	bls.n	8006c38 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d104      	bne.n	8006c4a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	085a      	lsrs	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_SAI_Init+0x172>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d109      	bne.n	8006c6e <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_SAI_Init+0x17e>
 8006c62:	2300      	movs	r3, #0
 8006c64:	e001      	b.n	8006c6a <HAL_SAI_Init+0x182>
 8006c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	e00e      	b.n	8006c8c <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d108      	bne.n	8006c88 <HAL_SAI_Init+0x1a0>
 8006c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7a:	e006      	b.n	8006c8a <HAL_SAI_Init+0x1a2>
 8006c7c:	40015404 	.word	0x40015404
 8006c80:	40015400 	.word	0x40015400
 8006c84:	cccccccd 	.word	0xcccccccd
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6819      	ldr	r1, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b59      	ldr	r3, [pc, #356]	; (8006dfc <HAL_SAI_Init+0x314>)
 8006c98:	400b      	ands	r3, r1
 8006c9a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6819      	ldr	r1, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cb0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006cc4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cd0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	051b      	lsls	r3, r3, #20
 8006cd8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006cde:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006cfc:	f023 030f 	bic.w	r3, r3, #15
 8006d00:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6859      	ldr	r1, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	69da      	ldr	r2, [r3, #28]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6899      	ldr	r1, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b35      	ldr	r3, [pc, #212]	; (8006e00 <HAL_SAI_Init+0x318>)
 8006d2c:	400b      	ands	r3, r1
 8006d2e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6899      	ldr	r1, [r3, #8]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d40:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006d46:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006d4c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d52:	3b01      	subs	r3, #1
 8006d54:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006d56:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006d6e:	400b      	ands	r3, r1
 8006d70:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68d9      	ldr	r1, [r3, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d80:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d86:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d88:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <HAL_SAI_Init+0x31c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d119      	bne.n	8006dda <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006da6:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <HAL_SAI_Init+0x320>)
 8006da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006daa:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <HAL_SAI_Init+0x320>)
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d10e      	bne.n	8006dda <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006dc8:	490f      	ldr	r1, [pc, #60]	; (8006e08 <HAL_SAI_Init+0x320>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006dce:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <HAL_SAI_Init+0x320>)
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	4a0d      	ldr	r2, [pc, #52]	; (8006e08 <HAL_SAI_Init+0x320>)
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	f005c010 	.word	0xf005c010
 8006e00:	fff88000 	.word	0xfff88000
 8006e04:	40015404 	.word	0x40015404
 8006e08:	40015400 	.word	0x40015400

08006e0c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8006e1a:	f7fb fb53 	bl	80024c4 <HAL_GetTick>
 8006e1e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_SAI_Transmit_DMA+0x20>
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e098      	b.n	8006f62 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	f040 8091 	bne.w	8006f60 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_SAI_Transmit_DMA+0x40>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e08a      	b.n	8006f62 <HAL_SAI_Transmit_DMA+0x156>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	88fa      	ldrh	r2, [r7, #6]
 8006e5e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	88fa      	ldrh	r2, [r7, #6]
 8006e66:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2212      	movs	r2, #18
 8006e76:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e80:	4a3a      	ldr	r2, [pc, #232]	; (8006f6c <HAL_SAI_Transmit_DMA+0x160>)
 8006e82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e8a:	4a39      	ldr	r2, [pc, #228]	; (8006f70 <HAL_SAI_Transmit_DMA+0x164>)
 8006e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e94:	4a37      	ldr	r2, [pc, #220]	; (8006f74 <HAL_SAI_Transmit_DMA+0x168>)
 8006e96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eac:	4619      	mov	r1, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	331c      	adds	r3, #28
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006ebc:	f7fb fcf6 	bl	80028ac <HAL_DMA_Start_IT>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e047      	b.n	8006f62 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f9a1 	bl	800721c <SAI_InterruptFlag>
 8006eda:	4601      	mov	r1, r0
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006ef8:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006efa:	e015      	b.n	8006f28 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006efc:	f7fb fae2 	bl	80024c4 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0a:	d90d      	bls.n	8006f28 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e01c      	b.n	8006f62 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0e2      	beq.n	8006efc <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006f52:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e000      	b.n	8006f62 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800735f 	.word	0x0800735f
 8006f70:	08007301 	.word	0x08007301
 8006f74:	0800737b 	.word	0x0800737b

08006f78 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <SAI_InitI2S+0x2e>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d103      	bne.n	8006fea <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	651a      	str	r2, [r3, #80]	; 0x50
 8006fe8:	e002      	b.n	8006ff0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ffe:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e077      	b.n	800710a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d107      	bne.n	8007030 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800702c:	665a      	str	r2, [r3, #100]	; 0x64
 800702e:	e006      	b.n	800703e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007036:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	665a      	str	r2, [r3, #100]	; 0x64
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d84f      	bhi.n	80070e4 <SAI_InitI2S+0x130>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <SAI_InitI2S+0x98>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	0800705d 	.word	0x0800705d
 8007050:	0800707f 	.word	0x0800707f
 8007054:	080070a1 	.word	0x080070a1
 8007058:	080070c3 	.word	0x080070c3

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2280      	movs	r2, #128	; 0x80
 8007060:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	085b      	lsrs	r3, r3, #1
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	085b      	lsrs	r3, r3, #1
 8007070:	011a      	lsls	r2, r3, #4
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2240      	movs	r2, #64	; 0x40
 800707a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800707c:	e035      	b.n	80070ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2280      	movs	r2, #128	; 0x80
 8007082:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	019a      	lsls	r2, r3, #6
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2280      	movs	r2, #128	; 0x80
 800709c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800709e:	e024      	b.n	80070ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	22c0      	movs	r2, #192	; 0xc0
 80070a4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	019a      	lsls	r2, r3, #6
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2280      	movs	r2, #128	; 0x80
 80070be:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80070c0:	e013      	b.n	80070ea <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	22e0      	movs	r2, #224	; 0xe0
 80070c6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	019a      	lsls	r2, r3, #6
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2280      	movs	r2, #128	; 0x80
 80070e0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80070e2:	e002      	b.n	80070ea <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d10b      	bne.n	8007108 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d102      	bne.n	80070fc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2210      	movs	r2, #16
 80070fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d102      	bne.n	8007108 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2208      	movs	r2, #8
 8007106:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
}
 800710a:	4618      	mov	r0, r3
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <SAI_InitPCM+0x2e>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d103      	bne.n	800714e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	651a      	str	r2, [r3, #80]	; 0x50
 800714c:	e002      	b.n	8007154 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007160:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007168:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800717c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b04      	cmp	r3, #4
 8007182:	d103      	bne.n	800718c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	659a      	str	r2, [r3, #88]	; 0x58
 800718a:	e002      	b.n	8007192 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	220d      	movs	r2, #13
 8007190:	659a      	str	r2, [r3, #88]	; 0x58
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d837      	bhi.n	8007208 <SAI_InitPCM+0xf0>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <SAI_InitPCM+0x88>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071c7 	.word	0x080071c7
 80071a8:	080071dd 	.word	0x080071dd
 80071ac:	080071f3 	.word	0x080071f3
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2280      	movs	r2, #128	; 0x80
 80071b4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	011a      	lsls	r2, r3, #4
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2240      	movs	r2, #64	; 0x40
 80071c2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80071c4:	e023      	b.n	800720e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2280      	movs	r2, #128	; 0x80
 80071ca:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2280      	movs	r2, #128	; 0x80
 80071d8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80071da:	e018      	b.n	800720e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	22c0      	movs	r2, #192	; 0xc0
 80071e0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2280      	movs	r2, #128	; 0x80
 80071ee:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80071f0:	e00d      	b.n	800720e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	22e0      	movs	r2, #224	; 0xe0
 80071f6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2280      	movs	r2, #128	; 0x80
 8007204:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007206:	e002      	b.n	800720e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	75fb      	strb	r3, [r7, #23]
      break;
 800720c:	bf00      	nop
  }

  return status;
 800720e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007210:	4618      	mov	r0, r3
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007228:	2301      	movs	r3, #1
 800722a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d103      	bne.n	800723a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f043 0308 	orr.w	r3, r3, #8
 8007238:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	2b08      	cmp	r3, #8
 8007240:	d10b      	bne.n	800725a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007246:	2b03      	cmp	r3, #3
 8007248:	d003      	beq.n	8007252 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d103      	bne.n	800725a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f043 0310 	orr.w	r3, r3, #16
 8007258:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b03      	cmp	r3, #3
 8007260:	d003      	beq.n	800726a <SAI_InterruptFlag+0x4e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d104      	bne.n	8007274 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e003      	b.n	800727c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f043 0304 	orr.w	r3, r3, #4
 800727a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800727c:	68fb      	ldr	r3, [r7, #12]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007294:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <SAI_Disable+0x6c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a18      	ldr	r2, [pc, #96]	; (80072fc <SAI_Disable+0x70>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	0b1b      	lsrs	r3, r3, #12
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072b6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	72fb      	strb	r3, [r7, #11]
      break;
 80072d2:	e009      	b.n	80072e8 <SAI_Disable+0x5c>
    }
    count--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e7      	bne.n	80072b8 <SAI_Disable+0x2c>

  return status;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	20000004 	.word	0x20000004
 80072fc:	95cbec1b 	.word	0x95cbec1b

08007300 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	2b20      	cmp	r3, #32
 8007314:	d01c      	beq.n	8007350 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800732c:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800732e:	2100      	movs	r1, #0
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff ff73 	bl	800721c <SAI_InterruptFlag>
 8007336:	4603      	mov	r3, r0
 8007338:	43d9      	mvns	r1, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	400a      	ands	r2, r1
 8007346:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fe11 	bl	8006f78 <HAL_SAI_TxCpltCallback>
#endif
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fe0d 	bl	8006f8c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800738e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80073a6:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff ff6f 	bl	800728c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff fdee 	bl	8006fa0 <HAL_SAI_ErrorCallback>
#endif
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e097      	b.n	8007510 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fa fe45 	bl	8002084 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2202      	movs	r2, #2
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007410:	f023 0307 	bic.w	r3, r3, #7
 8007414:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3304      	adds	r3, #4
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f000 f907 	bl	8007634 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	4313      	orrs	r3, r2
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800746c:	f023 030c 	bic.w	r3, r3, #12
 8007470:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800747c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	4313      	orrs	r3, r2
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	011a      	lsls	r2, r3, #4
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	031b      	lsls	r3, r3, #12
 800749c:	4313      	orrs	r3, r2
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80074aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80074b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	4313      	orrs	r3, r2
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007528:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007530:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007538:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007540:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d110      	bne.n	800756a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d102      	bne.n	8007554 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800754e:	7b7b      	ldrb	r3, [r7, #13]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d001      	beq.n	8007558 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e069      	b.n	800762c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007568:	e031      	b.n	80075ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b04      	cmp	r3, #4
 800756e:	d110      	bne.n	8007592 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d102      	bne.n	800757c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007576:	7b3b      	ldrb	r3, [r7, #12]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d001      	beq.n	8007580 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e055      	b.n	800762c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007590:	e01d      	b.n	80075ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d108      	bne.n	80075aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d105      	bne.n	80075aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800759e:	7b7b      	ldrb	r3, [r7, #13]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d102      	bne.n	80075aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075a4:	7b3b      	ldrb	r3, [r7, #12]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d001      	beq.n	80075ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e03e      	b.n	800762c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2202      	movs	r2, #2
 80075b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_TIM_Encoder_Start+0xc4>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d008      	beq.n	80075ec <HAL_TIM_Encoder_Start+0xd4>
 80075da:	e00f      	b.n	80075fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2201      	movs	r2, #1
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f889 	bl	80076fc <TIM_CCxChannelCmd>
      break;
 80075ea:	e016      	b.n	800761a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2201      	movs	r2, #1
 80075f2:	2104      	movs	r1, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f881 	bl	80076fc <TIM_CCxChannelCmd>
      break;
 80075fa:	e00e      	b.n	800761a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2201      	movs	r2, #1
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f000 f879 	bl	80076fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2201      	movs	r2, #1
 8007610:	2104      	movs	r1, #4
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f872 	bl	80076fc <TIM_CCxChannelCmd>
      break;
 8007618:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0201 	orr.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a2a      	ldr	r2, [pc, #168]	; (80076f0 <TIM_Base_SetConfig+0xbc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_Base_SetConfig+0x20>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007652:	d108      	bne.n	8007666 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a21      	ldr	r2, [pc, #132]	; (80076f0 <TIM_Base_SetConfig+0xbc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00b      	beq.n	8007686 <TIM_Base_SetConfig+0x52>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007674:	d007      	beq.n	8007686 <TIM_Base_SetConfig+0x52>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <TIM_Base_SetConfig+0xc0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d003      	beq.n	8007686 <TIM_Base_SetConfig+0x52>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <TIM_Base_SetConfig+0xc4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d108      	bne.n	8007698 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800768c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a0c      	ldr	r2, [pc, #48]	; (80076f0 <TIM_Base_SetConfig+0xbc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d007      	beq.n	80076d4 <TIM_Base_SetConfig+0xa0>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a0b      	ldr	r2, [pc, #44]	; (80076f4 <TIM_Base_SetConfig+0xc0>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_Base_SetConfig+0xa0>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a0a      	ldr	r2, [pc, #40]	; (80076f8 <TIM_Base_SetConfig+0xc4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d103      	bne.n	80076dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	615a      	str	r2, [r3, #20]
}
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40014400 	.word	0x40014400
 80076f8:	40014800 	.word	0x40014800

080076fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	2201      	movs	r2, #1
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a1a      	ldr	r2, [r3, #32]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	43db      	mvns	r3, r3
 800771e:	401a      	ands	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	fa01 f303 	lsl.w	r3, r1, r3
 8007734:	431a      	orrs	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	621a      	str	r2, [r3, #32]
}
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800775c:	2302      	movs	r3, #2
 800775e:	e04a      	b.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a1f      	ldr	r2, [pc, #124]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d108      	bne.n	800779c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007790:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a12      	ldr	r2, [pc, #72]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c8:	d10c      	bne.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00

08007808 <LL_RCC_GetUSARTClockSource>:
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007814:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4013      	ands	r3, r2
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <LL_RCC_GetLPUARTClockSource>:
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007834:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4013      	ands	r3, r2
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e042      	b.n	80078e0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fa fcb3 	bl	80021d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2224      	movs	r2, #36	; 0x24
 8007876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0201 	bic.w	r2, r2, #1
 8007888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f952 	bl	8007b34 <UART_SetConfig>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e022      	b.n	80078e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb4c 	bl	8007f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fbd3 	bl	8008084 <UART_CheckIdleState>
 80078de:	4603      	mov	r3, r0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	; 0x28
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fe:	2b20      	cmp	r3, #32
 8007900:	f040 8083 	bne.w	8007a0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_UART_Transmit+0x28>
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e07b      	b.n	8007a0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_UART_Transmit+0x3a>
 800791e:	2302      	movs	r3, #2
 8007920:	e074      	b.n	8007a0c <HAL_UART_Transmit+0x124>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2221      	movs	r2, #33	; 0x21
 8007936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800793a:	f7fa fdc3 	bl	80024c4 <HAL_GetTick>
 800793e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007958:	d108      	bne.n	800796c <HAL_UART_Transmit+0x84>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	e003      	b.n	8007974 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800797c:	e02c      	b.n	80079d8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2200      	movs	r2, #0
 8007986:	2180      	movs	r1, #128	; 0x80
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fbc6 	bl	800811a <UART_WaitOnFlagUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e039      	b.n	8007a0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	3302      	adds	r3, #2
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	e007      	b.n	80079c6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	781a      	ldrb	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	3301      	adds	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1cc      	bne.n	800797e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2200      	movs	r2, #0
 80079ec:	2140      	movs	r1, #64	; 0x40
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 fb93 	bl	800811a <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e006      	b.n	8007a0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b094      	sub	sp, #80	; 0x50
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e6      	bne.n	8007a1c <HAL_UART_AbortTransmit+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e5      	bne.n	8007a4e <HAL_UART_AbortTransmit+0x3a>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8c:	2b80      	cmp	r3, #128	; 0x80
 8007a8e:	d137      	bne.n	8007b00 <HAL_UART_AbortTransmit+0xec>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ab0:	61ba      	str	r2, [r7, #24]
 8007ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6979      	ldr	r1, [r7, #20]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	613b      	str	r3, [r7, #16]
   return(result);
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e5      	bne.n	8007a90 <HAL_UART_AbortTransmit+0x7c>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d019      	beq.n	8007b00 <HAL_UART_AbortTransmit+0xec>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fa ff62 	bl	80029a2 <HAL_DMA_Abort>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00d      	beq.n	8007b00 <HAL_UART_AbortTransmit+0xec>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fb f868 	bl	8002bbe <HAL_DMA_GetError>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d105      	bne.n	8007b00 <HAL_UART_AbortTransmit+0xec>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2210      	movs	r2, #16
 8007af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e015      	b.n	8007b2c <HAL_UART_AbortTransmit+0x118>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b10:	d107      	bne.n	8007b22 <HAL_UART_AbortTransmit+0x10e>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699a      	ldr	r2, [r3, #24]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0210 	orr.w	r2, r2, #16
 8007b20:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3750      	adds	r7, #80	; 0x50
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b34:	b5b0      	push	{r4, r5, r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4ba3      	ldr	r3, [pc, #652]	; (8007dec <UART_SetConfig+0x2b8>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	69f9      	ldr	r1, [r7, #28]
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a98      	ldr	r2, [pc, #608]	; (8007df0 <UART_SetConfig+0x2bc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d004      	beq.n	8007b9c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ba6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6812      	ldr	r2, [r2, #0]
 8007bae:	69f9      	ldr	r1, [r7, #28]
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	f023 010f 	bic.w	r1, r3, #15
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a89      	ldr	r2, [pc, #548]	; (8007df4 <UART_SetConfig+0x2c0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d120      	bne.n	8007c16 <UART_SetConfig+0xe2>
 8007bd4:	2003      	movs	r0, #3
 8007bd6:	f7ff fe17 	bl	8007808 <LL_RCC_GetUSARTClockSource>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d817      	bhi.n	8007c10 <UART_SetConfig+0xdc>
 8007be0:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <UART_SetConfig+0xb4>)
 8007be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be6:	bf00      	nop
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c05 	.word	0x08007c05
 8007bf0:	08007bff 	.word	0x08007bff
 8007bf4:	08007c0b 	.word	0x08007c0b
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	76fb      	strb	r3, [r7, #27]
 8007bfc:	e038      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	76fb      	strb	r3, [r7, #27]
 8007c02:	e035      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c04:	2304      	movs	r3, #4
 8007c06:	76fb      	strb	r3, [r7, #27]
 8007c08:	e032      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	76fb      	strb	r3, [r7, #27]
 8007c0e:	e02f      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c10:	2310      	movs	r3, #16
 8007c12:	76fb      	strb	r3, [r7, #27]
 8007c14:	e02c      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a75      	ldr	r2, [pc, #468]	; (8007df0 <UART_SetConfig+0x2bc>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d125      	bne.n	8007c6c <UART_SetConfig+0x138>
 8007c20:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007c24:	f7ff fe00 	bl	8007828 <LL_RCC_GetLPUARTClockSource>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c2e:	d017      	beq.n	8007c60 <UART_SetConfig+0x12c>
 8007c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c34:	d817      	bhi.n	8007c66 <UART_SetConfig+0x132>
 8007c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c3a:	d00b      	beq.n	8007c54 <UART_SetConfig+0x120>
 8007c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c40:	d811      	bhi.n	8007c66 <UART_SetConfig+0x132>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <UART_SetConfig+0x11a>
 8007c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4a:	d006      	beq.n	8007c5a <UART_SetConfig+0x126>
 8007c4c:	e00b      	b.n	8007c66 <UART_SetConfig+0x132>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	76fb      	strb	r3, [r7, #27]
 8007c52:	e00d      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c54:	2302      	movs	r3, #2
 8007c56:	76fb      	strb	r3, [r7, #27]
 8007c58:	e00a      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c5a:	2304      	movs	r3, #4
 8007c5c:	76fb      	strb	r3, [r7, #27]
 8007c5e:	e007      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c60:	2308      	movs	r3, #8
 8007c62:	76fb      	strb	r3, [r7, #27]
 8007c64:	e004      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c66:	2310      	movs	r3, #16
 8007c68:	76fb      	strb	r3, [r7, #27]
 8007c6a:	e001      	b.n	8007c70 <UART_SetConfig+0x13c>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a5e      	ldr	r2, [pc, #376]	; (8007df0 <UART_SetConfig+0x2bc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	f040 808b 	bne.w	8007d92 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c7c:	7efb      	ldrb	r3, [r7, #27]
 8007c7e:	2b08      	cmp	r3, #8
 8007c80:	d823      	bhi.n	8007cca <UART_SetConfig+0x196>
 8007c82:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <UART_SetConfig+0x154>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007ccb 	.word	0x08007ccb
 8007c90:	08007cb5 	.word	0x08007cb5
 8007c94:	08007ccb 	.word	0x08007ccb
 8007c98:	08007cbb 	.word	0x08007cbb
 8007c9c:	08007ccb 	.word	0x08007ccb
 8007ca0:	08007ccb 	.word	0x08007ccb
 8007ca4:	08007ccb 	.word	0x08007ccb
 8007ca8:	08007cc3 	.word	0x08007cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cac:	f7fc fbe8 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8007cb0:	6178      	str	r0, [r7, #20]
        break;
 8007cb2:	e00f      	b.n	8007cd4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb4:	4b50      	ldr	r3, [pc, #320]	; (8007df8 <UART_SetConfig+0x2c4>)
 8007cb6:	617b      	str	r3, [r7, #20]
        break;
 8007cb8:	e00c      	b.n	8007cd4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cba:	f7fc fb61 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8007cbe:	6178      	str	r0, [r7, #20]
        break;
 8007cc0:	e008      	b.n	8007cd4 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cc6:	617b      	str	r3, [r7, #20]
        break;
 8007cc8:	e004      	b.n	8007cd4 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	76bb      	strb	r3, [r7, #26]
        break;
 8007cd2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 811a 	beq.w	8007f10 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	4a46      	ldr	r2, [pc, #280]	; (8007dfc <UART_SetConfig+0x2c8>)
 8007ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cee:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	4413      	add	r3, r2
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d305      	bcc.n	8007d0c <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d902      	bls.n	8007d12 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	76bb      	strb	r3, [r7, #26]
 8007d10:	e0fe      	b.n	8007f10 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f04f 0100 	mov.w	r1, #0
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	4a37      	ldr	r2, [pc, #220]	; (8007dfc <UART_SetConfig+0x2c8>)
 8007d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	f04f 0300 	mov.w	r3, #0
 8007d2a:	f7f8 fef7 	bl	8000b1c <__aeabi_uldivmod>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4610      	mov	r0, r2
 8007d34:	4619      	mov	r1, r3
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	020b      	lsls	r3, r1, #8
 8007d40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d44:	0202      	lsls	r2, r0, #8
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	6849      	ldr	r1, [r1, #4]
 8007d4a:	0849      	lsrs	r1, r1, #1
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	f04f 0100 	mov.w	r1, #0
 8007d52:	1814      	adds	r4, r2, r0
 8007d54:	eb43 0501 	adc.w	r5, r3, r1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f04f 0300 	mov.w	r3, #0
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	f7f8 fed9 	bl	8000b1c <__aeabi_uldivmod>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4613      	mov	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d78:	d308      	bcc.n	8007d8c <UART_SetConfig+0x258>
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d80:	d204      	bcs.n	8007d8c <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	e0c1      	b.n	8007f10 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	76bb      	strb	r3, [r7, #26]
 8007d90:	e0be      	b.n	8007f10 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9a:	d16a      	bne.n	8007e72 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007d9c:	7efb      	ldrb	r3, [r7, #27]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	2b07      	cmp	r3, #7
 8007da2:	d82d      	bhi.n	8007e00 <UART_SetConfig+0x2cc>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <UART_SetConfig+0x278>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007dcd 	.word	0x08007dcd
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007e01 	.word	0x08007e01
 8007db8:	08007ddb 	.word	0x08007ddb
 8007dbc:	08007e01 	.word	0x08007e01
 8007dc0:	08007e01 	.word	0x08007e01
 8007dc4:	08007e01 	.word	0x08007e01
 8007dc8:	08007de3 	.word	0x08007de3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dcc:	f7fc fb6e 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8007dd0:	6178      	str	r0, [r7, #20]
        break;
 8007dd2:	e01a      	b.n	8007e0a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dd4:	4b08      	ldr	r3, [pc, #32]	; (8007df8 <UART_SetConfig+0x2c4>)
 8007dd6:	617b      	str	r3, [r7, #20]
        break;
 8007dd8:	e017      	b.n	8007e0a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dda:	f7fc fad1 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8007dde:	6178      	str	r0, [r7, #20]
        break;
 8007de0:	e013      	b.n	8007e0a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007de6:	617b      	str	r3, [r7, #20]
        break;
 8007de8:	e00f      	b.n	8007e0a <UART_SetConfig+0x2d6>
 8007dea:	bf00      	nop
 8007dec:	cfff69f3 	.word	0xcfff69f3
 8007df0:	40008000 	.word	0x40008000
 8007df4:	40013800 	.word	0x40013800
 8007df8:	00f42400 	.word	0x00f42400
 8007dfc:	08009fc0 	.word	0x08009fc0
      default:
        pclk = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	76bb      	strb	r3, [r7, #26]
        break;
 8007e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d07f      	beq.n	8007f10 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	4a48      	ldr	r2, [pc, #288]	; (8007f38 <UART_SetConfig+0x404>)
 8007e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e22:	005a      	lsls	r2, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	085b      	lsrs	r3, r3, #1
 8007e2a:	441a      	add	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b0f      	cmp	r3, #15
 8007e3c:	d916      	bls.n	8007e6c <UART_SetConfig+0x338>
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e44:	d212      	bcs.n	8007e6c <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f023 030f 	bic.w	r3, r3, #15
 8007e4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	89fb      	ldrh	r3, [r7, #14]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	89fa      	ldrh	r2, [r7, #14]
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	e051      	b.n	8007f10 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	76bb      	strb	r3, [r7, #26]
 8007e70:	e04e      	b.n	8007f10 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e72:	7efb      	ldrb	r3, [r7, #27]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	2b07      	cmp	r3, #7
 8007e78:	d821      	bhi.n	8007ebe <UART_SetConfig+0x38a>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <UART_SetConfig+0x34c>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007ea1 	.word	0x08007ea1
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ebf 	.word	0x08007ebf
 8007e8c:	08007eaf 	.word	0x08007eaf
 8007e90:	08007ebf 	.word	0x08007ebf
 8007e94:	08007ebf 	.word	0x08007ebf
 8007e98:	08007ebf 	.word	0x08007ebf
 8007e9c:	08007eb7 	.word	0x08007eb7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea0:	f7fc fb04 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8007ea4:	6178      	str	r0, [r7, #20]
        break;
 8007ea6:	e00f      	b.n	8007ec8 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea8:	4b24      	ldr	r3, [pc, #144]	; (8007f3c <UART_SetConfig+0x408>)
 8007eaa:	617b      	str	r3, [r7, #20]
        break;
 8007eac:	e00c      	b.n	8007ec8 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eae:	f7fc fa67 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 8007eb2:	6178      	str	r0, [r7, #20]
        break;
 8007eb4:	e008      	b.n	8007ec8 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eba:	617b      	str	r3, [r7, #20]
        break;
 8007ebc:	e004      	b.n	8007ec8 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	76bb      	strb	r3, [r7, #26]
        break;
 8007ec6:	bf00      	nop
    }

    if (pclk != 0U)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d020      	beq.n	8007f10 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	4a19      	ldr	r2, [pc, #100]	; (8007f38 <UART_SetConfig+0x404>)
 8007ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	085b      	lsrs	r3, r3, #1
 8007ee6:	441a      	add	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2b0f      	cmp	r3, #15
 8007ef8:	d908      	bls.n	8007f0c <UART_SetConfig+0x3d8>
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f00:	d204      	bcs.n	8007f0c <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	e001      	b.n	8007f10 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f2c:	7ebb      	ldrb	r3, [r7, #26]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3720      	adds	r7, #32
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bdb0      	pop	{r4, r5, r7, pc}
 8007f36:	bf00      	nop
 8007f38:	08009fc0 	.word	0x08009fc0
 8007f3c:	00f42400 	.word	0x00f42400

08007f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	f003 0308 	and.w	r3, r3, #8
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01a      	beq.n	8008056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800803e:	d10a      	bne.n	8008056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	605a      	str	r2, [r3, #4]
  }
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af02      	add	r7, sp, #8
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008094:	f7fa fa16 	bl	80024c4 <HAL_GetTick>
 8008098:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	d10e      	bne.n	80080c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f82f 	bl	800811a <UART_WaitOnFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e025      	b.n	8008112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d10e      	bne.n	80080f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f819 	bl	800811a <UART_WaitOnFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e00f      	b.n	8008112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b09c      	sub	sp, #112	; 0x70
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	4613      	mov	r3, r2
 8008128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812a:	e0a9      	b.n	8008280 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	f000 80a5 	beq.w	8008280 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008136:	f7fa f9c5 	bl	80024c4 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008142:	429a      	cmp	r2, r3
 8008144:	d302      	bcc.n	800814c <UART_WaitOnFlagUntilTimeout+0x32>
 8008146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008148:	2b00      	cmp	r3, #0
 800814a:	d140      	bne.n	80081ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008154:	e853 3f00 	ldrex	r3, [r3]
 8008158:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800815a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008160:	667b      	str	r3, [r7, #100]	; 0x64
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800816a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800816c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008170:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e6      	bne.n	800814c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3308      	adds	r3, #8
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	f023 0301 	bic.w	r3, r3, #1
 8008194:	663b      	str	r3, [r7, #96]	; 0x60
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3308      	adds	r3, #8
 800819c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800819e:	64ba      	str	r2, [r7, #72]	; 0x48
 80081a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e5      	bne.n	800817e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e069      	b.n	80082a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d051      	beq.n	8008280 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ea:	d149      	bne.n	8008280 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800820a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
 8008216:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800821a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e6      	bne.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3308      	adds	r3, #8
 800822e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	613b      	str	r3, [r7, #16]
   return(result);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f023 0301 	bic.w	r3, r3, #1
 800823e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3308      	adds	r3, #8
 8008246:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008248:	623a      	str	r2, [r7, #32]
 800824a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	69f9      	ldr	r1, [r7, #28]
 800824e:	6a3a      	ldr	r2, [r7, #32]
 8008250:	e841 2300 	strex	r3, r2, [r1]
 8008254:	61bb      	str	r3, [r7, #24]
   return(result);
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e5      	bne.n	8008228 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2220      	movs	r2, #32
 8008270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e010      	b.n	80082a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69da      	ldr	r2, [r3, #28]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4013      	ands	r3, r2
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	429a      	cmp	r2, r3
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	429a      	cmp	r2, r3
 800829c:	f43f af46 	beq.w	800812c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3770      	adds	r7, #112	; 0x70
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80082bc:	2302      	movs	r3, #2
 80082be:	e027      	b.n	8008310 <HAL_UARTEx_DisableFifoMode+0x66>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2224      	movs	r2, #36	; 0x24
 80082cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2220      	movs	r2, #32
 8008302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008330:	2302      	movs	r3, #2
 8008332:	e02d      	b.n	8008390 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2224      	movs	r2, #36	; 0x24
 8008340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0201 	bic.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f84f 	bl	8008414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2220      	movs	r2, #32
 8008382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e02d      	b.n	800840c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2224      	movs	r2, #36	; 0x24
 80083bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f811 	bl	8008414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2220      	movs	r2, #32
 80083fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008420:	2b00      	cmp	r3, #0
 8008422:	d108      	bne.n	8008436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008434:	e031      	b.n	800849a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008436:	2308      	movs	r3, #8
 8008438:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800843a:	2308      	movs	r3, #8
 800843c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	0e5b      	lsrs	r3, r3, #25
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	0f5b      	lsrs	r3, r3, #29
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 0307 	and.w	r3, r3, #7
 800845c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	7b3a      	ldrb	r2, [r7, #12]
 8008462:	4911      	ldr	r1, [pc, #68]	; (80084a8 <UARTEx_SetNbDataToProcess+0x94>)
 8008464:	5c8a      	ldrb	r2, [r1, r2]
 8008466:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800846a:	7b3a      	ldrb	r2, [r7, #12]
 800846c:	490f      	ldr	r1, [pc, #60]	; (80084ac <UARTEx_SetNbDataToProcess+0x98>)
 800846e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008470:	fb93 f3f2 	sdiv	r3, r3, r2
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	7b7a      	ldrb	r2, [r7, #13]
 8008480:	4909      	ldr	r1, [pc, #36]	; (80084a8 <UARTEx_SetNbDataToProcess+0x94>)
 8008482:	5c8a      	ldrb	r2, [r1, r2]
 8008484:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008488:	7b7a      	ldrb	r2, [r7, #13]
 800848a:	4908      	ldr	r1, [pc, #32]	; (80084ac <UARTEx_SetNbDataToProcess+0x98>)
 800848c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800848e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008492:	b29a      	uxth	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800849a:	bf00      	nop
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	08009fd8 	.word	0x08009fd8
 80084ac:	08009fe0 	.word	0x08009fe0

080084b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80084b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80084bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	43db      	mvns	r3, r3
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	4013      	ands	r3, r2
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80084e6:	b084      	sub	sp, #16
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	f107 0014 	add.w	r0, r7, #20
 80084f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	b004      	add	sp, #16
 8008526:	4770      	bx	lr

08008528 <__errno>:
 8008528:	4b01      	ldr	r3, [pc, #4]	; (8008530 <__errno+0x8>)
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000010 	.word	0x20000010

08008534 <__libc_init_array>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	4d0d      	ldr	r5, [pc, #52]	; (800856c <__libc_init_array+0x38>)
 8008538:	4c0d      	ldr	r4, [pc, #52]	; (8008570 <__libc_init_array+0x3c>)
 800853a:	1b64      	subs	r4, r4, r5
 800853c:	10a4      	asrs	r4, r4, #2
 800853e:	2600      	movs	r6, #0
 8008540:	42a6      	cmp	r6, r4
 8008542:	d109      	bne.n	8008558 <__libc_init_array+0x24>
 8008544:	4d0b      	ldr	r5, [pc, #44]	; (8008574 <__libc_init_array+0x40>)
 8008546:	4c0c      	ldr	r4, [pc, #48]	; (8008578 <__libc_init_array+0x44>)
 8008548:	f001 fc84 	bl	8009e54 <_init>
 800854c:	1b64      	subs	r4, r4, r5
 800854e:	10a4      	asrs	r4, r4, #2
 8008550:	2600      	movs	r6, #0
 8008552:	42a6      	cmp	r6, r4
 8008554:	d105      	bne.n	8008562 <__libc_init_array+0x2e>
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	f855 3b04 	ldr.w	r3, [r5], #4
 800855c:	4798      	blx	r3
 800855e:	3601      	adds	r6, #1
 8008560:	e7ee      	b.n	8008540 <__libc_init_array+0xc>
 8008562:	f855 3b04 	ldr.w	r3, [r5], #4
 8008566:	4798      	blx	r3
 8008568:	3601      	adds	r6, #1
 800856a:	e7f2      	b.n	8008552 <__libc_init_array+0x1e>
 800856c:	0800a200 	.word	0x0800a200
 8008570:	0800a200 	.word	0x0800a200
 8008574:	0800a200 	.word	0x0800a200
 8008578:	0800a204 	.word	0x0800a204

0800857c <memset>:
 800857c:	4402      	add	r2, r0
 800857e:	4603      	mov	r3, r0
 8008580:	4293      	cmp	r3, r2
 8008582:	d100      	bne.n	8008586 <memset+0xa>
 8008584:	4770      	bx	lr
 8008586:	f803 1b01 	strb.w	r1, [r3], #1
 800858a:	e7f9      	b.n	8008580 <memset+0x4>

0800858c <siprintf>:
 800858c:	b40e      	push	{r1, r2, r3}
 800858e:	b500      	push	{lr}
 8008590:	b09c      	sub	sp, #112	; 0x70
 8008592:	ab1d      	add	r3, sp, #116	; 0x74
 8008594:	9002      	str	r0, [sp, #8]
 8008596:	9006      	str	r0, [sp, #24]
 8008598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800859c:	4809      	ldr	r0, [pc, #36]	; (80085c4 <siprintf+0x38>)
 800859e:	9107      	str	r1, [sp, #28]
 80085a0:	9104      	str	r1, [sp, #16]
 80085a2:	4909      	ldr	r1, [pc, #36]	; (80085c8 <siprintf+0x3c>)
 80085a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a8:	9105      	str	r1, [sp, #20]
 80085aa:	6800      	ldr	r0, [r0, #0]
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	a902      	add	r1, sp, #8
 80085b0:	f000 f868 	bl	8008684 <_svfiprintf_r>
 80085b4:	9b02      	ldr	r3, [sp, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	b01c      	add	sp, #112	; 0x70
 80085bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c0:	b003      	add	sp, #12
 80085c2:	4770      	bx	lr
 80085c4:	20000010 	.word	0x20000010
 80085c8:	ffff0208 	.word	0xffff0208

080085cc <__ssputs_r>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	688e      	ldr	r6, [r1, #8]
 80085d2:	429e      	cmp	r6, r3
 80085d4:	4682      	mov	sl, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	4690      	mov	r8, r2
 80085da:	461f      	mov	r7, r3
 80085dc:	d838      	bhi.n	8008650 <__ssputs_r+0x84>
 80085de:	898a      	ldrh	r2, [r1, #12]
 80085e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085e4:	d032      	beq.n	800864c <__ssputs_r+0x80>
 80085e6:	6825      	ldr	r5, [r4, #0]
 80085e8:	6909      	ldr	r1, [r1, #16]
 80085ea:	eba5 0901 	sub.w	r9, r5, r1
 80085ee:	6965      	ldr	r5, [r4, #20]
 80085f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085f8:	3301      	adds	r3, #1
 80085fa:	444b      	add	r3, r9
 80085fc:	106d      	asrs	r5, r5, #1
 80085fe:	429d      	cmp	r5, r3
 8008600:	bf38      	it	cc
 8008602:	461d      	movcc	r5, r3
 8008604:	0553      	lsls	r3, r2, #21
 8008606:	d531      	bpl.n	800866c <__ssputs_r+0xa0>
 8008608:	4629      	mov	r1, r5
 800860a:	f000 fb47 	bl	8008c9c <_malloc_r>
 800860e:	4606      	mov	r6, r0
 8008610:	b950      	cbnz	r0, 8008628 <__ssputs_r+0x5c>
 8008612:	230c      	movs	r3, #12
 8008614:	f8ca 3000 	str.w	r3, [sl]
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008628:	6921      	ldr	r1, [r4, #16]
 800862a:	464a      	mov	r2, r9
 800862c:	f000 fabe 	bl	8008bac <memcpy>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	6126      	str	r6, [r4, #16]
 800863e:	6165      	str	r5, [r4, #20]
 8008640:	444e      	add	r6, r9
 8008642:	eba5 0509 	sub.w	r5, r5, r9
 8008646:	6026      	str	r6, [r4, #0]
 8008648:	60a5      	str	r5, [r4, #8]
 800864a:	463e      	mov	r6, r7
 800864c:	42be      	cmp	r6, r7
 800864e:	d900      	bls.n	8008652 <__ssputs_r+0x86>
 8008650:	463e      	mov	r6, r7
 8008652:	4632      	mov	r2, r6
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	4641      	mov	r1, r8
 8008658:	f000 fab6 	bl	8008bc8 <memmove>
 800865c:	68a3      	ldr	r3, [r4, #8]
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	1b9b      	subs	r3, r3, r6
 8008662:	4432      	add	r2, r6
 8008664:	60a3      	str	r3, [r4, #8]
 8008666:	6022      	str	r2, [r4, #0]
 8008668:	2000      	movs	r0, #0
 800866a:	e7db      	b.n	8008624 <__ssputs_r+0x58>
 800866c:	462a      	mov	r2, r5
 800866e:	f000 fb6f 	bl	8008d50 <_realloc_r>
 8008672:	4606      	mov	r6, r0
 8008674:	2800      	cmp	r0, #0
 8008676:	d1e1      	bne.n	800863c <__ssputs_r+0x70>
 8008678:	6921      	ldr	r1, [r4, #16]
 800867a:	4650      	mov	r0, sl
 800867c:	f000 fabe 	bl	8008bfc <_free_r>
 8008680:	e7c7      	b.n	8008612 <__ssputs_r+0x46>
	...

08008684 <_svfiprintf_r>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4698      	mov	r8, r3
 800868a:	898b      	ldrh	r3, [r1, #12]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	b09d      	sub	sp, #116	; 0x74
 8008690:	4607      	mov	r7, r0
 8008692:	460d      	mov	r5, r1
 8008694:	4614      	mov	r4, r2
 8008696:	d50e      	bpl.n	80086b6 <_svfiprintf_r+0x32>
 8008698:	690b      	ldr	r3, [r1, #16]
 800869a:	b963      	cbnz	r3, 80086b6 <_svfiprintf_r+0x32>
 800869c:	2140      	movs	r1, #64	; 0x40
 800869e:	f000 fafd 	bl	8008c9c <_malloc_r>
 80086a2:	6028      	str	r0, [r5, #0]
 80086a4:	6128      	str	r0, [r5, #16]
 80086a6:	b920      	cbnz	r0, 80086b2 <_svfiprintf_r+0x2e>
 80086a8:	230c      	movs	r3, #12
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	e0d1      	b.n	8008856 <_svfiprintf_r+0x1d2>
 80086b2:	2340      	movs	r3, #64	; 0x40
 80086b4:	616b      	str	r3, [r5, #20]
 80086b6:	2300      	movs	r3, #0
 80086b8:	9309      	str	r3, [sp, #36]	; 0x24
 80086ba:	2320      	movs	r3, #32
 80086bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c4:	2330      	movs	r3, #48	; 0x30
 80086c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008870 <_svfiprintf_r+0x1ec>
 80086ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ce:	f04f 0901 	mov.w	r9, #1
 80086d2:	4623      	mov	r3, r4
 80086d4:	469a      	mov	sl, r3
 80086d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086da:	b10a      	cbz	r2, 80086e0 <_svfiprintf_r+0x5c>
 80086dc:	2a25      	cmp	r2, #37	; 0x25
 80086de:	d1f9      	bne.n	80086d4 <_svfiprintf_r+0x50>
 80086e0:	ebba 0b04 	subs.w	fp, sl, r4
 80086e4:	d00b      	beq.n	80086fe <_svfiprintf_r+0x7a>
 80086e6:	465b      	mov	r3, fp
 80086e8:	4622      	mov	r2, r4
 80086ea:	4629      	mov	r1, r5
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff ff6d 	bl	80085cc <__ssputs_r>
 80086f2:	3001      	adds	r0, #1
 80086f4:	f000 80aa 	beq.w	800884c <_svfiprintf_r+0x1c8>
 80086f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086fa:	445a      	add	r2, fp
 80086fc:	9209      	str	r2, [sp, #36]	; 0x24
 80086fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80a2 	beq.w	800884c <_svfiprintf_r+0x1c8>
 8008708:	2300      	movs	r3, #0
 800870a:	f04f 32ff 	mov.w	r2, #4294967295
 800870e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008712:	f10a 0a01 	add.w	sl, sl, #1
 8008716:	9304      	str	r3, [sp, #16]
 8008718:	9307      	str	r3, [sp, #28]
 800871a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800871e:	931a      	str	r3, [sp, #104]	; 0x68
 8008720:	4654      	mov	r4, sl
 8008722:	2205      	movs	r2, #5
 8008724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008728:	4851      	ldr	r0, [pc, #324]	; (8008870 <_svfiprintf_r+0x1ec>)
 800872a:	f7f7 fd29 	bl	8000180 <memchr>
 800872e:	9a04      	ldr	r2, [sp, #16]
 8008730:	b9d8      	cbnz	r0, 800876a <_svfiprintf_r+0xe6>
 8008732:	06d0      	lsls	r0, r2, #27
 8008734:	bf44      	itt	mi
 8008736:	2320      	movmi	r3, #32
 8008738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873c:	0711      	lsls	r1, r2, #28
 800873e:	bf44      	itt	mi
 8008740:	232b      	movmi	r3, #43	; 0x2b
 8008742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008746:	f89a 3000 	ldrb.w	r3, [sl]
 800874a:	2b2a      	cmp	r3, #42	; 0x2a
 800874c:	d015      	beq.n	800877a <_svfiprintf_r+0xf6>
 800874e:	9a07      	ldr	r2, [sp, #28]
 8008750:	4654      	mov	r4, sl
 8008752:	2000      	movs	r0, #0
 8008754:	f04f 0c0a 	mov.w	ip, #10
 8008758:	4621      	mov	r1, r4
 800875a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800875e:	3b30      	subs	r3, #48	; 0x30
 8008760:	2b09      	cmp	r3, #9
 8008762:	d94e      	bls.n	8008802 <_svfiprintf_r+0x17e>
 8008764:	b1b0      	cbz	r0, 8008794 <_svfiprintf_r+0x110>
 8008766:	9207      	str	r2, [sp, #28]
 8008768:	e014      	b.n	8008794 <_svfiprintf_r+0x110>
 800876a:	eba0 0308 	sub.w	r3, r0, r8
 800876e:	fa09 f303 	lsl.w	r3, r9, r3
 8008772:	4313      	orrs	r3, r2
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	46a2      	mov	sl, r4
 8008778:	e7d2      	b.n	8008720 <_svfiprintf_r+0x9c>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	1d19      	adds	r1, r3, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	9103      	str	r1, [sp, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfbb      	ittet	lt
 8008786:	425b      	neglt	r3, r3
 8008788:	f042 0202 	orrlt.w	r2, r2, #2
 800878c:	9307      	strge	r3, [sp, #28]
 800878e:	9307      	strlt	r3, [sp, #28]
 8008790:	bfb8      	it	lt
 8008792:	9204      	strlt	r2, [sp, #16]
 8008794:	7823      	ldrb	r3, [r4, #0]
 8008796:	2b2e      	cmp	r3, #46	; 0x2e
 8008798:	d10c      	bne.n	80087b4 <_svfiprintf_r+0x130>
 800879a:	7863      	ldrb	r3, [r4, #1]
 800879c:	2b2a      	cmp	r3, #42	; 0x2a
 800879e:	d135      	bne.n	800880c <_svfiprintf_r+0x188>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	1d1a      	adds	r2, r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	9203      	str	r2, [sp, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfb8      	it	lt
 80087ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80087b0:	3402      	adds	r4, #2
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008880 <_svfiprintf_r+0x1fc>
 80087b8:	7821      	ldrb	r1, [r4, #0]
 80087ba:	2203      	movs	r2, #3
 80087bc:	4650      	mov	r0, sl
 80087be:	f7f7 fcdf 	bl	8000180 <memchr>
 80087c2:	b140      	cbz	r0, 80087d6 <_svfiprintf_r+0x152>
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	eba0 000a 	sub.w	r0, r0, sl
 80087ca:	fa03 f000 	lsl.w	r0, r3, r0
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	4303      	orrs	r3, r0
 80087d2:	3401      	adds	r4, #1
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087da:	4826      	ldr	r0, [pc, #152]	; (8008874 <_svfiprintf_r+0x1f0>)
 80087dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087e0:	2206      	movs	r2, #6
 80087e2:	f7f7 fccd 	bl	8000180 <memchr>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d038      	beq.n	800885c <_svfiprintf_r+0x1d8>
 80087ea:	4b23      	ldr	r3, [pc, #140]	; (8008878 <_svfiprintf_r+0x1f4>)
 80087ec:	bb1b      	cbnz	r3, 8008836 <_svfiprintf_r+0x1b2>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	3307      	adds	r3, #7
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	3308      	adds	r3, #8
 80087f8:	9303      	str	r3, [sp, #12]
 80087fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fc:	4433      	add	r3, r6
 80087fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008800:	e767      	b.n	80086d2 <_svfiprintf_r+0x4e>
 8008802:	fb0c 3202 	mla	r2, ip, r2, r3
 8008806:	460c      	mov	r4, r1
 8008808:	2001      	movs	r0, #1
 800880a:	e7a5      	b.n	8008758 <_svfiprintf_r+0xd4>
 800880c:	2300      	movs	r3, #0
 800880e:	3401      	adds	r4, #1
 8008810:	9305      	str	r3, [sp, #20]
 8008812:	4619      	mov	r1, r3
 8008814:	f04f 0c0a 	mov.w	ip, #10
 8008818:	4620      	mov	r0, r4
 800881a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800881e:	3a30      	subs	r2, #48	; 0x30
 8008820:	2a09      	cmp	r2, #9
 8008822:	d903      	bls.n	800882c <_svfiprintf_r+0x1a8>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0c5      	beq.n	80087b4 <_svfiprintf_r+0x130>
 8008828:	9105      	str	r1, [sp, #20]
 800882a:	e7c3      	b.n	80087b4 <_svfiprintf_r+0x130>
 800882c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008830:	4604      	mov	r4, r0
 8008832:	2301      	movs	r3, #1
 8008834:	e7f0      	b.n	8008818 <_svfiprintf_r+0x194>
 8008836:	ab03      	add	r3, sp, #12
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	462a      	mov	r2, r5
 800883c:	4b0f      	ldr	r3, [pc, #60]	; (800887c <_svfiprintf_r+0x1f8>)
 800883e:	a904      	add	r1, sp, #16
 8008840:	4638      	mov	r0, r7
 8008842:	f3af 8000 	nop.w
 8008846:	1c42      	adds	r2, r0, #1
 8008848:	4606      	mov	r6, r0
 800884a:	d1d6      	bne.n	80087fa <_svfiprintf_r+0x176>
 800884c:	89ab      	ldrh	r3, [r5, #12]
 800884e:	065b      	lsls	r3, r3, #25
 8008850:	f53f af2c 	bmi.w	80086ac <_svfiprintf_r+0x28>
 8008854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008856:	b01d      	add	sp, #116	; 0x74
 8008858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885c:	ab03      	add	r3, sp, #12
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	462a      	mov	r2, r5
 8008862:	4b06      	ldr	r3, [pc, #24]	; (800887c <_svfiprintf_r+0x1f8>)
 8008864:	a904      	add	r1, sp, #16
 8008866:	4638      	mov	r0, r7
 8008868:	f000 f87a 	bl	8008960 <_printf_i>
 800886c:	e7eb      	b.n	8008846 <_svfiprintf_r+0x1c2>
 800886e:	bf00      	nop
 8008870:	08009fe8 	.word	0x08009fe8
 8008874:	08009ff2 	.word	0x08009ff2
 8008878:	00000000 	.word	0x00000000
 800887c:	080085cd 	.word	0x080085cd
 8008880:	08009fee 	.word	0x08009fee

08008884 <_printf_common>:
 8008884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	4616      	mov	r6, r2
 800888a:	4699      	mov	r9, r3
 800888c:	688a      	ldr	r2, [r1, #8]
 800888e:	690b      	ldr	r3, [r1, #16]
 8008890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008894:	4293      	cmp	r3, r2
 8008896:	bfb8      	it	lt
 8008898:	4613      	movlt	r3, r2
 800889a:	6033      	str	r3, [r6, #0]
 800889c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088a0:	4607      	mov	r7, r0
 80088a2:	460c      	mov	r4, r1
 80088a4:	b10a      	cbz	r2, 80088aa <_printf_common+0x26>
 80088a6:	3301      	adds	r3, #1
 80088a8:	6033      	str	r3, [r6, #0]
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	0699      	lsls	r1, r3, #26
 80088ae:	bf42      	ittt	mi
 80088b0:	6833      	ldrmi	r3, [r6, #0]
 80088b2:	3302      	addmi	r3, #2
 80088b4:	6033      	strmi	r3, [r6, #0]
 80088b6:	6825      	ldr	r5, [r4, #0]
 80088b8:	f015 0506 	ands.w	r5, r5, #6
 80088bc:	d106      	bne.n	80088cc <_printf_common+0x48>
 80088be:	f104 0a19 	add.w	sl, r4, #25
 80088c2:	68e3      	ldr	r3, [r4, #12]
 80088c4:	6832      	ldr	r2, [r6, #0]
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	dc26      	bgt.n	800891a <_printf_common+0x96>
 80088cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088d0:	1e13      	subs	r3, r2, #0
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	bf18      	it	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	0692      	lsls	r2, r2, #26
 80088da:	d42b      	bmi.n	8008934 <_printf_common+0xb0>
 80088dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088e0:	4649      	mov	r1, r9
 80088e2:	4638      	mov	r0, r7
 80088e4:	47c0      	blx	r8
 80088e6:	3001      	adds	r0, #1
 80088e8:	d01e      	beq.n	8008928 <_printf_common+0xa4>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	68e5      	ldr	r5, [r4, #12]
 80088ee:	6832      	ldr	r2, [r6, #0]
 80088f0:	f003 0306 	and.w	r3, r3, #6
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	bf08      	it	eq
 80088f8:	1aad      	subeq	r5, r5, r2
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	6922      	ldr	r2, [r4, #16]
 80088fe:	bf0c      	ite	eq
 8008900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008904:	2500      	movne	r5, #0
 8008906:	4293      	cmp	r3, r2
 8008908:	bfc4      	itt	gt
 800890a:	1a9b      	subgt	r3, r3, r2
 800890c:	18ed      	addgt	r5, r5, r3
 800890e:	2600      	movs	r6, #0
 8008910:	341a      	adds	r4, #26
 8008912:	42b5      	cmp	r5, r6
 8008914:	d11a      	bne.n	800894c <_printf_common+0xc8>
 8008916:	2000      	movs	r0, #0
 8008918:	e008      	b.n	800892c <_printf_common+0xa8>
 800891a:	2301      	movs	r3, #1
 800891c:	4652      	mov	r2, sl
 800891e:	4649      	mov	r1, r9
 8008920:	4638      	mov	r0, r7
 8008922:	47c0      	blx	r8
 8008924:	3001      	adds	r0, #1
 8008926:	d103      	bne.n	8008930 <_printf_common+0xac>
 8008928:	f04f 30ff 	mov.w	r0, #4294967295
 800892c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008930:	3501      	adds	r5, #1
 8008932:	e7c6      	b.n	80088c2 <_printf_common+0x3e>
 8008934:	18e1      	adds	r1, r4, r3
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	2030      	movs	r0, #48	; 0x30
 800893a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800893e:	4422      	add	r2, r4
 8008940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008948:	3302      	adds	r3, #2
 800894a:	e7c7      	b.n	80088dc <_printf_common+0x58>
 800894c:	2301      	movs	r3, #1
 800894e:	4622      	mov	r2, r4
 8008950:	4649      	mov	r1, r9
 8008952:	4638      	mov	r0, r7
 8008954:	47c0      	blx	r8
 8008956:	3001      	adds	r0, #1
 8008958:	d0e6      	beq.n	8008928 <_printf_common+0xa4>
 800895a:	3601      	adds	r6, #1
 800895c:	e7d9      	b.n	8008912 <_printf_common+0x8e>
	...

08008960 <_printf_i>:
 8008960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008964:	460c      	mov	r4, r1
 8008966:	4691      	mov	r9, r2
 8008968:	7e27      	ldrb	r7, [r4, #24]
 800896a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800896c:	2f78      	cmp	r7, #120	; 0x78
 800896e:	4680      	mov	r8, r0
 8008970:	469a      	mov	sl, r3
 8008972:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008976:	d807      	bhi.n	8008988 <_printf_i+0x28>
 8008978:	2f62      	cmp	r7, #98	; 0x62
 800897a:	d80a      	bhi.n	8008992 <_printf_i+0x32>
 800897c:	2f00      	cmp	r7, #0
 800897e:	f000 80d8 	beq.w	8008b32 <_printf_i+0x1d2>
 8008982:	2f58      	cmp	r7, #88	; 0x58
 8008984:	f000 80a3 	beq.w	8008ace <_printf_i+0x16e>
 8008988:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800898c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008990:	e03a      	b.n	8008a08 <_printf_i+0xa8>
 8008992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008996:	2b15      	cmp	r3, #21
 8008998:	d8f6      	bhi.n	8008988 <_printf_i+0x28>
 800899a:	a001      	add	r0, pc, #4	; (adr r0, 80089a0 <_printf_i+0x40>)
 800899c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80089a0:	080089f9 	.word	0x080089f9
 80089a4:	08008a0d 	.word	0x08008a0d
 80089a8:	08008989 	.word	0x08008989
 80089ac:	08008989 	.word	0x08008989
 80089b0:	08008989 	.word	0x08008989
 80089b4:	08008989 	.word	0x08008989
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008989 	.word	0x08008989
 80089c0:	08008989 	.word	0x08008989
 80089c4:	08008989 	.word	0x08008989
 80089c8:	08008989 	.word	0x08008989
 80089cc:	08008b19 	.word	0x08008b19
 80089d0:	08008a3d 	.word	0x08008a3d
 80089d4:	08008afb 	.word	0x08008afb
 80089d8:	08008989 	.word	0x08008989
 80089dc:	08008989 	.word	0x08008989
 80089e0:	08008b3b 	.word	0x08008b3b
 80089e4:	08008989 	.word	0x08008989
 80089e8:	08008a3d 	.word	0x08008a3d
 80089ec:	08008989 	.word	0x08008989
 80089f0:	08008989 	.word	0x08008989
 80089f4:	08008b03 	.word	0x08008b03
 80089f8:	680b      	ldr	r3, [r1, #0]
 80089fa:	1d1a      	adds	r2, r3, #4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	600a      	str	r2, [r1, #0]
 8008a00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e0a3      	b.n	8008b54 <_printf_i+0x1f4>
 8008a0c:	6825      	ldr	r5, [r4, #0]
 8008a0e:	6808      	ldr	r0, [r1, #0]
 8008a10:	062e      	lsls	r6, r5, #24
 8008a12:	f100 0304 	add.w	r3, r0, #4
 8008a16:	d50a      	bpl.n	8008a2e <_printf_i+0xce>
 8008a18:	6805      	ldr	r5, [r0, #0]
 8008a1a:	600b      	str	r3, [r1, #0]
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	da03      	bge.n	8008a28 <_printf_i+0xc8>
 8008a20:	232d      	movs	r3, #45	; 0x2d
 8008a22:	426d      	negs	r5, r5
 8008a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a28:	485e      	ldr	r0, [pc, #376]	; (8008ba4 <_printf_i+0x244>)
 8008a2a:	230a      	movs	r3, #10
 8008a2c:	e019      	b.n	8008a62 <_printf_i+0x102>
 8008a2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a32:	6805      	ldr	r5, [r0, #0]
 8008a34:	600b      	str	r3, [r1, #0]
 8008a36:	bf18      	it	ne
 8008a38:	b22d      	sxthne	r5, r5
 8008a3a:	e7ef      	b.n	8008a1c <_printf_i+0xbc>
 8008a3c:	680b      	ldr	r3, [r1, #0]
 8008a3e:	6825      	ldr	r5, [r4, #0]
 8008a40:	1d18      	adds	r0, r3, #4
 8008a42:	6008      	str	r0, [r1, #0]
 8008a44:	0628      	lsls	r0, r5, #24
 8008a46:	d501      	bpl.n	8008a4c <_printf_i+0xec>
 8008a48:	681d      	ldr	r5, [r3, #0]
 8008a4a:	e002      	b.n	8008a52 <_printf_i+0xf2>
 8008a4c:	0669      	lsls	r1, r5, #25
 8008a4e:	d5fb      	bpl.n	8008a48 <_printf_i+0xe8>
 8008a50:	881d      	ldrh	r5, [r3, #0]
 8008a52:	4854      	ldr	r0, [pc, #336]	; (8008ba4 <_printf_i+0x244>)
 8008a54:	2f6f      	cmp	r7, #111	; 0x6f
 8008a56:	bf0c      	ite	eq
 8008a58:	2308      	moveq	r3, #8
 8008a5a:	230a      	movne	r3, #10
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a62:	6866      	ldr	r6, [r4, #4]
 8008a64:	60a6      	str	r6, [r4, #8]
 8008a66:	2e00      	cmp	r6, #0
 8008a68:	bfa2      	ittt	ge
 8008a6a:	6821      	ldrge	r1, [r4, #0]
 8008a6c:	f021 0104 	bicge.w	r1, r1, #4
 8008a70:	6021      	strge	r1, [r4, #0]
 8008a72:	b90d      	cbnz	r5, 8008a78 <_printf_i+0x118>
 8008a74:	2e00      	cmp	r6, #0
 8008a76:	d04d      	beq.n	8008b14 <_printf_i+0x1b4>
 8008a78:	4616      	mov	r6, r2
 8008a7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008a82:	5dc7      	ldrb	r7, [r0, r7]
 8008a84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a88:	462f      	mov	r7, r5
 8008a8a:	42bb      	cmp	r3, r7
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	d9f4      	bls.n	8008a7a <_printf_i+0x11a>
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d10b      	bne.n	8008aac <_printf_i+0x14c>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	07df      	lsls	r7, r3, #31
 8008a98:	d508      	bpl.n	8008aac <_printf_i+0x14c>
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	6861      	ldr	r1, [r4, #4]
 8008a9e:	4299      	cmp	r1, r3
 8008aa0:	bfde      	ittt	le
 8008aa2:	2330      	movle	r3, #48	; 0x30
 8008aa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008aa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008aac:	1b92      	subs	r2, r2, r6
 8008aae:	6122      	str	r2, [r4, #16]
 8008ab0:	f8cd a000 	str.w	sl, [sp]
 8008ab4:	464b      	mov	r3, r9
 8008ab6:	aa03      	add	r2, sp, #12
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4640      	mov	r0, r8
 8008abc:	f7ff fee2 	bl	8008884 <_printf_common>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d14c      	bne.n	8008b5e <_printf_i+0x1fe>
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	b004      	add	sp, #16
 8008aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ace:	4835      	ldr	r0, [pc, #212]	; (8008ba4 <_printf_i+0x244>)
 8008ad0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	680e      	ldr	r6, [r1, #0]
 8008ad8:	061f      	lsls	r7, r3, #24
 8008ada:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ade:	600e      	str	r6, [r1, #0]
 8008ae0:	d514      	bpl.n	8008b0c <_printf_i+0x1ac>
 8008ae2:	07d9      	lsls	r1, r3, #31
 8008ae4:	bf44      	itt	mi
 8008ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8008aea:	6023      	strmi	r3, [r4, #0]
 8008aec:	b91d      	cbnz	r5, 8008af6 <_printf_i+0x196>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	f023 0320 	bic.w	r3, r3, #32
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	2310      	movs	r3, #16
 8008af8:	e7b0      	b.n	8008a5c <_printf_i+0xfc>
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	f043 0320 	orr.w	r3, r3, #32
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	2378      	movs	r3, #120	; 0x78
 8008b04:	4828      	ldr	r0, [pc, #160]	; (8008ba8 <_printf_i+0x248>)
 8008b06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b0a:	e7e3      	b.n	8008ad4 <_printf_i+0x174>
 8008b0c:	065e      	lsls	r6, r3, #25
 8008b0e:	bf48      	it	mi
 8008b10:	b2ad      	uxthmi	r5, r5
 8008b12:	e7e6      	b.n	8008ae2 <_printf_i+0x182>
 8008b14:	4616      	mov	r6, r2
 8008b16:	e7bb      	b.n	8008a90 <_printf_i+0x130>
 8008b18:	680b      	ldr	r3, [r1, #0]
 8008b1a:	6826      	ldr	r6, [r4, #0]
 8008b1c:	6960      	ldr	r0, [r4, #20]
 8008b1e:	1d1d      	adds	r5, r3, #4
 8008b20:	600d      	str	r5, [r1, #0]
 8008b22:	0635      	lsls	r5, r6, #24
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	d501      	bpl.n	8008b2c <_printf_i+0x1cc>
 8008b28:	6018      	str	r0, [r3, #0]
 8008b2a:	e002      	b.n	8008b32 <_printf_i+0x1d2>
 8008b2c:	0671      	lsls	r1, r6, #25
 8008b2e:	d5fb      	bpl.n	8008b28 <_printf_i+0x1c8>
 8008b30:	8018      	strh	r0, [r3, #0]
 8008b32:	2300      	movs	r3, #0
 8008b34:	6123      	str	r3, [r4, #16]
 8008b36:	4616      	mov	r6, r2
 8008b38:	e7ba      	b.n	8008ab0 <_printf_i+0x150>
 8008b3a:	680b      	ldr	r3, [r1, #0]
 8008b3c:	1d1a      	adds	r2, r3, #4
 8008b3e:	600a      	str	r2, [r1, #0]
 8008b40:	681e      	ldr	r6, [r3, #0]
 8008b42:	6862      	ldr	r2, [r4, #4]
 8008b44:	2100      	movs	r1, #0
 8008b46:	4630      	mov	r0, r6
 8008b48:	f7f7 fb1a 	bl	8000180 <memchr>
 8008b4c:	b108      	cbz	r0, 8008b52 <_printf_i+0x1f2>
 8008b4e:	1b80      	subs	r0, r0, r6
 8008b50:	6060      	str	r0, [r4, #4]
 8008b52:	6863      	ldr	r3, [r4, #4]
 8008b54:	6123      	str	r3, [r4, #16]
 8008b56:	2300      	movs	r3, #0
 8008b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b5c:	e7a8      	b.n	8008ab0 <_printf_i+0x150>
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	4632      	mov	r2, r6
 8008b62:	4649      	mov	r1, r9
 8008b64:	4640      	mov	r0, r8
 8008b66:	47d0      	blx	sl
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d0ab      	beq.n	8008ac4 <_printf_i+0x164>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	079b      	lsls	r3, r3, #30
 8008b70:	d413      	bmi.n	8008b9a <_printf_i+0x23a>
 8008b72:	68e0      	ldr	r0, [r4, #12]
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	4298      	cmp	r0, r3
 8008b78:	bfb8      	it	lt
 8008b7a:	4618      	movlt	r0, r3
 8008b7c:	e7a4      	b.n	8008ac8 <_printf_i+0x168>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4632      	mov	r2, r6
 8008b82:	4649      	mov	r1, r9
 8008b84:	4640      	mov	r0, r8
 8008b86:	47d0      	blx	sl
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d09b      	beq.n	8008ac4 <_printf_i+0x164>
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	68e3      	ldr	r3, [r4, #12]
 8008b90:	9903      	ldr	r1, [sp, #12]
 8008b92:	1a5b      	subs	r3, r3, r1
 8008b94:	42ab      	cmp	r3, r5
 8008b96:	dcf2      	bgt.n	8008b7e <_printf_i+0x21e>
 8008b98:	e7eb      	b.n	8008b72 <_printf_i+0x212>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	f104 0619 	add.w	r6, r4, #25
 8008ba0:	e7f5      	b.n	8008b8e <_printf_i+0x22e>
 8008ba2:	bf00      	nop
 8008ba4:	08009ff9 	.word	0x08009ff9
 8008ba8:	0800a00a 	.word	0x0800a00a

08008bac <memcpy>:
 8008bac:	440a      	add	r2, r1
 8008bae:	4291      	cmp	r1, r2
 8008bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bb4:	d100      	bne.n	8008bb8 <memcpy+0xc>
 8008bb6:	4770      	bx	lr
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	d1f9      	bne.n	8008bba <memcpy+0xe>
 8008bc6:	bd10      	pop	{r4, pc}

08008bc8 <memmove>:
 8008bc8:	4288      	cmp	r0, r1
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	eb01 0402 	add.w	r4, r1, r2
 8008bd0:	d902      	bls.n	8008bd8 <memmove+0x10>
 8008bd2:	4284      	cmp	r4, r0
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	d807      	bhi.n	8008be8 <memmove+0x20>
 8008bd8:	1e43      	subs	r3, r0, #1
 8008bda:	42a1      	cmp	r1, r4
 8008bdc:	d008      	beq.n	8008bf0 <memmove+0x28>
 8008bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008be6:	e7f8      	b.n	8008bda <memmove+0x12>
 8008be8:	4402      	add	r2, r0
 8008bea:	4601      	mov	r1, r0
 8008bec:	428a      	cmp	r2, r1
 8008bee:	d100      	bne.n	8008bf2 <memmove+0x2a>
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bfa:	e7f7      	b.n	8008bec <memmove+0x24>

08008bfc <_free_r>:
 8008bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bfe:	2900      	cmp	r1, #0
 8008c00:	d048      	beq.n	8008c94 <_free_r+0x98>
 8008c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c06:	9001      	str	r0, [sp, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c0e:	bfb8      	it	lt
 8008c10:	18e4      	addlt	r4, r4, r3
 8008c12:	f000 f8d3 	bl	8008dbc <__malloc_lock>
 8008c16:	4a20      	ldr	r2, [pc, #128]	; (8008c98 <_free_r+0x9c>)
 8008c18:	9801      	ldr	r0, [sp, #4]
 8008c1a:	6813      	ldr	r3, [r2, #0]
 8008c1c:	4615      	mov	r5, r2
 8008c1e:	b933      	cbnz	r3, 8008c2e <_free_r+0x32>
 8008c20:	6063      	str	r3, [r4, #4]
 8008c22:	6014      	str	r4, [r2, #0]
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c2a:	f000 b8cd 	b.w	8008dc8 <__malloc_unlock>
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	d90b      	bls.n	8008c4a <_free_r+0x4e>
 8008c32:	6821      	ldr	r1, [r4, #0]
 8008c34:	1862      	adds	r2, r4, r1
 8008c36:	4293      	cmp	r3, r2
 8008c38:	bf04      	itt	eq
 8008c3a:	681a      	ldreq	r2, [r3, #0]
 8008c3c:	685b      	ldreq	r3, [r3, #4]
 8008c3e:	6063      	str	r3, [r4, #4]
 8008c40:	bf04      	itt	eq
 8008c42:	1852      	addeq	r2, r2, r1
 8008c44:	6022      	streq	r2, [r4, #0]
 8008c46:	602c      	str	r4, [r5, #0]
 8008c48:	e7ec      	b.n	8008c24 <_free_r+0x28>
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	b10b      	cbz	r3, 8008c54 <_free_r+0x58>
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d9fa      	bls.n	8008c4a <_free_r+0x4e>
 8008c54:	6811      	ldr	r1, [r2, #0]
 8008c56:	1855      	adds	r5, r2, r1
 8008c58:	42a5      	cmp	r5, r4
 8008c5a:	d10b      	bne.n	8008c74 <_free_r+0x78>
 8008c5c:	6824      	ldr	r4, [r4, #0]
 8008c5e:	4421      	add	r1, r4
 8008c60:	1854      	adds	r4, r2, r1
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	6011      	str	r1, [r2, #0]
 8008c66:	d1dd      	bne.n	8008c24 <_free_r+0x28>
 8008c68:	681c      	ldr	r4, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	6053      	str	r3, [r2, #4]
 8008c6e:	4421      	add	r1, r4
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	e7d7      	b.n	8008c24 <_free_r+0x28>
 8008c74:	d902      	bls.n	8008c7c <_free_r+0x80>
 8008c76:	230c      	movs	r3, #12
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	e7d3      	b.n	8008c24 <_free_r+0x28>
 8008c7c:	6825      	ldr	r5, [r4, #0]
 8008c7e:	1961      	adds	r1, r4, r5
 8008c80:	428b      	cmp	r3, r1
 8008c82:	bf04      	itt	eq
 8008c84:	6819      	ldreq	r1, [r3, #0]
 8008c86:	685b      	ldreq	r3, [r3, #4]
 8008c88:	6063      	str	r3, [r4, #4]
 8008c8a:	bf04      	itt	eq
 8008c8c:	1949      	addeq	r1, r1, r5
 8008c8e:	6021      	streq	r1, [r4, #0]
 8008c90:	6054      	str	r4, [r2, #4]
 8008c92:	e7c7      	b.n	8008c24 <_free_r+0x28>
 8008c94:	b003      	add	sp, #12
 8008c96:	bd30      	pop	{r4, r5, pc}
 8008c98:	20000098 	.word	0x20000098

08008c9c <_malloc_r>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	1ccd      	adds	r5, r1, #3
 8008ca0:	f025 0503 	bic.w	r5, r5, #3
 8008ca4:	3508      	adds	r5, #8
 8008ca6:	2d0c      	cmp	r5, #12
 8008ca8:	bf38      	it	cc
 8008caa:	250c      	movcc	r5, #12
 8008cac:	2d00      	cmp	r5, #0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	db01      	blt.n	8008cb6 <_malloc_r+0x1a>
 8008cb2:	42a9      	cmp	r1, r5
 8008cb4:	d903      	bls.n	8008cbe <_malloc_r+0x22>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	6033      	str	r3, [r6, #0]
 8008cba:	2000      	movs	r0, #0
 8008cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cbe:	f000 f87d 	bl	8008dbc <__malloc_lock>
 8008cc2:	4921      	ldr	r1, [pc, #132]	; (8008d48 <_malloc_r+0xac>)
 8008cc4:	680a      	ldr	r2, [r1, #0]
 8008cc6:	4614      	mov	r4, r2
 8008cc8:	b99c      	cbnz	r4, 8008cf2 <_malloc_r+0x56>
 8008cca:	4f20      	ldr	r7, [pc, #128]	; (8008d4c <_malloc_r+0xb0>)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	b923      	cbnz	r3, 8008cda <_malloc_r+0x3e>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f000 f862 	bl	8008d9c <_sbrk_r>
 8008cd8:	6038      	str	r0, [r7, #0]
 8008cda:	4629      	mov	r1, r5
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 f85d 	bl	8008d9c <_sbrk_r>
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	d123      	bne.n	8008d2e <_malloc_r+0x92>
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	6033      	str	r3, [r6, #0]
 8008cea:	4630      	mov	r0, r6
 8008cec:	f000 f86c 	bl	8008dc8 <__malloc_unlock>
 8008cf0:	e7e3      	b.n	8008cba <_malloc_r+0x1e>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	1b5b      	subs	r3, r3, r5
 8008cf6:	d417      	bmi.n	8008d28 <_malloc_r+0x8c>
 8008cf8:	2b0b      	cmp	r3, #11
 8008cfa:	d903      	bls.n	8008d04 <_malloc_r+0x68>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	441c      	add	r4, r3
 8008d00:	6025      	str	r5, [r4, #0]
 8008d02:	e004      	b.n	8008d0e <_malloc_r+0x72>
 8008d04:	6863      	ldr	r3, [r4, #4]
 8008d06:	42a2      	cmp	r2, r4
 8008d08:	bf0c      	ite	eq
 8008d0a:	600b      	streq	r3, [r1, #0]
 8008d0c:	6053      	strne	r3, [r2, #4]
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f000 f85a 	bl	8008dc8 <__malloc_unlock>
 8008d14:	f104 000b 	add.w	r0, r4, #11
 8008d18:	1d23      	adds	r3, r4, #4
 8008d1a:	f020 0007 	bic.w	r0, r0, #7
 8008d1e:	1ac2      	subs	r2, r0, r3
 8008d20:	d0cc      	beq.n	8008cbc <_malloc_r+0x20>
 8008d22:	1a1b      	subs	r3, r3, r0
 8008d24:	50a3      	str	r3, [r4, r2]
 8008d26:	e7c9      	b.n	8008cbc <_malloc_r+0x20>
 8008d28:	4622      	mov	r2, r4
 8008d2a:	6864      	ldr	r4, [r4, #4]
 8008d2c:	e7cc      	b.n	8008cc8 <_malloc_r+0x2c>
 8008d2e:	1cc4      	adds	r4, r0, #3
 8008d30:	f024 0403 	bic.w	r4, r4, #3
 8008d34:	42a0      	cmp	r0, r4
 8008d36:	d0e3      	beq.n	8008d00 <_malloc_r+0x64>
 8008d38:	1a21      	subs	r1, r4, r0
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f000 f82e 	bl	8008d9c <_sbrk_r>
 8008d40:	3001      	adds	r0, #1
 8008d42:	d1dd      	bne.n	8008d00 <_malloc_r+0x64>
 8008d44:	e7cf      	b.n	8008ce6 <_malloc_r+0x4a>
 8008d46:	bf00      	nop
 8008d48:	20000098 	.word	0x20000098
 8008d4c:	2000009c 	.word	0x2000009c

08008d50 <_realloc_r>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	4607      	mov	r7, r0
 8008d54:	4614      	mov	r4, r2
 8008d56:	460e      	mov	r6, r1
 8008d58:	b921      	cbnz	r1, 8008d64 <_realloc_r+0x14>
 8008d5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d5e:	4611      	mov	r1, r2
 8008d60:	f7ff bf9c 	b.w	8008c9c <_malloc_r>
 8008d64:	b922      	cbnz	r2, 8008d70 <_realloc_r+0x20>
 8008d66:	f7ff ff49 	bl	8008bfc <_free_r>
 8008d6a:	4625      	mov	r5, r4
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d70:	f000 f830 	bl	8008dd4 <_malloc_usable_size_r>
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d20f      	bcs.n	8008d98 <_realloc_r+0x48>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	f7ff ff8e 	bl	8008c9c <_malloc_r>
 8008d80:	4605      	mov	r5, r0
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d0f2      	beq.n	8008d6c <_realloc_r+0x1c>
 8008d86:	4631      	mov	r1, r6
 8008d88:	4622      	mov	r2, r4
 8008d8a:	f7ff ff0f 	bl	8008bac <memcpy>
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff ff33 	bl	8008bfc <_free_r>
 8008d96:	e7e9      	b.n	8008d6c <_realloc_r+0x1c>
 8008d98:	4635      	mov	r5, r6
 8008d9a:	e7e7      	b.n	8008d6c <_realloc_r+0x1c>

08008d9c <_sbrk_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4d06      	ldr	r5, [pc, #24]	; (8008db8 <_sbrk_r+0x1c>)
 8008da0:	2300      	movs	r3, #0
 8008da2:	4604      	mov	r4, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	f7f9 f85e 	bl	8001e68 <_sbrk>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_sbrk_r+0x1a>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_sbrk_r+0x1a>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	200005a4 	.word	0x200005a4

08008dbc <__malloc_lock>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__malloc_lock+0x8>)
 8008dbe:	f000 b811 	b.w	8008de4 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	200005ac 	.word	0x200005ac

08008dc8 <__malloc_unlock>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	; (8008dd0 <__malloc_unlock+0x8>)
 8008dca:	f000 b80c 	b.w	8008de6 <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	200005ac 	.word	0x200005ac

08008dd4 <_malloc_usable_size_r>:
 8008dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd8:	1f18      	subs	r0, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfbc      	itt	lt
 8008dde:	580b      	ldrlt	r3, [r1, r0]
 8008de0:	18c0      	addlt	r0, r0, r3
 8008de2:	4770      	bx	lr

08008de4 <__retarget_lock_acquire_recursive>:
 8008de4:	4770      	bx	lr

08008de6 <__retarget_lock_release_recursive>:
 8008de6:	4770      	bx	lr

08008de8 <sin>:
 8008de8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dea:	ec53 2b10 	vmov	r2, r3, d0
 8008dee:	4826      	ldr	r0, [pc, #152]	; (8008e88 <sin+0xa0>)
 8008df0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008df4:	4281      	cmp	r1, r0
 8008df6:	dc07      	bgt.n	8008e08 <sin+0x20>
 8008df8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008e80 <sin+0x98>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f000 fe5b 	bl	8009ab8 <__kernel_sin>
 8008e02:	ec51 0b10 	vmov	r0, r1, d0
 8008e06:	e007      	b.n	8008e18 <sin+0x30>
 8008e08:	4820      	ldr	r0, [pc, #128]	; (8008e8c <sin+0xa4>)
 8008e0a:	4281      	cmp	r1, r0
 8008e0c:	dd09      	ble.n	8008e22 <sin+0x3a>
 8008e0e:	ee10 0a10 	vmov	r0, s0
 8008e12:	4619      	mov	r1, r3
 8008e14:	f7f7 fa08 	bl	8000228 <__aeabi_dsub>
 8008e18:	ec41 0b10 	vmov	d0, r0, r1
 8008e1c:	b005      	add	sp, #20
 8008e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e22:	4668      	mov	r0, sp
 8008e24:	f000 f834 	bl	8008e90 <__ieee754_rem_pio2>
 8008e28:	f000 0003 	and.w	r0, r0, #3
 8008e2c:	2801      	cmp	r0, #1
 8008e2e:	d008      	beq.n	8008e42 <sin+0x5a>
 8008e30:	2802      	cmp	r0, #2
 8008e32:	d00d      	beq.n	8008e50 <sin+0x68>
 8008e34:	b9d0      	cbnz	r0, 8008e6c <sin+0x84>
 8008e36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e3a:	ed9d 0b00 	vldr	d0, [sp]
 8008e3e:	2001      	movs	r0, #1
 8008e40:	e7dd      	b.n	8008dfe <sin+0x16>
 8008e42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e46:	ed9d 0b00 	vldr	d0, [sp]
 8008e4a:	f000 fa2d 	bl	80092a8 <__kernel_cos>
 8008e4e:	e7d8      	b.n	8008e02 <sin+0x1a>
 8008e50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e54:	ed9d 0b00 	vldr	d0, [sp]
 8008e58:	2001      	movs	r0, #1
 8008e5a:	f000 fe2d 	bl	8009ab8 <__kernel_sin>
 8008e5e:	ec53 2b10 	vmov	r2, r3, d0
 8008e62:	ee10 0a10 	vmov	r0, s0
 8008e66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008e6a:	e7d5      	b.n	8008e18 <sin+0x30>
 8008e6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e70:	ed9d 0b00 	vldr	d0, [sp]
 8008e74:	f000 fa18 	bl	80092a8 <__kernel_cos>
 8008e78:	e7f1      	b.n	8008e5e <sin+0x76>
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w
	...
 8008e88:	3fe921fb 	.word	0x3fe921fb
 8008e8c:	7fefffff 	.word	0x7fefffff

08008e90 <__ieee754_rem_pio2>:
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	ed2d 8b02 	vpush	{d8}
 8008e98:	ec55 4b10 	vmov	r4, r5, d0
 8008e9c:	4bca      	ldr	r3, [pc, #808]	; (80091c8 <__ieee754_rem_pio2+0x338>)
 8008e9e:	b08b      	sub	sp, #44	; 0x2c
 8008ea0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008ea4:	4598      	cmp	r8, r3
 8008ea6:	4682      	mov	sl, r0
 8008ea8:	9502      	str	r5, [sp, #8]
 8008eaa:	dc08      	bgt.n	8008ebe <__ieee754_rem_pio2+0x2e>
 8008eac:	2200      	movs	r2, #0
 8008eae:	2300      	movs	r3, #0
 8008eb0:	ed80 0b00 	vstr	d0, [r0]
 8008eb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008eb8:	f04f 0b00 	mov.w	fp, #0
 8008ebc:	e028      	b.n	8008f10 <__ieee754_rem_pio2+0x80>
 8008ebe:	4bc3      	ldr	r3, [pc, #780]	; (80091cc <__ieee754_rem_pio2+0x33c>)
 8008ec0:	4598      	cmp	r8, r3
 8008ec2:	dc78      	bgt.n	8008fb6 <__ieee754_rem_pio2+0x126>
 8008ec4:	9b02      	ldr	r3, [sp, #8]
 8008ec6:	4ec2      	ldr	r6, [pc, #776]	; (80091d0 <__ieee754_rem_pio2+0x340>)
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	ee10 0a10 	vmov	r0, s0
 8008ece:	a3b0      	add	r3, pc, #704	; (adr r3, 8009190 <__ieee754_rem_pio2+0x300>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	dd39      	ble.n	8008f4c <__ieee754_rem_pio2+0xbc>
 8008ed8:	f7f7 f9a6 	bl	8000228 <__aeabi_dsub>
 8008edc:	45b0      	cmp	r8, r6
 8008ede:	4604      	mov	r4, r0
 8008ee0:	460d      	mov	r5, r1
 8008ee2:	d01b      	beq.n	8008f1c <__ieee754_rem_pio2+0x8c>
 8008ee4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009198 <__ieee754_rem_pio2+0x308>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f7f7 f99d 	bl	8000228 <__aeabi_dsub>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	e9ca 2300 	strd	r2, r3, [sl]
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f7f7 f995 	bl	8000228 <__aeabi_dsub>
 8008efe:	a3a6      	add	r3, pc, #664	; (adr r3, 8009198 <__ieee754_rem_pio2+0x308>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f7f7 f990 	bl	8000228 <__aeabi_dsub>
 8008f08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f0c:	f04f 0b01 	mov.w	fp, #1
 8008f10:	4658      	mov	r0, fp
 8008f12:	b00b      	add	sp, #44	; 0x2c
 8008f14:	ecbd 8b02 	vpop	{d8}
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	a3a0      	add	r3, pc, #640	; (adr r3, 80091a0 <__ieee754_rem_pio2+0x310>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f7f7 f981 	bl	8000228 <__aeabi_dsub>
 8008f26:	a3a0      	add	r3, pc, #640	; (adr r3, 80091a8 <__ieee754_rem_pio2+0x318>)
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	460d      	mov	r5, r1
 8008f30:	f7f7 f97a 	bl	8000228 <__aeabi_dsub>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	e9ca 2300 	strd	r2, r3, [sl]
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7f7 f972 	bl	8000228 <__aeabi_dsub>
 8008f44:	a398      	add	r3, pc, #608	; (adr r3, 80091a8 <__ieee754_rem_pio2+0x318>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	e7db      	b.n	8008f04 <__ieee754_rem_pio2+0x74>
 8008f4c:	f7f7 f96e 	bl	800022c <__adddf3>
 8008f50:	45b0      	cmp	r8, r6
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	d016      	beq.n	8008f86 <__ieee754_rem_pio2+0xf6>
 8008f58:	a38f      	add	r3, pc, #572	; (adr r3, 8009198 <__ieee754_rem_pio2+0x308>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 f965 	bl	800022c <__adddf3>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	e9ca 2300 	strd	r2, r3, [sl]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f7f7 f95b 	bl	8000228 <__aeabi_dsub>
 8008f72:	a389      	add	r3, pc, #548	; (adr r3, 8009198 <__ieee754_rem_pio2+0x308>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 f958 	bl	800022c <__adddf3>
 8008f7c:	f04f 3bff 	mov.w	fp, #4294967295
 8008f80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f84:	e7c4      	b.n	8008f10 <__ieee754_rem_pio2+0x80>
 8008f86:	a386      	add	r3, pc, #536	; (adr r3, 80091a0 <__ieee754_rem_pio2+0x310>)
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	f7f7 f94e 	bl	800022c <__adddf3>
 8008f90:	a385      	add	r3, pc, #532	; (adr r3, 80091a8 <__ieee754_rem_pio2+0x318>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	4604      	mov	r4, r0
 8008f98:	460d      	mov	r5, r1
 8008f9a:	f7f7 f947 	bl	800022c <__adddf3>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	e9ca 2300 	strd	r2, r3, [sl]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	4629      	mov	r1, r5
 8008faa:	f7f7 f93d 	bl	8000228 <__aeabi_dsub>
 8008fae:	a37e      	add	r3, pc, #504	; (adr r3, 80091a8 <__ieee754_rem_pio2+0x318>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	e7e0      	b.n	8008f78 <__ieee754_rem_pio2+0xe8>
 8008fb6:	4b87      	ldr	r3, [pc, #540]	; (80091d4 <__ieee754_rem_pio2+0x344>)
 8008fb8:	4598      	cmp	r8, r3
 8008fba:	f300 80d9 	bgt.w	8009170 <__ieee754_rem_pio2+0x2e0>
 8008fbe:	f000 fe39 	bl	8009c34 <fabs>
 8008fc2:	ec55 4b10 	vmov	r4, r5, d0
 8008fc6:	ee10 0a10 	vmov	r0, s0
 8008fca:	a379      	add	r3, pc, #484	; (adr r3, 80091b0 <__ieee754_rem_pio2+0x320>)
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	f7f7 fae1 	bl	8000598 <__aeabi_dmul>
 8008fd6:	4b80      	ldr	r3, [pc, #512]	; (80091d8 <__ieee754_rem_pio2+0x348>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f7f7 f927 	bl	800022c <__adddf3>
 8008fde:	f7f7 fd75 	bl	8000acc <__aeabi_d2iz>
 8008fe2:	4683      	mov	fp, r0
 8008fe4:	f7f7 fa6e 	bl	80004c4 <__aeabi_i2d>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	ec43 2b18 	vmov	d8, r2, r3
 8008ff0:	a367      	add	r3, pc, #412	; (adr r3, 8009190 <__ieee754_rem_pio2+0x300>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 facf 	bl	8000598 <__aeabi_dmul>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	f7f7 f911 	bl	8000228 <__aeabi_dsub>
 8009006:	a364      	add	r3, pc, #400	; (adr r3, 8009198 <__ieee754_rem_pio2+0x308>)
 8009008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900c:	4606      	mov	r6, r0
 800900e:	460f      	mov	r7, r1
 8009010:	ec51 0b18 	vmov	r0, r1, d8
 8009014:	f7f7 fac0 	bl	8000598 <__aeabi_dmul>
 8009018:	f1bb 0f1f 	cmp.w	fp, #31
 800901c:	4604      	mov	r4, r0
 800901e:	460d      	mov	r5, r1
 8009020:	dc0d      	bgt.n	800903e <__ieee754_rem_pio2+0x1ae>
 8009022:	4b6e      	ldr	r3, [pc, #440]	; (80091dc <__ieee754_rem_pio2+0x34c>)
 8009024:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800902c:	4543      	cmp	r3, r8
 800902e:	d006      	beq.n	800903e <__ieee754_rem_pio2+0x1ae>
 8009030:	4622      	mov	r2, r4
 8009032:	462b      	mov	r3, r5
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 f8f6 	bl	8000228 <__aeabi_dsub>
 800903c:	e00f      	b.n	800905e <__ieee754_rem_pio2+0x1ce>
 800903e:	462b      	mov	r3, r5
 8009040:	4622      	mov	r2, r4
 8009042:	4630      	mov	r0, r6
 8009044:	4639      	mov	r1, r7
 8009046:	f7f7 f8ef 	bl	8000228 <__aeabi_dsub>
 800904a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800904e:	9303      	str	r3, [sp, #12]
 8009050:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009054:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009058:	f1b8 0f10 	cmp.w	r8, #16
 800905c:	dc02      	bgt.n	8009064 <__ieee754_rem_pio2+0x1d4>
 800905e:	e9ca 0100 	strd	r0, r1, [sl]
 8009062:	e039      	b.n	80090d8 <__ieee754_rem_pio2+0x248>
 8009064:	a34e      	add	r3, pc, #312	; (adr r3, 80091a0 <__ieee754_rem_pio2+0x310>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	ec51 0b18 	vmov	r0, r1, d8
 800906e:	f7f7 fa93 	bl	8000598 <__aeabi_dmul>
 8009072:	4604      	mov	r4, r0
 8009074:	460d      	mov	r5, r1
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4630      	mov	r0, r6
 800907c:	4639      	mov	r1, r7
 800907e:	f7f7 f8d3 	bl	8000228 <__aeabi_dsub>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4680      	mov	r8, r0
 8009088:	4689      	mov	r9, r1
 800908a:	4630      	mov	r0, r6
 800908c:	4639      	mov	r1, r7
 800908e:	f7f7 f8cb 	bl	8000228 <__aeabi_dsub>
 8009092:	4622      	mov	r2, r4
 8009094:	462b      	mov	r3, r5
 8009096:	f7f7 f8c7 	bl	8000228 <__aeabi_dsub>
 800909a:	a343      	add	r3, pc, #268	; (adr r3, 80091a8 <__ieee754_rem_pio2+0x318>)
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	ec51 0b18 	vmov	r0, r1, d8
 80090a8:	f7f7 fa76 	bl	8000598 <__aeabi_dmul>
 80090ac:	4622      	mov	r2, r4
 80090ae:	462b      	mov	r3, r5
 80090b0:	f7f7 f8ba 	bl	8000228 <__aeabi_dsub>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	4640      	mov	r0, r8
 80090be:	4649      	mov	r1, r9
 80090c0:	f7f7 f8b2 	bl	8000228 <__aeabi_dsub>
 80090c4:	9a03      	ldr	r2, [sp, #12]
 80090c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	2b31      	cmp	r3, #49	; 0x31
 80090ce:	dc24      	bgt.n	800911a <__ieee754_rem_pio2+0x28a>
 80090d0:	e9ca 0100 	strd	r0, r1, [sl]
 80090d4:	4646      	mov	r6, r8
 80090d6:	464f      	mov	r7, r9
 80090d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80090dc:	4630      	mov	r0, r6
 80090de:	4642      	mov	r2, r8
 80090e0:	464b      	mov	r3, r9
 80090e2:	4639      	mov	r1, r7
 80090e4:	f7f7 f8a0 	bl	8000228 <__aeabi_dsub>
 80090e8:	462b      	mov	r3, r5
 80090ea:	4622      	mov	r2, r4
 80090ec:	f7f7 f89c 	bl	8000228 <__aeabi_dsub>
 80090f0:	9b02      	ldr	r3, [sp, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090f8:	f6bf af0a 	bge.w	8008f10 <__ieee754_rem_pio2+0x80>
 80090fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009100:	f8ca 3004 	str.w	r3, [sl, #4]
 8009104:	f8ca 8000 	str.w	r8, [sl]
 8009108:	f8ca 0008 	str.w	r0, [sl, #8]
 800910c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009110:	f8ca 300c 	str.w	r3, [sl, #12]
 8009114:	f1cb 0b00 	rsb	fp, fp, #0
 8009118:	e6fa      	b.n	8008f10 <__ieee754_rem_pio2+0x80>
 800911a:	a327      	add	r3, pc, #156	; (adr r3, 80091b8 <__ieee754_rem_pio2+0x328>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	ec51 0b18 	vmov	r0, r1, d8
 8009124:	f7f7 fa38 	bl	8000598 <__aeabi_dmul>
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4640      	mov	r0, r8
 8009132:	4649      	mov	r1, r9
 8009134:	f7f7 f878 	bl	8000228 <__aeabi_dsub>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4606      	mov	r6, r0
 800913e:	460f      	mov	r7, r1
 8009140:	4640      	mov	r0, r8
 8009142:	4649      	mov	r1, r9
 8009144:	f7f7 f870 	bl	8000228 <__aeabi_dsub>
 8009148:	4622      	mov	r2, r4
 800914a:	462b      	mov	r3, r5
 800914c:	f7f7 f86c 	bl	8000228 <__aeabi_dsub>
 8009150:	a31b      	add	r3, pc, #108	; (adr r3, 80091c0 <__ieee754_rem_pio2+0x330>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	4604      	mov	r4, r0
 8009158:	460d      	mov	r5, r1
 800915a:	ec51 0b18 	vmov	r0, r1, d8
 800915e:	f7f7 fa1b 	bl	8000598 <__aeabi_dmul>
 8009162:	4622      	mov	r2, r4
 8009164:	462b      	mov	r3, r5
 8009166:	f7f7 f85f 	bl	8000228 <__aeabi_dsub>
 800916a:	4604      	mov	r4, r0
 800916c:	460d      	mov	r5, r1
 800916e:	e75f      	b.n	8009030 <__ieee754_rem_pio2+0x1a0>
 8009170:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <__ieee754_rem_pio2+0x350>)
 8009172:	4598      	cmp	r8, r3
 8009174:	dd36      	ble.n	80091e4 <__ieee754_rem_pio2+0x354>
 8009176:	ee10 2a10 	vmov	r2, s0
 800917a:	462b      	mov	r3, r5
 800917c:	4620      	mov	r0, r4
 800917e:	4629      	mov	r1, r5
 8009180:	f7f7 f852 	bl	8000228 <__aeabi_dsub>
 8009184:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009188:	e9ca 0100 	strd	r0, r1, [sl]
 800918c:	e694      	b.n	8008eb8 <__ieee754_rem_pio2+0x28>
 800918e:	bf00      	nop
 8009190:	54400000 	.word	0x54400000
 8009194:	3ff921fb 	.word	0x3ff921fb
 8009198:	1a626331 	.word	0x1a626331
 800919c:	3dd0b461 	.word	0x3dd0b461
 80091a0:	1a600000 	.word	0x1a600000
 80091a4:	3dd0b461 	.word	0x3dd0b461
 80091a8:	2e037073 	.word	0x2e037073
 80091ac:	3ba3198a 	.word	0x3ba3198a
 80091b0:	6dc9c883 	.word	0x6dc9c883
 80091b4:	3fe45f30 	.word	0x3fe45f30
 80091b8:	2e000000 	.word	0x2e000000
 80091bc:	3ba3198a 	.word	0x3ba3198a
 80091c0:	252049c1 	.word	0x252049c1
 80091c4:	397b839a 	.word	0x397b839a
 80091c8:	3fe921fb 	.word	0x3fe921fb
 80091cc:	4002d97b 	.word	0x4002d97b
 80091d0:	3ff921fb 	.word	0x3ff921fb
 80091d4:	413921fb 	.word	0x413921fb
 80091d8:	3fe00000 	.word	0x3fe00000
 80091dc:	0800a01c 	.word	0x0800a01c
 80091e0:	7fefffff 	.word	0x7fefffff
 80091e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80091e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80091ec:	ee10 0a10 	vmov	r0, s0
 80091f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80091f4:	ee10 6a10 	vmov	r6, s0
 80091f8:	460f      	mov	r7, r1
 80091fa:	f7f7 fc67 	bl	8000acc <__aeabi_d2iz>
 80091fe:	f7f7 f961 	bl	80004c4 <__aeabi_i2d>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	4630      	mov	r0, r6
 8009208:	4639      	mov	r1, r7
 800920a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800920e:	f7f7 f80b 	bl	8000228 <__aeabi_dsub>
 8009212:	4b22      	ldr	r3, [pc, #136]	; (800929c <__ieee754_rem_pio2+0x40c>)
 8009214:	2200      	movs	r2, #0
 8009216:	f7f7 f9bf 	bl	8000598 <__aeabi_dmul>
 800921a:	460f      	mov	r7, r1
 800921c:	4606      	mov	r6, r0
 800921e:	f7f7 fc55 	bl	8000acc <__aeabi_d2iz>
 8009222:	f7f7 f94f 	bl	80004c4 <__aeabi_i2d>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4630      	mov	r0, r6
 800922c:	4639      	mov	r1, r7
 800922e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009232:	f7f6 fff9 	bl	8000228 <__aeabi_dsub>
 8009236:	4b19      	ldr	r3, [pc, #100]	; (800929c <__ieee754_rem_pio2+0x40c>)
 8009238:	2200      	movs	r2, #0
 800923a:	f7f7 f9ad 	bl	8000598 <__aeabi_dmul>
 800923e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009242:	ad04      	add	r5, sp, #16
 8009244:	f04f 0803 	mov.w	r8, #3
 8009248:	46a9      	mov	r9, r5
 800924a:	2600      	movs	r6, #0
 800924c:	2700      	movs	r7, #0
 800924e:	4632      	mov	r2, r6
 8009250:	463b      	mov	r3, r7
 8009252:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009256:	46c3      	mov	fp, r8
 8009258:	3d08      	subs	r5, #8
 800925a:	f108 38ff 	add.w	r8, r8, #4294967295
 800925e:	f7f7 fc03 	bl	8000a68 <__aeabi_dcmpeq>
 8009262:	2800      	cmp	r0, #0
 8009264:	d1f3      	bne.n	800924e <__ieee754_rem_pio2+0x3be>
 8009266:	4b0e      	ldr	r3, [pc, #56]	; (80092a0 <__ieee754_rem_pio2+0x410>)
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	2302      	movs	r3, #2
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	4622      	mov	r2, r4
 8009270:	465b      	mov	r3, fp
 8009272:	4651      	mov	r1, sl
 8009274:	4648      	mov	r0, r9
 8009276:	f000 f8df 	bl	8009438 <__kernel_rem_pio2>
 800927a:	9b02      	ldr	r3, [sp, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	4683      	mov	fp, r0
 8009280:	f6bf ae46 	bge.w	8008f10 <__ieee754_rem_pio2+0x80>
 8009284:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009288:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800928c:	f8ca 3004 	str.w	r3, [sl, #4]
 8009290:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009294:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009298:	e73a      	b.n	8009110 <__ieee754_rem_pio2+0x280>
 800929a:	bf00      	nop
 800929c:	41700000 	.word	0x41700000
 80092a0:	0800a09c 	.word	0x0800a09c
 80092a4:	00000000 	.word	0x00000000

080092a8 <__kernel_cos>:
 80092a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	ec57 6b10 	vmov	r6, r7, d0
 80092b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80092b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80092b8:	ed8d 1b00 	vstr	d1, [sp]
 80092bc:	da07      	bge.n	80092ce <__kernel_cos+0x26>
 80092be:	ee10 0a10 	vmov	r0, s0
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f7 fc02 	bl	8000acc <__aeabi_d2iz>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	f000 8088 	beq.w	80093de <__kernel_cos+0x136>
 80092ce:	4632      	mov	r2, r6
 80092d0:	463b      	mov	r3, r7
 80092d2:	4630      	mov	r0, r6
 80092d4:	4639      	mov	r1, r7
 80092d6:	f7f7 f95f 	bl	8000598 <__aeabi_dmul>
 80092da:	4b51      	ldr	r3, [pc, #324]	; (8009420 <__kernel_cos+0x178>)
 80092dc:	2200      	movs	r2, #0
 80092de:	4604      	mov	r4, r0
 80092e0:	460d      	mov	r5, r1
 80092e2:	f7f7 f959 	bl	8000598 <__aeabi_dmul>
 80092e6:	a340      	add	r3, pc, #256	; (adr r3, 80093e8 <__kernel_cos+0x140>)
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	4682      	mov	sl, r0
 80092ee:	468b      	mov	fp, r1
 80092f0:	4620      	mov	r0, r4
 80092f2:	4629      	mov	r1, r5
 80092f4:	f7f7 f950 	bl	8000598 <__aeabi_dmul>
 80092f8:	a33d      	add	r3, pc, #244	; (adr r3, 80093f0 <__kernel_cos+0x148>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f6 ff95 	bl	800022c <__adddf3>
 8009302:	4622      	mov	r2, r4
 8009304:	462b      	mov	r3, r5
 8009306:	f7f7 f947 	bl	8000598 <__aeabi_dmul>
 800930a:	a33b      	add	r3, pc, #236	; (adr r3, 80093f8 <__kernel_cos+0x150>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f6 ff8a 	bl	8000228 <__aeabi_dsub>
 8009314:	4622      	mov	r2, r4
 8009316:	462b      	mov	r3, r5
 8009318:	f7f7 f93e 	bl	8000598 <__aeabi_dmul>
 800931c:	a338      	add	r3, pc, #224	; (adr r3, 8009400 <__kernel_cos+0x158>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f6 ff83 	bl	800022c <__adddf3>
 8009326:	4622      	mov	r2, r4
 8009328:	462b      	mov	r3, r5
 800932a:	f7f7 f935 	bl	8000598 <__aeabi_dmul>
 800932e:	a336      	add	r3, pc, #216	; (adr r3, 8009408 <__kernel_cos+0x160>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f6 ff78 	bl	8000228 <__aeabi_dsub>
 8009338:	4622      	mov	r2, r4
 800933a:	462b      	mov	r3, r5
 800933c:	f7f7 f92c 	bl	8000598 <__aeabi_dmul>
 8009340:	a333      	add	r3, pc, #204	; (adr r3, 8009410 <__kernel_cos+0x168>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f6 ff71 	bl	800022c <__adddf3>
 800934a:	4622      	mov	r2, r4
 800934c:	462b      	mov	r3, r5
 800934e:	f7f7 f923 	bl	8000598 <__aeabi_dmul>
 8009352:	4622      	mov	r2, r4
 8009354:	462b      	mov	r3, r5
 8009356:	f7f7 f91f 	bl	8000598 <__aeabi_dmul>
 800935a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	4630      	mov	r0, r6
 8009364:	4639      	mov	r1, r7
 8009366:	f7f7 f917 	bl	8000598 <__aeabi_dmul>
 800936a:	460b      	mov	r3, r1
 800936c:	4602      	mov	r2, r0
 800936e:	4629      	mov	r1, r5
 8009370:	4620      	mov	r0, r4
 8009372:	f7f6 ff59 	bl	8000228 <__aeabi_dsub>
 8009376:	4b2b      	ldr	r3, [pc, #172]	; (8009424 <__kernel_cos+0x17c>)
 8009378:	4598      	cmp	r8, r3
 800937a:	4606      	mov	r6, r0
 800937c:	460f      	mov	r7, r1
 800937e:	dc10      	bgt.n	80093a2 <__kernel_cos+0xfa>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4650      	mov	r0, sl
 8009386:	4659      	mov	r1, fp
 8009388:	f7f6 ff4e 	bl	8000228 <__aeabi_dsub>
 800938c:	460b      	mov	r3, r1
 800938e:	4926      	ldr	r1, [pc, #152]	; (8009428 <__kernel_cos+0x180>)
 8009390:	4602      	mov	r2, r0
 8009392:	2000      	movs	r0, #0
 8009394:	f7f6 ff48 	bl	8000228 <__aeabi_dsub>
 8009398:	ec41 0b10 	vmov	d0, r0, r1
 800939c:	b003      	add	sp, #12
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a2:	4b22      	ldr	r3, [pc, #136]	; (800942c <__kernel_cos+0x184>)
 80093a4:	4920      	ldr	r1, [pc, #128]	; (8009428 <__kernel_cos+0x180>)
 80093a6:	4598      	cmp	r8, r3
 80093a8:	bfcc      	ite	gt
 80093aa:	4d21      	ldrgt	r5, [pc, #132]	; (8009430 <__kernel_cos+0x188>)
 80093ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80093b0:	2400      	movs	r4, #0
 80093b2:	4622      	mov	r2, r4
 80093b4:	462b      	mov	r3, r5
 80093b6:	2000      	movs	r0, #0
 80093b8:	f7f6 ff36 	bl	8000228 <__aeabi_dsub>
 80093bc:	4622      	mov	r2, r4
 80093be:	4680      	mov	r8, r0
 80093c0:	4689      	mov	r9, r1
 80093c2:	462b      	mov	r3, r5
 80093c4:	4650      	mov	r0, sl
 80093c6:	4659      	mov	r1, fp
 80093c8:	f7f6 ff2e 	bl	8000228 <__aeabi_dsub>
 80093cc:	4632      	mov	r2, r6
 80093ce:	463b      	mov	r3, r7
 80093d0:	f7f6 ff2a 	bl	8000228 <__aeabi_dsub>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4640      	mov	r0, r8
 80093da:	4649      	mov	r1, r9
 80093dc:	e7da      	b.n	8009394 <__kernel_cos+0xec>
 80093de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009418 <__kernel_cos+0x170>
 80093e2:	e7db      	b.n	800939c <__kernel_cos+0xf4>
 80093e4:	f3af 8000 	nop.w
 80093e8:	be8838d4 	.word	0xbe8838d4
 80093ec:	bda8fae9 	.word	0xbda8fae9
 80093f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80093f4:	3e21ee9e 	.word	0x3e21ee9e
 80093f8:	809c52ad 	.word	0x809c52ad
 80093fc:	3e927e4f 	.word	0x3e927e4f
 8009400:	19cb1590 	.word	0x19cb1590
 8009404:	3efa01a0 	.word	0x3efa01a0
 8009408:	16c15177 	.word	0x16c15177
 800940c:	3f56c16c 	.word	0x3f56c16c
 8009410:	5555554c 	.word	0x5555554c
 8009414:	3fa55555 	.word	0x3fa55555
 8009418:	00000000 	.word	0x00000000
 800941c:	3ff00000 	.word	0x3ff00000
 8009420:	3fe00000 	.word	0x3fe00000
 8009424:	3fd33332 	.word	0x3fd33332
 8009428:	3ff00000 	.word	0x3ff00000
 800942c:	3fe90000 	.word	0x3fe90000
 8009430:	3fd20000 	.word	0x3fd20000
 8009434:	00000000 	.word	0x00000000

08009438 <__kernel_rem_pio2>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	ed2d 8b02 	vpush	{d8}
 8009440:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009444:	f112 0f14 	cmn.w	r2, #20
 8009448:	9308      	str	r3, [sp, #32]
 800944a:	9101      	str	r1, [sp, #4]
 800944c:	4bc6      	ldr	r3, [pc, #792]	; (8009768 <__kernel_rem_pio2+0x330>)
 800944e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009450:	9009      	str	r0, [sp, #36]	; 0x24
 8009452:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009456:	9304      	str	r3, [sp, #16]
 8009458:	9b08      	ldr	r3, [sp, #32]
 800945a:	f103 33ff 	add.w	r3, r3, #4294967295
 800945e:	bfa8      	it	ge
 8009460:	1ed4      	subge	r4, r2, #3
 8009462:	9306      	str	r3, [sp, #24]
 8009464:	bfb2      	itee	lt
 8009466:	2400      	movlt	r4, #0
 8009468:	2318      	movge	r3, #24
 800946a:	fb94 f4f3 	sdivge	r4, r4, r3
 800946e:	f06f 0317 	mvn.w	r3, #23
 8009472:	fb04 3303 	mla	r3, r4, r3, r3
 8009476:	eb03 0a02 	add.w	sl, r3, r2
 800947a:	9b04      	ldr	r3, [sp, #16]
 800947c:	9a06      	ldr	r2, [sp, #24]
 800947e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009758 <__kernel_rem_pio2+0x320>
 8009482:	eb03 0802 	add.w	r8, r3, r2
 8009486:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009488:	1aa7      	subs	r7, r4, r2
 800948a:	ae20      	add	r6, sp, #128	; 0x80
 800948c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009490:	2500      	movs	r5, #0
 8009492:	4545      	cmp	r5, r8
 8009494:	dd18      	ble.n	80094c8 <__kernel_rem_pio2+0x90>
 8009496:	9b08      	ldr	r3, [sp, #32]
 8009498:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800949c:	aa20      	add	r2, sp, #128	; 0x80
 800949e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009758 <__kernel_rem_pio2+0x320>
 80094a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80094a6:	f1c3 0301 	rsb	r3, r3, #1
 80094aa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80094ae:	9307      	str	r3, [sp, #28]
 80094b0:	9b07      	ldr	r3, [sp, #28]
 80094b2:	9a04      	ldr	r2, [sp, #16]
 80094b4:	4443      	add	r3, r8
 80094b6:	429a      	cmp	r2, r3
 80094b8:	db2f      	blt.n	800951a <__kernel_rem_pio2+0xe2>
 80094ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80094be:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80094c2:	462f      	mov	r7, r5
 80094c4:	2600      	movs	r6, #0
 80094c6:	e01b      	b.n	8009500 <__kernel_rem_pio2+0xc8>
 80094c8:	42ef      	cmn	r7, r5
 80094ca:	d407      	bmi.n	80094dc <__kernel_rem_pio2+0xa4>
 80094cc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80094d0:	f7f6 fff8 	bl	80004c4 <__aeabi_i2d>
 80094d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80094d8:	3501      	adds	r5, #1
 80094da:	e7da      	b.n	8009492 <__kernel_rem_pio2+0x5a>
 80094dc:	ec51 0b18 	vmov	r0, r1, d8
 80094e0:	e7f8      	b.n	80094d4 <__kernel_rem_pio2+0x9c>
 80094e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094e6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80094ea:	f7f7 f855 	bl	8000598 <__aeabi_dmul>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f6:	f7f6 fe99 	bl	800022c <__adddf3>
 80094fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094fe:	3601      	adds	r6, #1
 8009500:	9b06      	ldr	r3, [sp, #24]
 8009502:	429e      	cmp	r6, r3
 8009504:	f1a7 0708 	sub.w	r7, r7, #8
 8009508:	ddeb      	ble.n	80094e2 <__kernel_rem_pio2+0xaa>
 800950a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800950e:	3508      	adds	r5, #8
 8009510:	ecab 7b02 	vstmia	fp!, {d7}
 8009514:	f108 0801 	add.w	r8, r8, #1
 8009518:	e7ca      	b.n	80094b0 <__kernel_rem_pio2+0x78>
 800951a:	9b04      	ldr	r3, [sp, #16]
 800951c:	aa0c      	add	r2, sp, #48	; 0x30
 800951e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009522:	930b      	str	r3, [sp, #44]	; 0x2c
 8009524:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009526:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800952a:	9c04      	ldr	r4, [sp, #16]
 800952c:	930a      	str	r3, [sp, #40]	; 0x28
 800952e:	ab98      	add	r3, sp, #608	; 0x260
 8009530:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009534:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009538:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800953c:	f8cd b008 	str.w	fp, [sp, #8]
 8009540:	4625      	mov	r5, r4
 8009542:	2d00      	cmp	r5, #0
 8009544:	dc78      	bgt.n	8009638 <__kernel_rem_pio2+0x200>
 8009546:	ec47 6b10 	vmov	d0, r6, r7
 800954a:	4650      	mov	r0, sl
 800954c:	f000 fbfc 	bl	8009d48 <scalbn>
 8009550:	ec57 6b10 	vmov	r6, r7, d0
 8009554:	2200      	movs	r2, #0
 8009556:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800955a:	ee10 0a10 	vmov	r0, s0
 800955e:	4639      	mov	r1, r7
 8009560:	f7f7 f81a 	bl	8000598 <__aeabi_dmul>
 8009564:	ec41 0b10 	vmov	d0, r0, r1
 8009568:	f000 fb6e 	bl	8009c48 <floor>
 800956c:	4b7f      	ldr	r3, [pc, #508]	; (800976c <__kernel_rem_pio2+0x334>)
 800956e:	ec51 0b10 	vmov	r0, r1, d0
 8009572:	2200      	movs	r2, #0
 8009574:	f7f7 f810 	bl	8000598 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4630      	mov	r0, r6
 800957e:	4639      	mov	r1, r7
 8009580:	f7f6 fe52 	bl	8000228 <__aeabi_dsub>
 8009584:	460f      	mov	r7, r1
 8009586:	4606      	mov	r6, r0
 8009588:	f7f7 faa0 	bl	8000acc <__aeabi_d2iz>
 800958c:	9007      	str	r0, [sp, #28]
 800958e:	f7f6 ff99 	bl	80004c4 <__aeabi_i2d>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4630      	mov	r0, r6
 8009598:	4639      	mov	r1, r7
 800959a:	f7f6 fe45 	bl	8000228 <__aeabi_dsub>
 800959e:	f1ba 0f00 	cmp.w	sl, #0
 80095a2:	4606      	mov	r6, r0
 80095a4:	460f      	mov	r7, r1
 80095a6:	dd70      	ble.n	800968a <__kernel_rem_pio2+0x252>
 80095a8:	1e62      	subs	r2, r4, #1
 80095aa:	ab0c      	add	r3, sp, #48	; 0x30
 80095ac:	9d07      	ldr	r5, [sp, #28]
 80095ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80095b2:	f1ca 0118 	rsb	r1, sl, #24
 80095b6:	fa40 f301 	asr.w	r3, r0, r1
 80095ba:	441d      	add	r5, r3
 80095bc:	408b      	lsls	r3, r1
 80095be:	1ac0      	subs	r0, r0, r3
 80095c0:	ab0c      	add	r3, sp, #48	; 0x30
 80095c2:	9507      	str	r5, [sp, #28]
 80095c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80095c8:	f1ca 0317 	rsb	r3, sl, #23
 80095cc:	fa40 f303 	asr.w	r3, r0, r3
 80095d0:	9302      	str	r3, [sp, #8]
 80095d2:	9b02      	ldr	r3, [sp, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dd66      	ble.n	80096a6 <__kernel_rem_pio2+0x26e>
 80095d8:	9b07      	ldr	r3, [sp, #28]
 80095da:	2200      	movs	r2, #0
 80095dc:	3301      	adds	r3, #1
 80095de:	9307      	str	r3, [sp, #28]
 80095e0:	4615      	mov	r5, r2
 80095e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80095e6:	4294      	cmp	r4, r2
 80095e8:	f300 8099 	bgt.w	800971e <__kernel_rem_pio2+0x2e6>
 80095ec:	f1ba 0f00 	cmp.w	sl, #0
 80095f0:	dd07      	ble.n	8009602 <__kernel_rem_pio2+0x1ca>
 80095f2:	f1ba 0f01 	cmp.w	sl, #1
 80095f6:	f000 80a5 	beq.w	8009744 <__kernel_rem_pio2+0x30c>
 80095fa:	f1ba 0f02 	cmp.w	sl, #2
 80095fe:	f000 80c1 	beq.w	8009784 <__kernel_rem_pio2+0x34c>
 8009602:	9b02      	ldr	r3, [sp, #8]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d14e      	bne.n	80096a6 <__kernel_rem_pio2+0x26e>
 8009608:	4632      	mov	r2, r6
 800960a:	463b      	mov	r3, r7
 800960c:	4958      	ldr	r1, [pc, #352]	; (8009770 <__kernel_rem_pio2+0x338>)
 800960e:	2000      	movs	r0, #0
 8009610:	f7f6 fe0a 	bl	8000228 <__aeabi_dsub>
 8009614:	4606      	mov	r6, r0
 8009616:	460f      	mov	r7, r1
 8009618:	2d00      	cmp	r5, #0
 800961a:	d044      	beq.n	80096a6 <__kernel_rem_pio2+0x26e>
 800961c:	4650      	mov	r0, sl
 800961e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009760 <__kernel_rem_pio2+0x328>
 8009622:	f000 fb91 	bl	8009d48 <scalbn>
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	ec53 2b10 	vmov	r2, r3, d0
 800962e:	f7f6 fdfb 	bl	8000228 <__aeabi_dsub>
 8009632:	4606      	mov	r6, r0
 8009634:	460f      	mov	r7, r1
 8009636:	e036      	b.n	80096a6 <__kernel_rem_pio2+0x26e>
 8009638:	4b4e      	ldr	r3, [pc, #312]	; (8009774 <__kernel_rem_pio2+0x33c>)
 800963a:	2200      	movs	r2, #0
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f7f6 ffaa 	bl	8000598 <__aeabi_dmul>
 8009644:	f7f7 fa42 	bl	8000acc <__aeabi_d2iz>
 8009648:	f7f6 ff3c 	bl	80004c4 <__aeabi_i2d>
 800964c:	4b4a      	ldr	r3, [pc, #296]	; (8009778 <__kernel_rem_pio2+0x340>)
 800964e:	2200      	movs	r2, #0
 8009650:	4680      	mov	r8, r0
 8009652:	4689      	mov	r9, r1
 8009654:	f7f6 ffa0 	bl	8000598 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f6 fde2 	bl	8000228 <__aeabi_dsub>
 8009664:	f7f7 fa32 	bl	8000acc <__aeabi_d2iz>
 8009668:	9b02      	ldr	r3, [sp, #8]
 800966a:	f843 0b04 	str.w	r0, [r3], #4
 800966e:	3d01      	subs	r5, #1
 8009670:	9302      	str	r3, [sp, #8]
 8009672:	ab70      	add	r3, sp, #448	; 0x1c0
 8009674:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	4640      	mov	r0, r8
 800967e:	4649      	mov	r1, r9
 8009680:	f7f6 fdd4 	bl	800022c <__adddf3>
 8009684:	4606      	mov	r6, r0
 8009686:	460f      	mov	r7, r1
 8009688:	e75b      	b.n	8009542 <__kernel_rem_pio2+0x10a>
 800968a:	d105      	bne.n	8009698 <__kernel_rem_pio2+0x260>
 800968c:	1e63      	subs	r3, r4, #1
 800968e:	aa0c      	add	r2, sp, #48	; 0x30
 8009690:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009694:	15c3      	asrs	r3, r0, #23
 8009696:	e79b      	b.n	80095d0 <__kernel_rem_pio2+0x198>
 8009698:	4b38      	ldr	r3, [pc, #224]	; (800977c <__kernel_rem_pio2+0x344>)
 800969a:	2200      	movs	r2, #0
 800969c:	f7f7 fa02 	bl	8000aa4 <__aeabi_dcmpge>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d139      	bne.n	8009718 <__kernel_rem_pio2+0x2e0>
 80096a4:	9002      	str	r0, [sp, #8]
 80096a6:	2200      	movs	r2, #0
 80096a8:	2300      	movs	r3, #0
 80096aa:	4630      	mov	r0, r6
 80096ac:	4639      	mov	r1, r7
 80096ae:	f7f7 f9db 	bl	8000a68 <__aeabi_dcmpeq>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	f000 80b4 	beq.w	8009820 <__kernel_rem_pio2+0x3e8>
 80096b8:	f104 3bff 	add.w	fp, r4, #4294967295
 80096bc:	465b      	mov	r3, fp
 80096be:	2200      	movs	r2, #0
 80096c0:	9904      	ldr	r1, [sp, #16]
 80096c2:	428b      	cmp	r3, r1
 80096c4:	da65      	bge.n	8009792 <__kernel_rem_pio2+0x35a>
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	d07b      	beq.n	80097c2 <__kernel_rem_pio2+0x38a>
 80096ca:	ab0c      	add	r3, sp, #48	; 0x30
 80096cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80096d0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 80a0 	beq.w	800981a <__kernel_rem_pio2+0x3e2>
 80096da:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009760 <__kernel_rem_pio2+0x328>
 80096de:	4650      	mov	r0, sl
 80096e0:	f000 fb32 	bl	8009d48 <scalbn>
 80096e4:	4f23      	ldr	r7, [pc, #140]	; (8009774 <__kernel_rem_pio2+0x33c>)
 80096e6:	ec55 4b10 	vmov	r4, r5, d0
 80096ea:	46d8      	mov	r8, fp
 80096ec:	2600      	movs	r6, #0
 80096ee:	f1b8 0f00 	cmp.w	r8, #0
 80096f2:	f280 80cf 	bge.w	8009894 <__kernel_rem_pio2+0x45c>
 80096f6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009758 <__kernel_rem_pio2+0x320>
 80096fa:	465f      	mov	r7, fp
 80096fc:	f04f 0800 	mov.w	r8, #0
 8009700:	2f00      	cmp	r7, #0
 8009702:	f2c0 80fd 	blt.w	8009900 <__kernel_rem_pio2+0x4c8>
 8009706:	ab70      	add	r3, sp, #448	; 0x1c0
 8009708:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009780 <__kernel_rem_pio2+0x348>
 800970c:	ec55 4b18 	vmov	r4, r5, d8
 8009710:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009714:	2600      	movs	r6, #0
 8009716:	e0e5      	b.n	80098e4 <__kernel_rem_pio2+0x4ac>
 8009718:	2302      	movs	r3, #2
 800971a:	9302      	str	r3, [sp, #8]
 800971c:	e75c      	b.n	80095d8 <__kernel_rem_pio2+0x1a0>
 800971e:	f8db 3000 	ldr.w	r3, [fp]
 8009722:	b955      	cbnz	r5, 800973a <__kernel_rem_pio2+0x302>
 8009724:	b123      	cbz	r3, 8009730 <__kernel_rem_pio2+0x2f8>
 8009726:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800972a:	f8cb 3000 	str.w	r3, [fp]
 800972e:	2301      	movs	r3, #1
 8009730:	3201      	adds	r2, #1
 8009732:	f10b 0b04 	add.w	fp, fp, #4
 8009736:	461d      	mov	r5, r3
 8009738:	e755      	b.n	80095e6 <__kernel_rem_pio2+0x1ae>
 800973a:	1acb      	subs	r3, r1, r3
 800973c:	f8cb 3000 	str.w	r3, [fp]
 8009740:	462b      	mov	r3, r5
 8009742:	e7f5      	b.n	8009730 <__kernel_rem_pio2+0x2f8>
 8009744:	1e62      	subs	r2, r4, #1
 8009746:	ab0c      	add	r3, sp, #48	; 0x30
 8009748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009750:	a90c      	add	r1, sp, #48	; 0x30
 8009752:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009756:	e754      	b.n	8009602 <__kernel_rem_pio2+0x1ca>
	...
 8009764:	3ff00000 	.word	0x3ff00000
 8009768:	0800a1e8 	.word	0x0800a1e8
 800976c:	40200000 	.word	0x40200000
 8009770:	3ff00000 	.word	0x3ff00000
 8009774:	3e700000 	.word	0x3e700000
 8009778:	41700000 	.word	0x41700000
 800977c:	3fe00000 	.word	0x3fe00000
 8009780:	0800a1a8 	.word	0x0800a1a8
 8009784:	1e62      	subs	r2, r4, #1
 8009786:	ab0c      	add	r3, sp, #48	; 0x30
 8009788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009790:	e7de      	b.n	8009750 <__kernel_rem_pio2+0x318>
 8009792:	a90c      	add	r1, sp, #48	; 0x30
 8009794:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009798:	3b01      	subs	r3, #1
 800979a:	430a      	orrs	r2, r1
 800979c:	e790      	b.n	80096c0 <__kernel_rem_pio2+0x288>
 800979e:	3301      	adds	r3, #1
 80097a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80097a4:	2900      	cmp	r1, #0
 80097a6:	d0fa      	beq.n	800979e <__kernel_rem_pio2+0x366>
 80097a8:	9a08      	ldr	r2, [sp, #32]
 80097aa:	18e3      	adds	r3, r4, r3
 80097ac:	18a6      	adds	r6, r4, r2
 80097ae:	aa20      	add	r2, sp, #128	; 0x80
 80097b0:	1c65      	adds	r5, r4, #1
 80097b2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80097b6:	9302      	str	r3, [sp, #8]
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	42ab      	cmp	r3, r5
 80097bc:	da04      	bge.n	80097c8 <__kernel_rem_pio2+0x390>
 80097be:	461c      	mov	r4, r3
 80097c0:	e6b5      	b.n	800952e <__kernel_rem_pio2+0xf6>
 80097c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097c4:	2301      	movs	r3, #1
 80097c6:	e7eb      	b.n	80097a0 <__kernel_rem_pio2+0x368>
 80097c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097ce:	f7f6 fe79 	bl	80004c4 <__aeabi_i2d>
 80097d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80097d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d8:	46b3      	mov	fp, r6
 80097da:	461c      	mov	r4, r3
 80097dc:	2700      	movs	r7, #0
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	f04f 0900 	mov.w	r9, #0
 80097e6:	9b06      	ldr	r3, [sp, #24]
 80097e8:	429f      	cmp	r7, r3
 80097ea:	dd06      	ble.n	80097fa <__kernel_rem_pio2+0x3c2>
 80097ec:	ab70      	add	r3, sp, #448	; 0x1c0
 80097ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80097f2:	e9c3 8900 	strd	r8, r9, [r3]
 80097f6:	3501      	adds	r5, #1
 80097f8:	e7de      	b.n	80097b8 <__kernel_rem_pio2+0x380>
 80097fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80097fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009802:	f7f6 fec9 	bl	8000598 <__aeabi_dmul>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4640      	mov	r0, r8
 800980c:	4649      	mov	r1, r9
 800980e:	f7f6 fd0d 	bl	800022c <__adddf3>
 8009812:	3701      	adds	r7, #1
 8009814:	4680      	mov	r8, r0
 8009816:	4689      	mov	r9, r1
 8009818:	e7e5      	b.n	80097e6 <__kernel_rem_pio2+0x3ae>
 800981a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800981e:	e754      	b.n	80096ca <__kernel_rem_pio2+0x292>
 8009820:	ec47 6b10 	vmov	d0, r6, r7
 8009824:	f1ca 0000 	rsb	r0, sl, #0
 8009828:	f000 fa8e 	bl	8009d48 <scalbn>
 800982c:	ec57 6b10 	vmov	r6, r7, d0
 8009830:	4b9f      	ldr	r3, [pc, #636]	; (8009ab0 <__kernel_rem_pio2+0x678>)
 8009832:	ee10 0a10 	vmov	r0, s0
 8009836:	2200      	movs	r2, #0
 8009838:	4639      	mov	r1, r7
 800983a:	f7f7 f933 	bl	8000aa4 <__aeabi_dcmpge>
 800983e:	b300      	cbz	r0, 8009882 <__kernel_rem_pio2+0x44a>
 8009840:	4b9c      	ldr	r3, [pc, #624]	; (8009ab4 <__kernel_rem_pio2+0x67c>)
 8009842:	2200      	movs	r2, #0
 8009844:	4630      	mov	r0, r6
 8009846:	4639      	mov	r1, r7
 8009848:	f7f6 fea6 	bl	8000598 <__aeabi_dmul>
 800984c:	f7f7 f93e 	bl	8000acc <__aeabi_d2iz>
 8009850:	4605      	mov	r5, r0
 8009852:	f7f6 fe37 	bl	80004c4 <__aeabi_i2d>
 8009856:	4b96      	ldr	r3, [pc, #600]	; (8009ab0 <__kernel_rem_pio2+0x678>)
 8009858:	2200      	movs	r2, #0
 800985a:	f7f6 fe9d 	bl	8000598 <__aeabi_dmul>
 800985e:	460b      	mov	r3, r1
 8009860:	4602      	mov	r2, r0
 8009862:	4639      	mov	r1, r7
 8009864:	4630      	mov	r0, r6
 8009866:	f7f6 fcdf 	bl	8000228 <__aeabi_dsub>
 800986a:	f7f7 f92f 	bl	8000acc <__aeabi_d2iz>
 800986e:	f104 0b01 	add.w	fp, r4, #1
 8009872:	ab0c      	add	r3, sp, #48	; 0x30
 8009874:	f10a 0a18 	add.w	sl, sl, #24
 8009878:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800987c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009880:	e72b      	b.n	80096da <__kernel_rem_pio2+0x2a2>
 8009882:	4630      	mov	r0, r6
 8009884:	4639      	mov	r1, r7
 8009886:	f7f7 f921 	bl	8000acc <__aeabi_d2iz>
 800988a:	ab0c      	add	r3, sp, #48	; 0x30
 800988c:	46a3      	mov	fp, r4
 800988e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009892:	e722      	b.n	80096da <__kernel_rem_pio2+0x2a2>
 8009894:	ab70      	add	r3, sp, #448	; 0x1c0
 8009896:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800989a:	ab0c      	add	r3, sp, #48	; 0x30
 800989c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80098a0:	f7f6 fe10 	bl	80004c4 <__aeabi_i2d>
 80098a4:	4622      	mov	r2, r4
 80098a6:	462b      	mov	r3, r5
 80098a8:	f7f6 fe76 	bl	8000598 <__aeabi_dmul>
 80098ac:	4632      	mov	r2, r6
 80098ae:	e9c9 0100 	strd	r0, r1, [r9]
 80098b2:	463b      	mov	r3, r7
 80098b4:	4620      	mov	r0, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f6 fe6e 	bl	8000598 <__aeabi_dmul>
 80098bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80098c0:	4604      	mov	r4, r0
 80098c2:	460d      	mov	r5, r1
 80098c4:	e713      	b.n	80096ee <__kernel_rem_pio2+0x2b6>
 80098c6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80098ca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80098ce:	f7f6 fe63 	bl	8000598 <__aeabi_dmul>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4620      	mov	r0, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	f7f6 fca7 	bl	800022c <__adddf3>
 80098de:	3601      	adds	r6, #1
 80098e0:	4604      	mov	r4, r0
 80098e2:	460d      	mov	r5, r1
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	429e      	cmp	r6, r3
 80098e8:	dc01      	bgt.n	80098ee <__kernel_rem_pio2+0x4b6>
 80098ea:	45b0      	cmp	r8, r6
 80098ec:	daeb      	bge.n	80098c6 <__kernel_rem_pio2+0x48e>
 80098ee:	ab48      	add	r3, sp, #288	; 0x120
 80098f0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80098f4:	e9c3 4500 	strd	r4, r5, [r3]
 80098f8:	3f01      	subs	r7, #1
 80098fa:	f108 0801 	add.w	r8, r8, #1
 80098fe:	e6ff      	b.n	8009700 <__kernel_rem_pio2+0x2c8>
 8009900:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009902:	2b02      	cmp	r3, #2
 8009904:	dc0b      	bgt.n	800991e <__kernel_rem_pio2+0x4e6>
 8009906:	2b00      	cmp	r3, #0
 8009908:	dc6e      	bgt.n	80099e8 <__kernel_rem_pio2+0x5b0>
 800990a:	d045      	beq.n	8009998 <__kernel_rem_pio2+0x560>
 800990c:	9b07      	ldr	r3, [sp, #28]
 800990e:	f003 0007 	and.w	r0, r3, #7
 8009912:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009916:	ecbd 8b02 	vpop	{d8}
 800991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009920:	2b03      	cmp	r3, #3
 8009922:	d1f3      	bne.n	800990c <__kernel_rem_pio2+0x4d4>
 8009924:	ab48      	add	r3, sp, #288	; 0x120
 8009926:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800992a:	46d0      	mov	r8, sl
 800992c:	46d9      	mov	r9, fp
 800992e:	f1b9 0f00 	cmp.w	r9, #0
 8009932:	f1a8 0808 	sub.w	r8, r8, #8
 8009936:	dc64      	bgt.n	8009a02 <__kernel_rem_pio2+0x5ca>
 8009938:	465c      	mov	r4, fp
 800993a:	2c01      	cmp	r4, #1
 800993c:	f1aa 0a08 	sub.w	sl, sl, #8
 8009940:	dc7e      	bgt.n	8009a40 <__kernel_rem_pio2+0x608>
 8009942:	2000      	movs	r0, #0
 8009944:	2100      	movs	r1, #0
 8009946:	f1bb 0f01 	cmp.w	fp, #1
 800994a:	f300 8097 	bgt.w	8009a7c <__kernel_rem_pio2+0x644>
 800994e:	9b02      	ldr	r3, [sp, #8]
 8009950:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009954:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009958:	2b00      	cmp	r3, #0
 800995a:	f040 8099 	bne.w	8009a90 <__kernel_rem_pio2+0x658>
 800995e:	9b01      	ldr	r3, [sp, #4]
 8009960:	e9c3 5600 	strd	r5, r6, [r3]
 8009964:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009968:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800996c:	e7ce      	b.n	800990c <__kernel_rem_pio2+0x4d4>
 800996e:	ab48      	add	r3, sp, #288	; 0x120
 8009970:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f7f6 fc58 	bl	800022c <__adddf3>
 800997c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009980:	f1bb 0f00 	cmp.w	fp, #0
 8009984:	daf3      	bge.n	800996e <__kernel_rem_pio2+0x536>
 8009986:	9b02      	ldr	r3, [sp, #8]
 8009988:	b113      	cbz	r3, 8009990 <__kernel_rem_pio2+0x558>
 800998a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800998e:	4619      	mov	r1, r3
 8009990:	9b01      	ldr	r3, [sp, #4]
 8009992:	e9c3 0100 	strd	r0, r1, [r3]
 8009996:	e7b9      	b.n	800990c <__kernel_rem_pio2+0x4d4>
 8009998:	2000      	movs	r0, #0
 800999a:	2100      	movs	r1, #0
 800999c:	e7f0      	b.n	8009980 <__kernel_rem_pio2+0x548>
 800999e:	ab48      	add	r3, sp, #288	; 0x120
 80099a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f7f6 fc40 	bl	800022c <__adddf3>
 80099ac:	3c01      	subs	r4, #1
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	daf5      	bge.n	800999e <__kernel_rem_pio2+0x566>
 80099b2:	9b02      	ldr	r3, [sp, #8]
 80099b4:	b1e3      	cbz	r3, 80099f0 <__kernel_rem_pio2+0x5b8>
 80099b6:	4602      	mov	r2, r0
 80099b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099bc:	9c01      	ldr	r4, [sp, #4]
 80099be:	e9c4 2300 	strd	r2, r3, [r4]
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80099ca:	f7f6 fc2d 	bl	8000228 <__aeabi_dsub>
 80099ce:	ad4a      	add	r5, sp, #296	; 0x128
 80099d0:	2401      	movs	r4, #1
 80099d2:	45a3      	cmp	fp, r4
 80099d4:	da0f      	bge.n	80099f6 <__kernel_rem_pio2+0x5be>
 80099d6:	9b02      	ldr	r3, [sp, #8]
 80099d8:	b113      	cbz	r3, 80099e0 <__kernel_rem_pio2+0x5a8>
 80099da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099de:	4619      	mov	r1, r3
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80099e6:	e791      	b.n	800990c <__kernel_rem_pio2+0x4d4>
 80099e8:	465c      	mov	r4, fp
 80099ea:	2000      	movs	r0, #0
 80099ec:	2100      	movs	r1, #0
 80099ee:	e7de      	b.n	80099ae <__kernel_rem_pio2+0x576>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	e7e2      	b.n	80099bc <__kernel_rem_pio2+0x584>
 80099f6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80099fa:	f7f6 fc17 	bl	800022c <__adddf3>
 80099fe:	3401      	adds	r4, #1
 8009a00:	e7e7      	b.n	80099d2 <__kernel_rem_pio2+0x59a>
 8009a02:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009a06:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	4632      	mov	r2, r6
 8009a0e:	463b      	mov	r3, r7
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7f6 fc0b 	bl	800022c <__adddf3>
 8009a16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4629      	mov	r1, r5
 8009a22:	f7f6 fc01 	bl	8000228 <__aeabi_dsub>
 8009a26:	4632      	mov	r2, r6
 8009a28:	463b      	mov	r3, r7
 8009a2a:	f7f6 fbff 	bl	800022c <__adddf3>
 8009a2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a32:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009a36:	ed88 7b00 	vstr	d7, [r8]
 8009a3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a3e:	e776      	b.n	800992e <__kernel_rem_pio2+0x4f6>
 8009a40:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a44:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	4649      	mov	r1, r9
 8009a50:	f7f6 fbec 	bl	800022c <__adddf3>
 8009a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4649      	mov	r1, r9
 8009a60:	f7f6 fbe2 	bl	8000228 <__aeabi_dsub>
 8009a64:	4632      	mov	r2, r6
 8009a66:	463b      	mov	r3, r7
 8009a68:	f7f6 fbe0 	bl	800022c <__adddf3>
 8009a6c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a74:	ed8a 7b00 	vstr	d7, [sl]
 8009a78:	3c01      	subs	r4, #1
 8009a7a:	e75e      	b.n	800993a <__kernel_rem_pio2+0x502>
 8009a7c:	ab48      	add	r3, sp, #288	; 0x120
 8009a7e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 fbd1 	bl	800022c <__adddf3>
 8009a8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a8e:	e75a      	b.n	8009946 <__kernel_rem_pio2+0x50e>
 8009a90:	9b01      	ldr	r3, [sp, #4]
 8009a92:	9a01      	ldr	r2, [sp, #4]
 8009a94:	601d      	str	r5, [r3, #0]
 8009a96:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009a9a:	605c      	str	r4, [r3, #4]
 8009a9c:	609f      	str	r7, [r3, #8]
 8009a9e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009aa2:	60d3      	str	r3, [r2, #12]
 8009aa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009aa8:	6110      	str	r0, [r2, #16]
 8009aaa:	6153      	str	r3, [r2, #20]
 8009aac:	e72e      	b.n	800990c <__kernel_rem_pio2+0x4d4>
 8009aae:	bf00      	nop
 8009ab0:	41700000 	.word	0x41700000
 8009ab4:	3e700000 	.word	0x3e700000

08009ab8 <__kernel_sin>:
 8009ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009abc:	ed2d 8b04 	vpush	{d8-d9}
 8009ac0:	eeb0 8a41 	vmov.f32	s16, s2
 8009ac4:	eef0 8a61 	vmov.f32	s17, s3
 8009ac8:	ec55 4b10 	vmov	r4, r5, d0
 8009acc:	b083      	sub	sp, #12
 8009ace:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009ad2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009ad6:	9001      	str	r0, [sp, #4]
 8009ad8:	da06      	bge.n	8009ae8 <__kernel_sin+0x30>
 8009ada:	ee10 0a10 	vmov	r0, s0
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fff4 	bl	8000acc <__aeabi_d2iz>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d051      	beq.n	8009b8c <__kernel_sin+0xd4>
 8009ae8:	4622      	mov	r2, r4
 8009aea:	462b      	mov	r3, r5
 8009aec:	4620      	mov	r0, r4
 8009aee:	4629      	mov	r1, r5
 8009af0:	f7f6 fd52 	bl	8000598 <__aeabi_dmul>
 8009af4:	4682      	mov	sl, r0
 8009af6:	468b      	mov	fp, r1
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	f7f6 fd4a 	bl	8000598 <__aeabi_dmul>
 8009b04:	a341      	add	r3, pc, #260	; (adr r3, 8009c0c <__kernel_sin+0x154>)
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	4689      	mov	r9, r1
 8009b0e:	4650      	mov	r0, sl
 8009b10:	4659      	mov	r1, fp
 8009b12:	f7f6 fd41 	bl	8000598 <__aeabi_dmul>
 8009b16:	a33f      	add	r3, pc, #252	; (adr r3, 8009c14 <__kernel_sin+0x15c>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f7f6 fb84 	bl	8000228 <__aeabi_dsub>
 8009b20:	4652      	mov	r2, sl
 8009b22:	465b      	mov	r3, fp
 8009b24:	f7f6 fd38 	bl	8000598 <__aeabi_dmul>
 8009b28:	a33c      	add	r3, pc, #240	; (adr r3, 8009c1c <__kernel_sin+0x164>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fb7d 	bl	800022c <__adddf3>
 8009b32:	4652      	mov	r2, sl
 8009b34:	465b      	mov	r3, fp
 8009b36:	f7f6 fd2f 	bl	8000598 <__aeabi_dmul>
 8009b3a:	a33a      	add	r3, pc, #232	; (adr r3, 8009c24 <__kernel_sin+0x16c>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fb72 	bl	8000228 <__aeabi_dsub>
 8009b44:	4652      	mov	r2, sl
 8009b46:	465b      	mov	r3, fp
 8009b48:	f7f6 fd26 	bl	8000598 <__aeabi_dmul>
 8009b4c:	a337      	add	r3, pc, #220	; (adr r3, 8009c2c <__kernel_sin+0x174>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f7f6 fb6b 	bl	800022c <__adddf3>
 8009b56:	9b01      	ldr	r3, [sp, #4]
 8009b58:	4606      	mov	r6, r0
 8009b5a:	460f      	mov	r7, r1
 8009b5c:	b9eb      	cbnz	r3, 8009b9a <__kernel_sin+0xe2>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4650      	mov	r0, sl
 8009b64:	4659      	mov	r1, fp
 8009b66:	f7f6 fd17 	bl	8000598 <__aeabi_dmul>
 8009b6a:	a325      	add	r3, pc, #148	; (adr r3, 8009c00 <__kernel_sin+0x148>)
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	f7f6 fb5a 	bl	8000228 <__aeabi_dsub>
 8009b74:	4642      	mov	r2, r8
 8009b76:	464b      	mov	r3, r9
 8009b78:	f7f6 fd0e 	bl	8000598 <__aeabi_dmul>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4620      	mov	r0, r4
 8009b82:	4629      	mov	r1, r5
 8009b84:	f7f6 fb52 	bl	800022c <__adddf3>
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	ec45 4b10 	vmov	d0, r4, r5
 8009b90:	b003      	add	sp, #12
 8009b92:	ecbd 8b04 	vpop	{d8-d9}
 8009b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <__kernel_sin+0x150>)
 8009b9c:	ec51 0b18 	vmov	r0, r1, d8
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f7f6 fcf9 	bl	8000598 <__aeabi_dmul>
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	ec41 0b19 	vmov	d9, r0, r1
 8009bac:	463b      	mov	r3, r7
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	f7f6 fcf1 	bl	8000598 <__aeabi_dmul>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	ec51 0b19 	vmov	r0, r1, d9
 8009bbe:	f7f6 fb33 	bl	8000228 <__aeabi_dsub>
 8009bc2:	4652      	mov	r2, sl
 8009bc4:	465b      	mov	r3, fp
 8009bc6:	f7f6 fce7 	bl	8000598 <__aeabi_dmul>
 8009bca:	ec53 2b18 	vmov	r2, r3, d8
 8009bce:	f7f6 fb2b 	bl	8000228 <__aeabi_dsub>
 8009bd2:	a30b      	add	r3, pc, #44	; (adr r3, 8009c00 <__kernel_sin+0x148>)
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	4606      	mov	r6, r0
 8009bda:	460f      	mov	r7, r1
 8009bdc:	4640      	mov	r0, r8
 8009bde:	4649      	mov	r1, r9
 8009be0:	f7f6 fcda 	bl	8000598 <__aeabi_dmul>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f7f6 fb1e 	bl	800022c <__adddf3>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	f7f6 fb16 	bl	8000228 <__aeabi_dsub>
 8009bfc:	e7c4      	b.n	8009b88 <__kernel_sin+0xd0>
 8009bfe:	bf00      	nop
 8009c00:	55555549 	.word	0x55555549
 8009c04:	3fc55555 	.word	0x3fc55555
 8009c08:	3fe00000 	.word	0x3fe00000
 8009c0c:	5acfd57c 	.word	0x5acfd57c
 8009c10:	3de5d93a 	.word	0x3de5d93a
 8009c14:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c18:	3e5ae5e6 	.word	0x3e5ae5e6
 8009c1c:	57b1fe7d 	.word	0x57b1fe7d
 8009c20:	3ec71de3 	.word	0x3ec71de3
 8009c24:	19c161d5 	.word	0x19c161d5
 8009c28:	3f2a01a0 	.word	0x3f2a01a0
 8009c2c:	1110f8a6 	.word	0x1110f8a6
 8009c30:	3f811111 	.word	0x3f811111

08009c34 <fabs>:
 8009c34:	ec51 0b10 	vmov	r0, r1, d0
 8009c38:	ee10 2a10 	vmov	r2, s0
 8009c3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c40:	ec43 2b10 	vmov	d0, r2, r3
 8009c44:	4770      	bx	lr
	...

08009c48 <floor>:
 8009c48:	ec51 0b10 	vmov	r0, r1, d0
 8009c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009c54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009c58:	2e13      	cmp	r6, #19
 8009c5a:	ee10 5a10 	vmov	r5, s0
 8009c5e:	ee10 8a10 	vmov	r8, s0
 8009c62:	460c      	mov	r4, r1
 8009c64:	dc32      	bgt.n	8009ccc <floor+0x84>
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	da14      	bge.n	8009c94 <floor+0x4c>
 8009c6a:	a333      	add	r3, pc, #204	; (adr r3, 8009d38 <floor+0xf0>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f7f6 fadc 	bl	800022c <__adddf3>
 8009c74:	2200      	movs	r2, #0
 8009c76:	2300      	movs	r3, #0
 8009c78:	f7f6 ff1e 	bl	8000ab8 <__aeabi_dcmpgt>
 8009c7c:	b138      	cbz	r0, 8009c8e <floor+0x46>
 8009c7e:	2c00      	cmp	r4, #0
 8009c80:	da57      	bge.n	8009d32 <floor+0xea>
 8009c82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009c86:	431d      	orrs	r5, r3
 8009c88:	d001      	beq.n	8009c8e <floor+0x46>
 8009c8a:	4c2d      	ldr	r4, [pc, #180]	; (8009d40 <floor+0xf8>)
 8009c8c:	2500      	movs	r5, #0
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	e025      	b.n	8009ce0 <floor+0x98>
 8009c94:	4f2b      	ldr	r7, [pc, #172]	; (8009d44 <floor+0xfc>)
 8009c96:	4137      	asrs	r7, r6
 8009c98:	ea01 0307 	and.w	r3, r1, r7
 8009c9c:	4303      	orrs	r3, r0
 8009c9e:	d01f      	beq.n	8009ce0 <floor+0x98>
 8009ca0:	a325      	add	r3, pc, #148	; (adr r3, 8009d38 <floor+0xf0>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fac1 	bl	800022c <__adddf3>
 8009caa:	2200      	movs	r2, #0
 8009cac:	2300      	movs	r3, #0
 8009cae:	f7f6 ff03 	bl	8000ab8 <__aeabi_dcmpgt>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d0eb      	beq.n	8009c8e <floor+0x46>
 8009cb6:	2c00      	cmp	r4, #0
 8009cb8:	bfbe      	ittt	lt
 8009cba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009cbe:	fa43 f606 	asrlt.w	r6, r3, r6
 8009cc2:	19a4      	addlt	r4, r4, r6
 8009cc4:	ea24 0407 	bic.w	r4, r4, r7
 8009cc8:	2500      	movs	r5, #0
 8009cca:	e7e0      	b.n	8009c8e <floor+0x46>
 8009ccc:	2e33      	cmp	r6, #51	; 0x33
 8009cce:	dd0b      	ble.n	8009ce8 <floor+0xa0>
 8009cd0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009cd4:	d104      	bne.n	8009ce0 <floor+0x98>
 8009cd6:	ee10 2a10 	vmov	r2, s0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	f7f6 faa6 	bl	800022c <__adddf3>
 8009ce0:	ec41 0b10 	vmov	d0, r0, r1
 8009ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009cec:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf0:	fa23 f707 	lsr.w	r7, r3, r7
 8009cf4:	4207      	tst	r7, r0
 8009cf6:	d0f3      	beq.n	8009ce0 <floor+0x98>
 8009cf8:	a30f      	add	r3, pc, #60	; (adr r3, 8009d38 <floor+0xf0>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fa95 	bl	800022c <__adddf3>
 8009d02:	2200      	movs	r2, #0
 8009d04:	2300      	movs	r3, #0
 8009d06:	f7f6 fed7 	bl	8000ab8 <__aeabi_dcmpgt>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d0bf      	beq.n	8009c8e <floor+0x46>
 8009d0e:	2c00      	cmp	r4, #0
 8009d10:	da02      	bge.n	8009d18 <floor+0xd0>
 8009d12:	2e14      	cmp	r6, #20
 8009d14:	d103      	bne.n	8009d1e <floor+0xd6>
 8009d16:	3401      	adds	r4, #1
 8009d18:	ea25 0507 	bic.w	r5, r5, r7
 8009d1c:	e7b7      	b.n	8009c8e <floor+0x46>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009d24:	fa03 f606 	lsl.w	r6, r3, r6
 8009d28:	4435      	add	r5, r6
 8009d2a:	4545      	cmp	r5, r8
 8009d2c:	bf38      	it	cc
 8009d2e:	18e4      	addcc	r4, r4, r3
 8009d30:	e7f2      	b.n	8009d18 <floor+0xd0>
 8009d32:	2500      	movs	r5, #0
 8009d34:	462c      	mov	r4, r5
 8009d36:	e7aa      	b.n	8009c8e <floor+0x46>
 8009d38:	8800759c 	.word	0x8800759c
 8009d3c:	7e37e43c 	.word	0x7e37e43c
 8009d40:	bff00000 	.word	0xbff00000
 8009d44:	000fffff 	.word	0x000fffff

08009d48 <scalbn>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	ec55 4b10 	vmov	r4, r5, d0
 8009d4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009d52:	4606      	mov	r6, r0
 8009d54:	462b      	mov	r3, r5
 8009d56:	b99a      	cbnz	r2, 8009d80 <scalbn+0x38>
 8009d58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d5c:	4323      	orrs	r3, r4
 8009d5e:	d036      	beq.n	8009dce <scalbn+0x86>
 8009d60:	4b39      	ldr	r3, [pc, #228]	; (8009e48 <scalbn+0x100>)
 8009d62:	4629      	mov	r1, r5
 8009d64:	ee10 0a10 	vmov	r0, s0
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f7f6 fc15 	bl	8000598 <__aeabi_dmul>
 8009d6e:	4b37      	ldr	r3, [pc, #220]	; (8009e4c <scalbn+0x104>)
 8009d70:	429e      	cmp	r6, r3
 8009d72:	4604      	mov	r4, r0
 8009d74:	460d      	mov	r5, r1
 8009d76:	da10      	bge.n	8009d9a <scalbn+0x52>
 8009d78:	a32b      	add	r3, pc, #172	; (adr r3, 8009e28 <scalbn+0xe0>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	e03a      	b.n	8009df6 <scalbn+0xae>
 8009d80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009d84:	428a      	cmp	r2, r1
 8009d86:	d10c      	bne.n	8009da2 <scalbn+0x5a>
 8009d88:	ee10 2a10 	vmov	r2, s0
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fa4c 	bl	800022c <__adddf3>
 8009d94:	4604      	mov	r4, r0
 8009d96:	460d      	mov	r5, r1
 8009d98:	e019      	b.n	8009dce <scalbn+0x86>
 8009d9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009d9e:	460b      	mov	r3, r1
 8009da0:	3a36      	subs	r2, #54	; 0x36
 8009da2:	4432      	add	r2, r6
 8009da4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009da8:	428a      	cmp	r2, r1
 8009daa:	dd08      	ble.n	8009dbe <scalbn+0x76>
 8009dac:	2d00      	cmp	r5, #0
 8009dae:	a120      	add	r1, pc, #128	; (adr r1, 8009e30 <scalbn+0xe8>)
 8009db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db4:	da1c      	bge.n	8009df0 <scalbn+0xa8>
 8009db6:	a120      	add	r1, pc, #128	; (adr r1, 8009e38 <scalbn+0xf0>)
 8009db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dbc:	e018      	b.n	8009df0 <scalbn+0xa8>
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	dd08      	ble.n	8009dd4 <scalbn+0x8c>
 8009dc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009dca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009dce:	ec45 4b10 	vmov	d0, r4, r5
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009dd8:	da19      	bge.n	8009e0e <scalbn+0xc6>
 8009dda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009dde:	429e      	cmp	r6, r3
 8009de0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009de4:	dd0a      	ble.n	8009dfc <scalbn+0xb4>
 8009de6:	a112      	add	r1, pc, #72	; (adr r1, 8009e30 <scalbn+0xe8>)
 8009de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e2      	bne.n	8009db6 <scalbn+0x6e>
 8009df0:	a30f      	add	r3, pc, #60	; (adr r3, 8009e30 <scalbn+0xe8>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 fbcf 	bl	8000598 <__aeabi_dmul>
 8009dfa:	e7cb      	b.n	8009d94 <scalbn+0x4c>
 8009dfc:	a10a      	add	r1, pc, #40	; (adr r1, 8009e28 <scalbn+0xe0>)
 8009dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0b8      	beq.n	8009d78 <scalbn+0x30>
 8009e06:	a10e      	add	r1, pc, #56	; (adr r1, 8009e40 <scalbn+0xf8>)
 8009e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0c:	e7b4      	b.n	8009d78 <scalbn+0x30>
 8009e0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e12:	3236      	adds	r2, #54	; 0x36
 8009e14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <scalbn+0x108>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	e7e8      	b.n	8009df6 <scalbn+0xae>
 8009e24:	f3af 8000 	nop.w
 8009e28:	c2f8f359 	.word	0xc2f8f359
 8009e2c:	01a56e1f 	.word	0x01a56e1f
 8009e30:	8800759c 	.word	0x8800759c
 8009e34:	7e37e43c 	.word	0x7e37e43c
 8009e38:	8800759c 	.word	0x8800759c
 8009e3c:	fe37e43c 	.word	0xfe37e43c
 8009e40:	c2f8f359 	.word	0xc2f8f359
 8009e44:	81a56e1f 	.word	0x81a56e1f
 8009e48:	43500000 	.word	0x43500000
 8009e4c:	ffff3cb0 	.word	0xffff3cb0
 8009e50:	3c900000 	.word	0x3c900000

08009e54 <_init>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr

08009e60 <_fini>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr
