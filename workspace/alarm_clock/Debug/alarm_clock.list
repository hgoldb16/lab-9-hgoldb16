
alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d94  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08009ed8  08009ed8  00019ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a26c  0800a26c  0001a26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  0800a270  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000540  20000074  0800a2e0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200005b4  0800a2e0  000205b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025148  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004403  00000000  00000000  000451ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f70  00000000  00000000  000495f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001dc0  00000000  00000000  0004b560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002552b  00000000  00000000  0004d320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002179f  00000000  00000000  0007284b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ec2c0  00000000  00000000  00093fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001802aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008bc4  00000000  00000000  00180300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08009ebc 	.word	0x08009ebc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08009ebc 	.word	0x08009ebc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96e 	b.w	8000e10 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468c      	mov	ip, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8083 	bne.w	8000c62 <__udivmoddi4+0x116>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4617      	mov	r7, r2
 8000b60:	d947      	bls.n	8000bf2 <__udivmoddi4+0xa6>
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	b142      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	f1c2 0020 	rsb	r0, r2, #32
 8000b6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4097      	lsls	r7, r2
 8000b74:	ea40 0c01 	orr.w	ip, r0, r1
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbbc f6f8 	udiv	r6, ip, r8
 8000b84:	fa1f fe87 	uxth.w	lr, r7
 8000b88:	fb08 c116 	mls	r1, r8, r6, ip
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f10e 	mul.w	r1, r6, lr
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 8119 	bcs.w	8000dd4 <__udivmoddi4+0x288>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8116 	bls.w	8000dd4 <__udivmoddi4+0x288>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8105 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	f240 8102 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	443c      	add	r4, r7
 8000bd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	b902      	cbnz	r2, 8000bf6 <__udivmoddi4+0xaa>
 8000bf4:	deff      	udf	#255	; 0xff
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d150      	bne.n	8000ca0 <__udivmoddi4+0x154>
 8000bfe:	1bcb      	subs	r3, r1, r7
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	2601      	movs	r6, #1
 8000c0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb08 f30c 	mul.w	r3, r8, ip
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0xe2>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	f200 80e9 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x10c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x10a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80d9 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e7bf      	b.n	8000be2 <__udivmoddi4+0x96>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x12e>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 80b1 	beq.w	8000dce <__udivmoddi4+0x282>
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c72:	4630      	mov	r0, r6
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f683 	clz	r6, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x1cc>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0x140>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80b8 	bhi.w	8000dfc <__udivmoddi4+0x2b0>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	468c      	mov	ip, r1
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0a8      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9e:	e7a5      	b.n	8000bec <__udivmoddi4+0xa0>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca8:	4097      	lsls	r7, r2
 8000caa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb2:	40d9      	lsrs	r1, r3
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cbc:	fa1f f887 	uxth.w	r8, r7
 8000cc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f108 	mul.w	r1, r6, r8
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x19c>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cda:	f080 808d 	bcs.w	8000df8 <__udivmoddi4+0x2ac>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 808a 	bls.w	8000df8 <__udivmoddi4+0x2ac>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b281      	uxth	r1, r0
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb00 f308 	mul.w	r3, r0, r8
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x1c4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d06:	d273      	bcs.n	8000df0 <__udivmoddi4+0x2a4>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d971      	bls.n	8000df0 <__udivmoddi4+0x2a4>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4439      	add	r1, r7
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d16:	e778      	b.n	8000c0a <__udivmoddi4+0xbe>
 8000d18:	f1c6 0c20 	rsb	ip, r6, #32
 8000d1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d24:	431c      	orrs	r4, r3
 8000d26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d36:	431f      	orrs	r7, r3
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3e:	fa1f f884 	uxth.w	r8, r4
 8000d42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	fa02 f206 	lsl.w	r2, r2, r6
 8000d54:	fa00 f306 	lsl.w	r3, r0, r6
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x220>
 8000d5a:	1861      	adds	r1, r4, r1
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d248      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000d62:	458a      	cmp	sl, r1
 8000d64:	d946      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4421      	add	r1, r4
 8000d6c:	eba1 010a 	sub.w	r1, r1, sl
 8000d70:	b2bf      	uxth	r7, r7
 8000d72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45b8      	cmp	r8, r7
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x24a>
 8000d86:	19e7      	adds	r7, r4, r7
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d22e      	bcs.n	8000dec <__udivmoddi4+0x2a0>
 8000d8e:	45b8      	cmp	r8, r7
 8000d90:	d92c      	bls.n	8000dec <__udivmoddi4+0x2a0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4427      	add	r7, r4
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba7 0708 	sub.w	r7, r7, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454f      	cmp	r7, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	d31a      	bcc.n	8000de0 <__udivmoddi4+0x294>
 8000daa:	d017      	beq.n	8000ddc <__udivmoddi4+0x290>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x27a>
 8000dae:	ebb3 020e 	subs.w	r2, r3, lr
 8000db2:	eb67 0701 	sbc.w	r7, r7, r1
 8000db6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dba:	40f2      	lsrs	r2, r6
 8000dbc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc0:	40f7      	lsrs	r7, r6
 8000dc2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e70b      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fd      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000ddc:	4543      	cmp	r3, r8
 8000dde:	d2e5      	bcs.n	8000dac <__udivmoddi4+0x260>
 8000de0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de4:	eb69 0104 	sbc.w	r1, r9, r4
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7df      	b.n	8000dac <__udivmoddi4+0x260>
 8000dec:	4608      	mov	r0, r1
 8000dee:	e7d2      	b.n	8000d96 <__udivmoddi4+0x24a>
 8000df0:	4660      	mov	r0, ip
 8000df2:	e78d      	b.n	8000d10 <__udivmoddi4+0x1c4>
 8000df4:	4681      	mov	r9, r0
 8000df6:	e7b9      	b.n	8000d6c <__udivmoddi4+0x220>
 8000df8:	4666      	mov	r6, ip
 8000dfa:	e775      	b.n	8000ce8 <__udivmoddi4+0x19c>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e74a      	b.n	8000c96 <__udivmoddi4+0x14a>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	4439      	add	r1, r7
 8000e06:	e713      	b.n	8000c30 <__udivmoddi4+0xe4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443c      	add	r4, r7
 8000e0c:	e724      	b.n	8000c58 <__udivmoddi4+0x10c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <set_time>:
#include "usart.h"
#include "gpio.h"
#include "project_functions.h"


void set_time(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b096      	sub	sp, #88	; 0x58
 8000e18:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef new_time;
	RTC_DateTypeDef new_date;
	HAL_UART_AbortTransmit(&huart1);
 8000e1a:	48b2      	ldr	r0, [pc, #712]	; (80010e4 <set_time+0x2d0>)
 8000e1c:	f006 fe2e 	bl	8007a7c <HAL_UART_AbortTransmit>
	HAL_RTC_GetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000e20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e24:	2200      	movs	r2, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	48af      	ldr	r0, [pc, #700]	; (80010e8 <set_time+0x2d4>)
 8000e2a:	f005 f98f 	bl	800614c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &new_date, RTC_FORMAT_BIN);
 8000e2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	48ac      	ldr	r0, [pc, #688]	; (80010e8 <set_time+0x2d4>)
 8000e38:	f005 fa92 	bl	8006360 <HAL_RTC_GetDate>
	char msg[50] = {'\0'};
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	222e      	movs	r2, #46	; 0x2e
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 fbcc 	bl	80085e4 <memset>

	TIM2->CNT = 4*new_time.Hours;
 8000e4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e50:	009a      	lsls	r2, r3, #2
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t current_count = TIM2->CNT;
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000e60:	e04e      	b.n	8000f00 <set_time+0xec>
		current_count = TIM2->CNT;
 8000e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 8000e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e70:	4293      	cmp	r3, r2
 8000e72:	bf94      	ite	ls
 8000e74:	2301      	movls	r3, #1
 8000e76:	2300      	movhi	r3, #0
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7c:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf8c      	ite	hi
 8000e84:	2301      	movhi	r3, #1
 8000e86:	2300      	movls	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <set_time+0x9c>
	  		  current_count = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8000ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
 8000eae:	e015      	b.n	8000edc <set_time+0xc8>
		}
		else if ((current_count > 95)&(current_count<200)){
 8000eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eb2:	2b5f      	cmp	r3, #95	; 0x5f
 8000eb4:	bf8c      	ite	hi
 8000eb6:	2301      	movhi	r3, #1
 8000eb8:	2300      	movls	r3, #0
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ebe:	2bc7      	cmp	r3, #199	; 0xc7
 8000ec0:	bf94      	ite	ls
 8000ec2:	2301      	movls	r3, #1
 8000ec4:	2300      	movhi	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d005      	beq.n	8000edc <set_time+0xc8>
			current_count = 95;
 8000ed0:	235f      	movs	r3, #95	; 0x5f
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 95;
 8000ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed8:	225f      	movs	r2, #95	; 0x5f
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", (current_count), new_time.Minutes, new_time.Seconds);
 8000edc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000ee6:	4638      	mov	r0, r7
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	4613      	mov	r3, r2
 8000eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000eee:	497f      	ldr	r1, [pc, #508]	; (80010ec <set_time+0x2d8>)
 8000ef0:	f007 fb80 	bl	80085f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8000ef4:	4639      	mov	r1, r7
 8000ef6:	2364      	movs	r3, #100	; 0x64
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	487a      	ldr	r0, [pc, #488]	; (80010e4 <set_time+0x2d0>)
 8000efc:	f006 fd28 	bl	8007950 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000f00:	2110      	movs	r1, #16
 8000f02:	487b      	ldr	r0, [pc, #492]	; (80010f0 <set_time+0x2dc>)
 8000f04:	f002 f8ae 	bl	8003064 <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1a9      	bne.n	8000e62 <set_time+0x4e>
	}
	new_time.Hours = current_count>>2;
 8000f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	HAL_Delay(500);
 8000f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1c:	f001 fb1e 	bl	800255c <HAL_Delay>

	TIM2->CNT = 4*new_time.Minutes;
 8000f20:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000f24:	009a      	lsls	r2, r3, #2
 8000f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8000f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000f34:	e051      	b.n	8000fda <set_time+0x1c6>
		current_count = TIM2->CNT;
 8000f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 8000f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f44:	4293      	cmp	r3, r2
 8000f46:	bf94      	ite	ls
 8000f48:	2301      	movls	r3, #1
 8000f4a:	2300      	movhi	r3, #0
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f50:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf8c      	ite	hi
 8000f58:	2301      	movhi	r3, #1
 8000f5a:	2300      	movls	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	bf0c      	ite	eq
 8000f6a:	2301      	moveq	r3, #1
 8000f6c:	2300      	movne	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <set_time+0x170>
	  		  current_count = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8000f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
 8000f82:	e017      	b.n	8000fb4 <set_time+0x1a0>
		}
		else if ((current_count > 239)&(current_count<400)){
 8000f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f86:	2bef      	cmp	r3, #239	; 0xef
 8000f88:	bf8c      	ite	hi
 8000f8a:	2301      	movhi	r3, #1
 8000f8c:	2300      	movls	r3, #0
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f92:	f240 118f 	movw	r1, #399	; 0x18f
 8000f96:	428b      	cmp	r3, r1
 8000f98:	bf94      	ite	ls
 8000f9a:	2301      	movls	r3, #1
 8000f9c:	2300      	movhi	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <set_time+0x1a0>
			current_count = 239;
 8000fa8:	23ef      	movs	r3, #239	; 0xef
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 239;
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb0:	22ef      	movs	r2, #239	; 0xef
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_time.Hours, (current_count>>2), new_time.Seconds);
 8000fb4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	9200      	str	r2, [sp, #0]
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	4948      	ldr	r1, [pc, #288]	; (80010ec <set_time+0x2d8>)
 8000fca:	f007 fb13 	bl	80085f4 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8000fce:	4639      	mov	r1, r7
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	2232      	movs	r2, #50	; 0x32
 8000fd4:	4843      	ldr	r0, [pc, #268]	; (80010e4 <set_time+0x2d0>)
 8000fd6:	f006 fcbb 	bl	8007950 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4844      	ldr	r0, [pc, #272]	; (80010f0 <set_time+0x2dc>)
 8000fde:	f002 f841 	bl	8003064 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1a6      	bne.n	8000f36 <set_time+0x122>
	}
	new_time.Minutes = current_count>>2;
 8000fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	HAL_Delay(500);
 8000ff2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff6:	f001 fab1 	bl	800255c <HAL_Delay>

	TIM2->CNT = 4*new_time.Seconds;
 8000ffa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000ffe:	009a      	lsls	r2, r3, #2
 8001000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8001006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 800100e:	e052      	b.n	80010b6 <set_time+0x2a2>
		current_count = TIM2->CNT;
 8001010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 8001018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101e:	4293      	cmp	r3, r2
 8001020:	bf94      	ite	ls
 8001022:	2301      	movls	r3, #1
 8001024:	2300      	movhi	r3, #0
 8001026:	b2da      	uxtb	r2, r3
 8001028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800102a:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 800102e:	428b      	cmp	r3, r1
 8001030:	bf8c      	ite	hi
 8001032:	2301      	movhi	r3, #1
 8001034:	2300      	movls	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4013      	ands	r3, r2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001040:	2b01      	cmp	r3, #1
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <set_time+0x24a>
	  		  current_count = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8001054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
 800105c:	e017      	b.n	800108e <set_time+0x27a>
		}
		else if ((current_count > 239)&(current_count<400)){
 800105e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001060:	2bef      	cmp	r3, #239	; 0xef
 8001062:	bf8c      	ite	hi
 8001064:	2301      	movhi	r3, #1
 8001066:	2300      	movls	r3, #0
 8001068:	b2da      	uxtb	r2, r3
 800106a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800106c:	f240 118f 	movw	r1, #399	; 0x18f
 8001070:	428b      	cmp	r3, r1
 8001072:	bf94      	ite	ls
 8001074:	2301      	movls	r3, #1
 8001076:	2300      	movhi	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4013      	ands	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <set_time+0x27a>
			current_count = 239;
 8001082:	23ef      	movs	r3, #239	; 0xef
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 239;
 8001086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800108a:	22ef      	movs	r2, #239	; 0xef
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_time.Hours, new_time.Minutes, (current_count>>2));
 800108e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001092:	461a      	mov	r2, r3
 8001094:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001098:	4619      	mov	r1, r3
 800109a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	4638      	mov	r0, r7
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	460b      	mov	r3, r1
 80010a4:	4911      	ldr	r1, [pc, #68]	; (80010ec <set_time+0x2d8>)
 80010a6:	f007 faa5 	bl	80085f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 80010aa:	4639      	mov	r1, r7
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	2232      	movs	r2, #50	; 0x32
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <set_time+0x2d0>)
 80010b2:	f006 fc4d 	bl	8007950 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80010b6:	2110      	movs	r1, #16
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <set_time+0x2dc>)
 80010ba:	f001 ffd3 	bl	8003064 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1a5      	bne.n	8001010 <set_time+0x1fc>
	}
	new_time.Seconds = current_count>>2;
 80010c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 80010ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <set_time+0x2d4>)
 80010d8:	f004 ff74 	bl	8005fc4 <HAL_RTC_SetTime>

	return;
 80010dc:	bf00      	nop
}
 80010de:	3750      	adds	r7, #80	; 0x50
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000021c 	.word	0x2000021c
 80010e8:	200000b4 	.word	0x200000b4
 80010ec:	08009ed8 	.word	0x08009ed8
 80010f0:	48000400 	.word	0x48000400

080010f4 <set_alarm>:

void set_alarm(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b09a      	sub	sp, #104	; 0x68
 80010f8:	af02      	add	r7, sp, #8
	RTC_AlarmTypeDef new_alarm;
	HAL_UART_AbortTransmit(&huart1);
 80010fa:	48b0      	ldr	r0, [pc, #704]	; (80013bc <set_alarm+0x2c8>)
 80010fc:	f006 fcbe 	bl	8007a7c <HAL_UART_AbortTransmit>
	HAL_RTC_GetAlarm(&hrtc, &new_alarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 8001100:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001104:	2300      	movs	r3, #0
 8001106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110a:	48ad      	ldr	r0, [pc, #692]	; (80013c0 <set_alarm+0x2cc>)
 800110c:	f005 fb48 	bl	80067a0 <HAL_RTC_GetAlarm>

	char msg[50] = {'\0'};
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	222e      	movs	r2, #46	; 0x2e
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f007 fa62 	bl	80085e4 <memset>

	TIM2->CNT = 4*new_alarm.AlarmTime.Hours;
 8001120:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001124:	009a      	lsls	r2, r3, #2
 8001126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t current_count = TIM2->CNT;
 800112c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001134:	e04f      	b.n	80011d6 <set_alarm+0xe2>
		current_count = TIM2->CNT;
 8001136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 800113e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	4293      	cmp	r3, r2
 8001146:	bf94      	ite	ls
 8001148:	2301      	movls	r3, #1
 800114a:	2300      	movhi	r3, #0
 800114c:	b2da      	uxtb	r2, r3
 800114e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001150:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8001154:	428b      	cmp	r3, r1
 8001156:	bf8c      	ite	hi
 8001158:	2301      	movhi	r3, #1
 800115a:	2300      	movls	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4013      	ands	r3, r2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001166:	2b01      	cmp	r3, #1
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <set_alarm+0x90>
	  		  current_count = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 800117a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
 8001182:	e015      	b.n	80011b0 <set_alarm+0xbc>
		}
		else if ((current_count > 95)&(current_count<200)){
 8001184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001186:	2b5f      	cmp	r3, #95	; 0x5f
 8001188:	bf8c      	ite	hi
 800118a:	2301      	movhi	r3, #1
 800118c:	2300      	movls	r3, #0
 800118e:	b2da      	uxtb	r2, r3
 8001190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001192:	2bc7      	cmp	r3, #199	; 0xc7
 8001194:	bf94      	ite	ls
 8001196:	2301      	movls	r3, #1
 8001198:	2300      	movhi	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4013      	ands	r3, r2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <set_alarm+0xbc>
			current_count = 95;
 80011a4:	235f      	movs	r3, #95	; 0x5f
 80011a6:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 95;
 80011a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ac:	225f      	movs	r2, #95	; 0x5f
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", (current_count>>2), new_alarm.AlarmTime.Minutes, new_alarm.AlarmTime.Seconds);
 80011b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b2:	089a      	lsrs	r2, r3, #2
 80011b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011b8:	4619      	mov	r1, r3
 80011ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80011be:	4638      	mov	r0, r7
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	460b      	mov	r3, r1
 80011c4:	497f      	ldr	r1, [pc, #508]	; (80013c4 <set_alarm+0x2d0>)
 80011c6:	f007 fa15 	bl	80085f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 80011ca:	4639      	mov	r1, r7
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	2232      	movs	r2, #50	; 0x32
 80011d0:	487a      	ldr	r0, [pc, #488]	; (80013bc <set_alarm+0x2c8>)
 80011d2:	f006 fbbd 	bl	8007950 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80011d6:	2110      	movs	r1, #16
 80011d8:	487b      	ldr	r0, [pc, #492]	; (80013c8 <set_alarm+0x2d4>)
 80011da:	f001 ff43 	bl	8003064 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1a8      	bne.n	8001136 <set_alarm+0x42>
	}
	new_alarm.AlarmTime.Hours = current_count>>2;
 80011e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	HAL_Delay(500);
 80011ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f2:	f001 f9b3 	bl	800255c <HAL_Delay>

	TIM2->CNT = 4*new_alarm.AlarmTime.Minutes;
 80011f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011fa:	009a      	lsls	r2, r3, #2
 80011fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8001202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 800120a:	e051      	b.n	80012b0 <set_alarm+0x1bc>
		current_count = TIM2->CNT;
 800120c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 8001214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121a:	4293      	cmp	r3, r2
 800121c:	bf94      	ite	ls
 800121e:	2301      	movls	r3, #1
 8001220:	2300      	movhi	r3, #0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001226:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 800122a:	428b      	cmp	r3, r1
 800122c:	bf8c      	ite	hi
 800122e:	2301      	movhi	r3, #1
 8001230:	2300      	movls	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4013      	ands	r3, r2
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123c:	2b01      	cmp	r3, #1
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <set_alarm+0x166>
	  		  current_count = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 8001250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
 8001258:	e017      	b.n	800128a <set_alarm+0x196>
		}
		else if ((current_count > 239)&(current_count<400)){
 800125a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125c:	2bef      	cmp	r3, #239	; 0xef
 800125e:	bf8c      	ite	hi
 8001260:	2301      	movhi	r3, #1
 8001262:	2300      	movls	r3, #0
 8001264:	b2da      	uxtb	r2, r3
 8001266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001268:	f240 118f 	movw	r1, #399	; 0x18f
 800126c:	428b      	cmp	r3, r1
 800126e:	bf94      	ite	ls
 8001270:	2301      	movls	r3, #1
 8001272:	2300      	movhi	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4013      	ands	r3, r2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <set_alarm+0x196>
			current_count = 239;
 800127e:	23ef      	movs	r3, #239	; 0xef
 8001280:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 239;
 8001282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001286:	22ef      	movs	r2, #239	; 0xef
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_alarm.AlarmTime.Hours, (current_count>>2), new_alarm.AlarmTime.Seconds);
 800128a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800128e:	4619      	mov	r1, r3
 8001290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001298:	4638      	mov	r0, r7
 800129a:	9200      	str	r2, [sp, #0]
 800129c:	460a      	mov	r2, r1
 800129e:	4949      	ldr	r1, [pc, #292]	; (80013c4 <set_alarm+0x2d0>)
 80012a0:	f007 f9a8 	bl	80085f4 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 80012a4:	4639      	mov	r1, r7
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	2232      	movs	r2, #50	; 0x32
 80012aa:	4844      	ldr	r0, [pc, #272]	; (80013bc <set_alarm+0x2c8>)
 80012ac:	f006 fb50 	bl	8007950 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80012b0:	2110      	movs	r1, #16
 80012b2:	4845      	ldr	r0, [pc, #276]	; (80013c8 <set_alarm+0x2d4>)
 80012b4:	f001 fed6 	bl	8003064 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1a6      	bne.n	800120c <set_alarm+0x118>
	}
	new_alarm.AlarmTime.Minutes = current_count>>2;
 80012be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	HAL_Delay(500);
 80012c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012cc:	f001 f946 	bl	800255c <HAL_Delay>

	TIM2->CNT = 4*new_alarm.AlarmTime.Seconds;
 80012d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012d4:	009a      	lsls	r2, r3, #2
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 80012dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80012e4:	e052      	b.n	800138c <set_alarm+0x298>
		current_count = TIM2->CNT;
 80012e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 80012ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	4293      	cmp	r3, r2
 80012f6:	bf94      	ite	ls
 80012f8:	2301      	movls	r3, #1
 80012fa:	2300      	movhi	r3, #0
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001300:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8001304:	428b      	cmp	r3, r1
 8001306:	bf8c      	ite	hi
 8001308:	2301      	movhi	r3, #1
 800130a:	2300      	movls	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4013      	ands	r3, r2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001316:	2b01      	cmp	r3, #1
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <set_alarm+0x240>
	  		  current_count = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 800132a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
 8001332:	e017      	b.n	8001364 <set_alarm+0x270>
		}
		else if ((current_count > 239)&(current_count<400)){
 8001334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001336:	2bef      	cmp	r3, #239	; 0xef
 8001338:	bf8c      	ite	hi
 800133a:	2301      	movhi	r3, #1
 800133c:	2300      	movls	r3, #0
 800133e:	b2da      	uxtb	r2, r3
 8001340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001342:	f240 118f 	movw	r1, #399	; 0x18f
 8001346:	428b      	cmp	r3, r1
 8001348:	bf94      	ite	ls
 800134a:	2301      	movls	r3, #1
 800134c:	2300      	movhi	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4013      	ands	r3, r2
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <set_alarm+0x270>
			current_count = 239;
 8001358:	23ef      	movs	r3, #239	; 0xef
 800135a:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 239;
 800135c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001360:	22ef      	movs	r2, #239	; 0xef
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_alarm.AlarmTime.Hours, new_alarm.AlarmTime.Minutes, (current_count>>2));
 8001364:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001368:	461a      	mov	r2, r3
 800136a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800136e:	4619      	mov	r1, r3
 8001370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	4638      	mov	r0, r7
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	460b      	mov	r3, r1
 800137a:	4912      	ldr	r1, [pc, #72]	; (80013c4 <set_alarm+0x2d0>)
 800137c:	f007 f93a 	bl	80085f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8001380:	4639      	mov	r1, r7
 8001382:	2364      	movs	r3, #100	; 0x64
 8001384:	2232      	movs	r2, #50	; 0x32
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <set_alarm+0x2c8>)
 8001388:	f006 fae2 	bl	8007950 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 800138c:	2110      	movs	r1, #16
 800138e:	480e      	ldr	r0, [pc, #56]	; (80013c8 <set_alarm+0x2d4>)
 8001390:	f001 fe68 	bl	8003064 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1a5      	bne.n	80012e6 <set_alarm+0x1f2>
	}
	new_alarm.AlarmTime.Seconds = current_count>>2;
 800139a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	HAL_RTC_SetAlarm_IT(&hrtc, &new_alarm, RTC_FORMAT_BIN);
 80013a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <set_alarm+0x2cc>)
 80013ae:	f005 f825 	bl	80063fc <HAL_RTC_SetAlarm_IT>


	return;
 80013b2:	bf00      	nop
}
 80013b4:	3760      	adds	r7, #96	; 0x60
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000021c 	.word	0x2000021c
 80013c0:	200000b4 	.word	0x200000b4
 80013c4:	08009ed8 	.word	0x08009ed8
 80013c8:	48000400 	.word	0x48000400

080013cc <snooze_alarm>:


void snooze_alarm(void){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef new_alarm;
	HAL_UART_AbortTransmit(&huart1);
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <snooze_alarm+0x40>)
 80013d4:	f006 fb52 	bl	8007a7c <HAL_UART_AbortTransmit>
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80013d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <snooze_alarm+0x44>)
 80013de:	f005 f94b 	bl	8006678 <HAL_RTC_DeactivateAlarm>
	HAL_RTC_GetAlarm(&hrtc, &new_alarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 80013e2:	4639      	mov	r1, r7
 80013e4:	2300      	movs	r3, #0
 80013e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <snooze_alarm+0x44>)
 80013ec:	f005 f9d8 	bl	80067a0 <HAL_RTC_GetAlarm>

	new_alarm.AlarmTime.Minutes = new_alarm.AlarmTime.Minutes + 9;
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	3309      	adds	r3, #9
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	707b      	strb	r3, [r7, #1]
	HAL_RTC_SetAlarm_IT(&hrtc, &new_alarm, RTC_FORMAT_BIN);
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <snooze_alarm+0x44>)
 8001400:	f004 fffc 	bl	80063fc <HAL_RTC_SetAlarm_IT>
	return;
 8001404:	bf00      	nop
}
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000021c 	.word	0x2000021c
 8001410:	200000b4 	.word	0x200000b4

08001414 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001438:	68fb      	ldr	r3, [r7, #12]
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800144a:	2004      	movs	r0, #4
 800144c:	f7ff ffe2 	bl	8001414 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff ffdf 	bl	8001414 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	200b      	movs	r0, #11
 800145c:	f001 f97d 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001460:	200b      	movs	r0, #11
 8001462:	f001 f994 	bl	800278e <HAL_NVIC_EnableIRQ>

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}

0800146a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4313      	orrs	r3, r2
 8001480:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4013      	ands	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b0:	2004      	movs	r0, #4
 80014b2:	f7ff ffda 	bl	800146a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2002      	movs	r0, #2
 80014b8:	f7ff ffd7 	bl	800146a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff ffd4 	bl	800146a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2008      	movs	r0, #8
 80014c4:	f7ff ffd1 	bl	800146a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2123      	movs	r1, #35	; 0x23
 80014cc:	482b      	ldr	r0, [pc, #172]	; (800157c <MX_GPIO_Init+0xe0>)
 80014ce:	f001 fde1 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW1_Pin;
 80014d2:	2314      	movs	r3, #20
 80014d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014dc:	2301      	movs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4826      	ldr	r0, [pc, #152]	; (8001580 <MX_GPIO_Init+0xe4>)
 80014e6:	f001 fc4d 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80014ea:	2323      	movs	r3, #35	; 0x23
 80014ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	481f      	ldr	r0, [pc, #124]	; (800157c <MX_GPIO_Init+0xe0>)
 8001500:	f001 fc40 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8001504:	2303      	movs	r3, #3
 8001506:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001508:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800150c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150e:	2301      	movs	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	481b      	ldr	r0, [pc, #108]	; (8001584 <MX_GPIO_Init+0xe8>)
 8001518:	f001 fc34 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = rotary_but_Pin;
 800151c:	2310      	movs	r3, #16
 800151e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(rotary_but_GPIO_Port, &GPIO_InitStruct);
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4813      	ldr	r0, [pc, #76]	; (800157c <MX_GPIO_Init+0xe0>)
 800152e:	f001 fc29 	bl	8002d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2006      	movs	r0, #6
 8001538:	f001 f90f 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800153c:	2006      	movs	r0, #6
 800153e:	f001 f926 	bl	800278e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2007      	movs	r0, #7
 8001548:	f001 f907 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800154c:	2007      	movs	r0, #7
 800154e:	f001 f91e 	bl	800278e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2008      	movs	r0, #8
 8001558:	f001 f8ff 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800155c:	2008      	movs	r0, #8
 800155e:	f001 f916 	bl	800278e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	200a      	movs	r0, #10
 8001568:	f001 f8f7 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800156c:	200a      	movs	r0, #10
 800156e:	f001 f90e 	bl	800278e <HAL_NVIC_EnableIRQ>

}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	48000400 	.word	0x48000400
 8001580:	48000800 	.word	0x48000800
 8001584:	48000c00 	.word	0x48000c00

08001588 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001598:	f023 0218 	bic.w	r2, r3, #24
 800159c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b0b5      	sub	sp, #212	; 0xd4
 80015bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f000 ff47 	bl	8002450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 f985 	bl	80018d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015c6:	f000 f9fb 	bl	80019c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f7ff ff67 	bl	800149c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80015ce:	f000 fdeb 	bl	80021a8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80015d2:	f000 fead 	bl	8002330 <MX_USB_PCD_Init>
  MX_RTC_Init();
 80015d6:	f000 fa55 	bl	8001a84 <MX_RTC_Init>
  MX_DMA_Init();
 80015da:	f7ff ff34 	bl	8001446 <MX_DMA_Init>
  MX_SAI1_Init();
 80015de:	f000 fb39 	bl	8001c54 <MX_SAI1_Init>
  MX_TIM2_Init();
 80015e2:	f000 fd2f 	bl	8002044 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_MspInit(&hrtc);
 80015e6:	48ac      	ldr	r0, [pc, #688]	; (8001898 <main+0x2e0>)
 80015e8:	f000 fae6 	bl	8001bb8 <HAL_RTC_MspInit>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80015ec:	213c      	movs	r1, #60	; 0x3c
 80015ee:	48ab      	ldr	r0, [pc, #684]	; (800189c <main+0x2e4>)
 80015f0:	f005 ffc6 	bl	8007580 <HAL_TIM_Encoder_Start>
  char time_msg[50] = {'\0'};
 80015f4:	2300      	movs	r3, #0
 80015f6:	653b      	str	r3, [r7, #80]	; 0x50
 80015f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015fc:	222e      	movs	r2, #46	; 0x2e
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f006 ffef 	bl	80085e4 <memset>
  uint8_t esc_message[50] = {'\0'};
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	222e      	movs	r2, #46	; 0x2e
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f006 ffe6 	bl	80085e4 <memset>
  RTC_TimeTypeDef Time;
  RTC_DateTypeDef Date;

  double dur = .5;
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4ba0      	ldr	r3, [pc, #640]	; (80018a0 <main+0x2e8>)
 800161e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  double fs = 16000.0;
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b9f      	ldr	r3, [pc, #636]	; (80018a4 <main+0x2ec>)
 8001628:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  double f0 = 261.63; // Middle C
 800162c:	a394      	add	r3, pc, #592	; (adr r3, 8001880 <main+0x2c8>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  double delta_t = 1.0 / fs;
 8001636:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	499a      	ldr	r1, [pc, #616]	; (80018a8 <main+0x2f0>)
 8001640:	f7ff f8d4 	bl	80007ec <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  double volume = 12000.0;
 800164c:	a38e      	add	r3, pc, #568	; (adr r3, 8001888 <main+0x2d0>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  int numberOfSamples = 2.0 * dur * fs; // 2 channels * duration (sec) * samples per sec
 8001656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	f7fe fde5 	bl	800022c <__adddf3>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800166e:	f7fe ff93 	bl	8000598 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fa27 	bl	8000acc <__aeabi_d2iz>
 800167e:	4603      	mov	r3, r0
 8001680:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int16_t signal[numberOfSamples];
 8001684:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8001688:	1e63      	subs	r3, r4, #1
 800168a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800168e:	4623      	mov	r3, r4
 8001690:	4618      	mov	r0, r3
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	010b      	lsls	r3, r1, #4
 80016a0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016a4:	0102      	lsls	r2, r0, #4
 80016a6:	4623      	mov	r3, r4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	010b      	lsls	r3, r1, #4
 80016b8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016bc:	0102      	lsls	r2, r0, #4
 80016be:	4623      	mov	r3, r4
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3307      	adds	r3, #7
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	ebad 0d03 	sub.w	sp, sp, r3
 80016cc:	ab02      	add	r3, sp, #8
 80016ce:	3301      	adds	r3, #1
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  // Single tone
  double t = 0;
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  int count = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  while (count < numberOfSamples) {
 80016ea:	e048      	b.n	800177e <main+0x1c6>
	  signal[count] = volume * sin(2.0 * PI * f0 * t); // left
 80016ec:	a368      	add	r3, pc, #416	; (adr r3, 8001890 <main+0x2d8>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80016f6:	f7fe ff4f 	bl	8000598 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001706:	f7fe ff47 	bl	8000598 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	ec43 2b17 	vmov	d7, r2, r3
 8001712:	eeb0 0a47 	vmov.f32	s0, s14
 8001716:	eef0 0a67 	vmov.f32	s1, s15
 800171a:	f007 fb99 	bl	8008e50 <sin>
 800171e:	ec51 0b10 	vmov	r0, r1, d0
 8001722:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001726:	f7fe ff37 	bl	8000598 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff f9cb 	bl	8000acc <__aeabi_d2iz>
 8001736:	4603      	mov	r3, r0
 8001738:	b219      	sxth	r1, r3
 800173a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800173e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001742:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  signal[count + 1] = signal[count]; // right
 8001746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001750:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001754:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 8001758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800175c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  count += 2;
 8001760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001764:	3302      	adds	r3, #2
 8001766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  t += delta_t;
 800176a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800176e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001772:	f7fe fd5b 	bl	800022c <__adddf3>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  while (count < numberOfSamples) {
 800177e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001786:	429a      	cmp	r2, r3
 8001788:	dbb0      	blt.n	80016ec <main+0x134>

    /* USER CODE BEGIN 3 */



	  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	2200      	movs	r2, #0
 8001790:	4619      	mov	r1, r3
 8001792:	4841      	ldr	r0, [pc, #260]	; (8001898 <main+0x2e0>)
 8001794:	f004 fcda 	bl	800614c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	483e      	ldr	r0, [pc, #248]	; (8001898 <main+0x2e0>)
 80017a0:	f004 fdde 	bl	8006360 <HAL_RTC_GetDate>
	  sprintf(time_msg, "\033[2K%02d:%02d:%02d\r", Time.Hours, Time.Minutes, Time.Seconds);
 80017a4:	7a3b      	ldrb	r3, [r7, #8]
 80017a6:	461a      	mov	r2, r3
 80017a8:	7a7b      	ldrb	r3, [r7, #9]
 80017aa:	4619      	mov	r1, r3
 80017ac:	7abb      	ldrb	r3, [r7, #10]
 80017ae:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	460b      	mov	r3, r1
 80017b6:	493d      	ldr	r1, [pc, #244]	; (80018ac <main+0x2f4>)
 80017b8:	f006 ff1c 	bl	80085f4 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)time_msg, sizeof(time_msg), 100);
 80017bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017c0:	2364      	movs	r3, #100	; 0x64
 80017c2:	2232      	movs	r2, #50	; 0x32
 80017c4:	483a      	ldr	r0, [pc, #232]	; (80018b0 <main+0x2f8>)
 80017c6:	f006 f8c3 	bl	8007950 <HAL_UART_Transmit>
	  //sprintf(esc_message, "\033[2K");
	  //HAL_UART_Transmit(&huart1, esc_message, sizeof(esc_message), 100);

	  if (set_time_flag){
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <main+0x2fc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <main+0x224>
	  	  set_time();
 80017d2:	f7ff fb1f 	bl	8000e14 <set_time>
	  	  set_time_flag = 0;
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <main+0x2fc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
	  }
	  if (set_alarm_flag){
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <main+0x300>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <main+0x236>
		  set_alarm();
 80017e4:	f7ff fc86 	bl	80010f4 <set_alarm>
		  set_alarm_flag = 0;
 80017e8:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <main+0x300>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
	  }
	  if (alarm_triggered_flag){
 80017ee:	4b33      	ldr	r3, [pc, #204]	; (80018bc <main+0x304>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d018      	beq.n	8001828 <main+0x270>
		  HAL_SAI_Transmit_DMA(&hsai_BlockA1, signal, numberOfSamples);
 80017f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80017fe:	b292      	uxth	r2, r2
 8001800:	4619      	mov	r1, r3
 8001802:	482f      	ldr	r0, [pc, #188]	; (80018c0 <main+0x308>)
 8001804:	f005 fb36 	bl	8006e74 <HAL_SAI_Transmit_DMA>
		  if(Time.Seconds & 1)
 8001808:	7abb      	ldrb	r3, [r7, #10]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <main+0x266>
			  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	2120      	movs	r1, #32
 8001816:	482b      	ldr	r0, [pc, #172]	; (80018c4 <main+0x30c>)
 8001818:	f001 fc3c 	bl	8003094 <HAL_GPIO_WritePin>
 800181c:	e004      	b.n	8001828 <main+0x270>
		  else
			  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2120      	movs	r1, #32
 8001822:	4828      	ldr	r0, [pc, #160]	; (80018c4 <main+0x30c>)
 8001824:	f001 fc36 	bl	8003094 <HAL_GPIO_WritePin>
	  }
	  if (alarm_snooze_flag){
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <main+0x310>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d011      	beq.n	8001854 <main+0x29c>
		  snooze_alarm();
 8001830:	f7ff fdcc 	bl	80013cc <snooze_alarm>
		  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2120      	movs	r1, #32
 8001838:	4822      	ldr	r0, [pc, #136]	; (80018c4 <main+0x30c>)
 800183a:	f001 fc2b 	bl	8003094 <HAL_GPIO_WritePin>
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800183e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001842:	4815      	ldr	r0, [pc, #84]	; (8001898 <main+0x2e0>)
 8001844:	f004 ff18 	bl	8006678 <HAL_RTC_DeactivateAlarm>
		  alarm_triggered_flag = 0;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <main+0x304>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
		  alarm_snooze_flag = 0;
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <main+0x310>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
	  }
	  if (alarm_off_flag){
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <main+0x314>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d096      	beq.n	800178a <main+0x1d2>
		  alarm_off_flag = 0;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <main+0x314>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
		  alarm_triggered_flag = 0;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <main+0x304>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <main+0x2e0>)
 800186e:	f004 ff03 	bl	8006678 <HAL_RTC_DeactivateAlarm>
		  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2120      	movs	r1, #32
 8001876:	4813      	ldr	r0, [pc, #76]	; (80018c4 <main+0x30c>)
 8001878:	f001 fc0c 	bl	8003094 <HAL_GPIO_WritePin>
  {
 800187c:	e785      	b.n	800178a <main+0x1d2>
 800187e:	bf00      	nop
 8001880:	7ae147ae 	.word	0x7ae147ae
 8001884:	40705a14 	.word	0x40705a14
 8001888:	00000000 	.word	0x00000000
 800188c:	40c77000 	.word	0x40c77000
 8001890:	53c8d4f1 	.word	0x53c8d4f1
 8001894:	401921fb 	.word	0x401921fb
 8001898:	200000b4 	.word	0x200000b4
 800189c:	200001d0 	.word	0x200001d0
 80018a0:	3fe00000 	.word	0x3fe00000
 80018a4:	40cf4000 	.word	0x40cf4000
 80018a8:	3ff00000 	.word	0x3ff00000
 80018ac:	08009ee8 	.word	0x08009ee8
 80018b0:	2000021c 	.word	0x2000021c
 80018b4:	200000b0 	.word	0x200000b0
 80018b8:	200000a8 	.word	0x200000a8
 80018bc:	200000a0 	.word	0x200000a0
 80018c0:	20000138 	.word	0x20000138
 80018c4:	48000400 	.word	0x48000400
 80018c8:	200000ac 	.word	0x200000ac
 80018cc:	200000a4 	.word	0x200000a4

080018d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09a      	sub	sp, #104	; 0x68
 80018d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	2248      	movs	r2, #72	; 0x48
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f006 fe80 	bl	80085e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001904:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f023 0303 	bic.w	r3, r3, #3
 8001910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800191a:	f001 fd05 	bl	8003328 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff fe32 	bl	8001588 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <SystemClock_Config+0xec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800192c:	4a23      	ldr	r2, [pc, #140]	; (80019bc <SystemClock_Config+0xec>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <SystemClock_Config+0xec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001940:	232f      	movs	r3, #47	; 0x2f
 8001942:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800194a:	2301      	movs	r3, #1
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001954:	2301      	movs	r3, #1
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001958:	2340      	movs	r3, #64	; 0x40
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800195c:	2300      	movs	r3, #0
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001960:	2360      	movs	r3, #96	; 0x60
 8001962:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001964:	2305      	movs	r3, #5
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001968:	2300      	movs	r3, #0
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4618      	mov	r0, r3
 8001972:	f002 f86d 	bl	8003a50 <HAL_RCC_OscConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800197c:	f000 f852 	bl	8001a24 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001980:	236f      	movs	r3, #111	; 0x6f
 8001982:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001984:	2302      	movs	r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2101      	movs	r1, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fbe1 	bl	8004168 <HAL_RCC_ClockConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80019ac:	f000 f83a 	bl	8001a24 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80019b0:	f003 ffa5 	bl	80058fe <HAL_RCCEx_EnableMSIPLLMode>
}
 80019b4:	bf00      	nop
 80019b6:	3768      	adds	r7, #104	; 0x68
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	58000400 	.word	0x58000400

080019c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b094      	sub	sp, #80	; 0x50
 80019c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2250      	movs	r2, #80	; 0x50
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f006 fe09 	bl	80085e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_SAI1
 80019d2:	f44f 5305 	mov.w	r3, #8512	; 0x2140
 80019d6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80019d8:	2318      	movs	r3, #24
 80019da:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80019dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80019e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80019e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <PeriphCommonClock_Config+0x60>)
 80019f0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80019fc:	2300      	movs	r3, #0
 80019fe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 f9ec 	bl	8004de4 <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001a12:	f000 f807 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	; 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	01010000 	.word	0x01010000

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>

08001a2e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a74:	68fb      	ldr	r3, [r7, #12]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b090      	sub	sp, #64	; 0x40
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2228      	movs	r2, #40	; 0x28
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f006 fd9d 	bl	80085e4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001aac:	4a41      	ldr	r2, [pc, #260]	; (8001bb4 <MX_RTC_Init+0x130>)
 8001aae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ab0:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001ab8:	227f      	movs	r2, #127	; 0x7f
 8001aba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001abc:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001abe:	22ff      	movs	r2, #255	; 0xff
 8001ac0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ac8:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ada:	4835      	ldr	r0, [pc, #212]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001adc:	f004 f9d4 	bl	8005e88 <HAL_RTC_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001ae6:	f7ff ff9d 	bl	8001a24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.SubSeconds = 0x0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4827      	ldr	r0, [pc, #156]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001b12:	f004 fa57 	bl	8005fc4 <HAL_RTC_SetTime>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8001b1c:	f7ff ff82 	bl	8001a24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4619      	mov	r1, r3
 8001b40:	481b      	ldr	r0, [pc, #108]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001b42:	f004 fb5f 	bl	8006204 <HAL_RTC_SetDate>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8001b4c:	f7ff ff6a 	bl	8001a24 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b6c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	2201      	movs	r2, #1
 8001b86:	4619      	mov	r1, r3
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <MX_RTC_Init+0x12c>)
 8001b8a:	f004 fc37 	bl	80063fc <HAL_RTC_SetAlarm_IT>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001b94:	f7ff ff46 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2029      	movs	r0, #41	; 0x29
 8001b9e:	f000 fddc 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ba2:	2029      	movs	r0, #41	; 0x29
 8001ba4:	f000 fdf3 	bl	800278e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3740      	adds	r7, #64	; 0x40
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200000b4 	.word	0x200000b4
 8001bb4:	40002800 	.word	0x40002800

08001bb8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b096      	sub	sp, #88	; 0x58
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2250      	movs	r2, #80	; 0x50
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f006 fd0b 	bl	80085e4 <memset>
  if(rtcHandle->Instance==RTC)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_RTC_MspInit+0x64>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d11d      	bne.n	8001c14 <HAL_RTC_MspInit+0x5c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bdc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f8fb 	bl	8004de4 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001bf4:	f7ff ff16 	bl	8001a24 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bf8:	f7ff ff19 	bl	8001a2e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c00:	f7ff ff26 	bl	8001a50 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2029      	movs	r0, #41	; 0x29
 8001c0a:	f000 fda6 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c0e:	2029      	movs	r0, #41	; 0x29
 8001c10:	f000 fdbd 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c14:	bf00      	nop
 8001c16:	3758      	adds	r7, #88	; 0x58
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40002800 	.word	0x40002800

08001c20 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c44:	68fb      	ldr	r3, [r7, #12]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <MX_SAI1_Init+0x6c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c84:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001c88:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_SAI1_Init+0x68>)
 8001caa:	f004 ff1f 	bl	8006aec <HAL_SAI_InitProtocol>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8001cb4:	f7ff feb6 	bl	8001a24 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000138 	.word	0x20000138
 8001cc0:	40015404 	.word	0x40015404

08001cc4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3c      	ldr	r2, [pc, #240]	; (8001dc4 <HAL_SAI_MspInit+0x100>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d172      	bne.n	8001dbc <HAL_SAI_MspInit+0xf8>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_SAI_MspInit+0x104>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001cde:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001ce2:	f7ff ff9d 	bl	8001c20 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_SAI_MspInit+0x104>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	4a36      	ldr	r2, [pc, #216]	; (8001dc8 <HAL_SAI_MspInit+0x104>)
 8001cee:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PB9     ------> SAI1_FS_A
    PC3     ------> SAI1_SD_A
    PA8     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d02:	230d      	movs	r3, #13
 8001d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	482f      	ldr	r0, [pc, #188]	; (8001dcc <HAL_SAI_MspInit+0x108>)
 8001d0e:	f001 f839 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d12:	2308      	movs	r3, #8
 8001d14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d22:	230d      	movs	r3, #13
 8001d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4828      	ldr	r0, [pc, #160]	; (8001dd0 <HAL_SAI_MspInit+0x10c>)
 8001d2e:	f001 f829 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d44:	230d      	movs	r3, #13
 8001d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d52:	f001 f817 	bl	8002d84 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel1;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_SAI_MspInit+0x114>)
 8001d5a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d5e:	2212      	movs	r2, #18
 8001d60:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d64:	2210      	movs	r2, #16
 8001d66:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7a:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d82:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001d90:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001d92:	f000 fd17 	bl	80027c4 <HAL_DMA_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 8001d9c:	f7ff fe42 	bl	8001a24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_SAI_MspInit+0x110>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8001dbc:	bf00      	nop
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40015404 	.word	0x40015404
 8001dc8:	20000090 	.word	0x20000090
 8001dcc:	48000400 	.word	0x48000400
 8001dd0:	48000800 	.word	0x48000800
 8001dd4:	200000d8 	.word	0x200000d8
 8001dd8:	40020008 	.word	0x40020008

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <NMI_Handler+0x4>

08001df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <HardFault_Handler+0x4>

08001df6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <BusFault_Handler+0x4>

08001e02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <UsageFault_Handler+0x4>

08001e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e36:	f000 fb65 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	set_alarm_flag = 1;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <EXTI0_IRQHandler+0x14>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f001 f93a 	bl	80030c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200000a8 	.word	0x200000a8

08001e58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	alarm_snooze_flag = 1;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <EXTI1_IRQHandler+0x14>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8001e62:	2002      	movs	r0, #2
 8001e64:	f001 f92e 	bl	80030c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200000ac 	.word	0x200000ac

08001e70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	alarm_off_flag = 1;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <EXTI2_IRQHandler+0x14>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 8001e7a:	2004      	movs	r0, #4
 8001e7c:	f001 f922 	bl	80030c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200000a4 	.word	0x200000a4

08001e88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	set_time_flag = 1;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <EXTI4_IRQHandler+0x14>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8001e92:	2010      	movs	r0, #16
 8001e94:	f001 f916 	bl	80030c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200000b0 	.word	0x200000b0

08001ea0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ea6:	f000 fe0f 	bl	8002ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200000d8 	.word	0x200000d8

08001eb4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	alarm_triggered_flag = 1;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <RTC_Alarm_IRQHandler+0x14>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <RTC_Alarm_IRQHandler+0x18>)
 8001ec0:	f004 fd2e 	bl	8006920 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200000a0 	.word	0x200000a0
 8001ecc:	200000b4 	.word	0x200000b4

08001ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <_sbrk+0x5c>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <_sbrk+0x60>)
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <_sbrk+0x64>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <_sbrk+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d207      	bcs.n	8001f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f00:	f006 fb46 	bl	8008590 <__errno>
 8001f04:	4603      	mov	r3, r0
 8001f06:	220c      	movs	r2, #12
 8001f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	e009      	b.n	8001f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <_sbrk+0x64>)
 8001f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20030000 	.word	0x20030000
 8001f30:	00000400 	.word	0x00000400
 8001f34:	20000094 	.word	0x20000094
 8001f38:	200005b8 	.word	0x200005b8

08001f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <SystemInit+0x98>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <SystemInit+0x98>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f68:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <SystemInit+0x9c>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f86:	f023 0305 	bic.w	r3, r3, #5
 8001f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <SystemInit+0xa0>)
 8001fa8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <SystemInit+0xa0>)
 8001fb0:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	faf6fefb 	.word	0xfaf6fefb
 8001fdc:	22041000 	.word	0x22041000

08001fe0 <LL_AHB2_GRP1_EnableClock>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002004:	68fb      	ldr	r3, [r7, #12]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_APB1_GRP1_EnableClock>:
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4313      	orrs	r3, r2
 8002028:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4013      	ands	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f006 fac6 	bl	80085e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	463b      	mov	r3, r7
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <MX_TIM2_Init+0xa4>)
 8002064:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002068:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <MX_TIM2_Init+0xa4>)
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_TIM2_Init+0xa4>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_TIM2_Init+0xa4>)
 8002078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800207c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_TIM2_Init+0xa4>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <MX_TIM2_Init+0xa4>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800208a:	2303      	movs	r3, #3
 800208c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002092:	2301      	movs	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800209a:	230a      	movs	r3, #10
 800209c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020a2:	2301      	movs	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	4619      	mov	r1, r3
 80020b4:	480c      	ldr	r0, [pc, #48]	; (80020e8 <MX_TIM2_Init+0xa4>)
 80020b6:	f005 f9bd 	bl	8007434 <HAL_TIM_Encoder_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80020c0:	f7ff fcb0 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_TIM2_Init+0xa4>)
 80020d2:	f005 fb6d 	bl	80077b0 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80020dc:	f7ff fca2 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3730      	adds	r7, #48	; 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200001d0 	.word	0x200001d0

080020ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d116      	bne.n	800213c <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff ff7f 	bl	8002012 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	2001      	movs	r0, #1
 8002116:	f7ff ff63 	bl	8001fe0 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800211a:	2303      	movs	r3, #3
 800211c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800212a:	2301      	movs	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f000 fe24 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <LL_AHB2_GRP1_EnableClock>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4313      	orrs	r3, r2
 800215a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4013      	ands	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002168:	68fb      	ldr	r3, [r7, #12]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_APB2_GRP1_EnableClock>:
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4313      	orrs	r3, r2
 800218c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021ae:	4a23      	ldr	r2, [pc, #140]	; (800223c <MX_USART1_UART_Init+0x94>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021f0:	4811      	ldr	r0, [pc, #68]	; (8002238 <MX_USART1_UART_Init+0x90>)
 80021f2:	f005 fb5d 	bl	80078b0 <HAL_UART_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021fc:	f7ff fc12 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002200:	2100      	movs	r1, #0
 8002202:	480d      	ldr	r0, [pc, #52]	; (8002238 <MX_USART1_UART_Init+0x90>)
 8002204:	f006 f8be 	bl	8008384 <HAL_UARTEx_SetTxFifoThreshold>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800220e:	f7ff fc09 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002212:	2100      	movs	r1, #0
 8002214:	4808      	ldr	r0, [pc, #32]	; (8002238 <MX_USART1_UART_Init+0x90>)
 8002216:	f006 f8f3 	bl	8008400 <HAL_UARTEx_SetRxFifoThreshold>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002220:	f7ff fc00 	bl	8001a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <MX_USART1_UART_Init+0x90>)
 8002226:	f006 f874 	bl	8008312 <HAL_UARTEx_DisableFifoMode>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002230:	f7ff fbf8 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000021c 	.word	0x2000021c
 800223c:	40013800 	.word	0x40013800

08002240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b09c      	sub	sp, #112	; 0x70
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2250      	movs	r2, #80	; 0x50
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f006 f9bf 	bl	80085e4 <memset>
  if(uartHandle->Instance==USART1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_UART_MspInit+0x84>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d124      	bne.n	80022ba <HAL_UART_MspInit+0x7a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002270:	2301      	movs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4618      	mov	r0, r3
 800227e:	f002 fdb1 	bl	8004de4 <HAL_RCCEx_PeriphCLKConfig>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002288:	f7ff fbcc 	bl	8001a24 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800228c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002290:	f7ff ff71 	bl	8002176 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	2002      	movs	r0, #2
 8002296:	f7ff ff55 	bl	8002144 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800229a:	23c0      	movs	r3, #192	; 0xc0
 800229c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022aa:	2307      	movs	r3, #7
 80022ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022b2:	4619      	mov	r1, r3
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <HAL_UART_MspInit+0x88>)
 80022b6:	f000 fd65 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022ba:	bf00      	nop
 80022bc:	3770      	adds	r7, #112	; 0x70
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40013800 	.word	0x40013800
 80022c8:	48000400 	.word	0x48000400

080022cc <LL_AHB2_GRP1_EnableClock>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_APB1_GRP1_EnableClock>:
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800230c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4313      	orrs	r3, r2
 8002314:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4013      	ands	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <MX_USB_PCD_Init+0x48>)
 8002336:	4a11      	ldr	r2, [pc, #68]	; (800237c <MX_USB_PCD_Init+0x4c>)
 8002338:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_USB_PCD_Init+0x48>)
 800233c:	2208      	movs	r2, #8
 800233e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <MX_USB_PCD_Init+0x48>)
 8002342:	2202      	movs	r2, #2
 8002344:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USB_PCD_Init+0x48>)
 8002348:	2202      	movs	r2, #2
 800234a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <MX_USB_PCD_Init+0x48>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USB_PCD_Init+0x48>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <MX_USB_PCD_Init+0x48>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USB_PCD_Init+0x48>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_USB_PCD_Init+0x48>)
 8002366:	f000 fed0 	bl	800310a <HAL_PCD_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002370:	f7ff fb58 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200002ac 	.word	0x200002ac
 800237c:	40006800 	.word	0x40006800

08002380 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_PCD_MspInit+0x5c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d118      	bne.n	80023d4 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7ff ff92 	bl	80022cc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80023ba:	230a      	movs	r3, #10
 80023bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c8:	f000 fcdc 	bl	8002d84 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80023cc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80023d0:	f7ff ff95 	bl	80022fe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40006800 	.word	0x40006800

080023e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80023e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e4:	3304      	adds	r3, #4

080023e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80023ea:	d3f9      	bcc.n	80023e0 <CopyDataInit>
  bx lr
 80023ec:	4770      	bx	lr

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80023ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80023f0:	3004      	adds	r0, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80023f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>
  bx lr
 80023f6:	4770      	bx	lr

080023f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80023fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023fc:	f7ff fd9e 	bl	8001f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <LoopForever+0x8>)
 8002402:	490c      	ldr	r1, [pc, #48]	; (8002434 <LoopForever+0xc>)
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <LoopForever+0x10>)
 8002406:	2300      	movs	r3, #0
 8002408:	f7ff ffed 	bl	80023e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <LoopForever+0x14>)
 800240e:	490c      	ldr	r1, [pc, #48]	; (8002440 <LoopForever+0x18>)
 8002410:	2300      	movs	r3, #0
 8002412:	f7ff ffee 	bl	80023f2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002416:	480b      	ldr	r0, [pc, #44]	; (8002444 <LoopForever+0x1c>)
 8002418:	490b      	ldr	r1, [pc, #44]	; (8002448 <LoopForever+0x20>)
 800241a:	2300      	movs	r3, #0
 800241c:	f7ff ffe9 	bl	80023f2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002420:	f006 f8bc 	bl	800859c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002424:	f7ff f8c8 	bl	80015b8 <main>

08002428 <LoopForever>:

LoopForever:
  b LoopForever
 8002428:	e7fe      	b.n	8002428 <LoopForever>
 800242a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800242c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002430:	20000004 	.word	0x20000004
 8002434:	20000074 	.word	0x20000074
 8002438:	0800a270 	.word	0x0800a270
  INIT_BSS _sbss, _ebss
 800243c:	20000074 	.word	0x20000074
 8002440:	200005b4 	.word	0x200005b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002444:	20030000 	.word	0x20030000
 8002448:	20030000 	.word	0x20030000

0800244c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC1_IRQHandler>
	...

08002450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_Init+0x3c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_Init+0x3c>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002466:	2003      	movs	r0, #3
 8002468:	f000 f96c 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800246c:	2000      	movs	r0, #0
 800246e:	f000 f80f 	bl	8002490 <HAL_InitTick>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	e001      	b.n	8002482 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800247e:	f7ff fcad 	bl	8001ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002482:	79fb      	ldrb	r3, [r7, #7]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	58004000 	.word	0x58004000

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_InitTick+0x6c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d024      	beq.n	80024ee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024a4:	f002 f80c 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_InitTick+0x6c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f974 	bl	80027aa <HAL_SYSTICK_Config>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10f      	bne.n	80024e8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b0f      	cmp	r3, #15
 80024cc:	d809      	bhi.n	80024e2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ce:	2200      	movs	r2, #0
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	f04f 30ff 	mov.w	r0, #4294967295
 80024d6:	f000 f940 	bl	800275a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_InitTick+0x70>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e007      	b.n	80024f2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e004      	b.n	80024f2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e001      	b.n	80024f2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2000000c 	.word	0x2000000c
 8002500:	20000008 	.word	0x20000008

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_IncTick+0x20>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x24>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_IncTick+0x24>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000000c 	.word	0x2000000c
 8002528:	200005a0 	.word	0x200005a0

0800252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTick;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_GetTick+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	200005a0 	.word	0x200005a0

08002544 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTickPrio+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000008 	.word	0x20000008

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffe2 	bl	800252c <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d005      	beq.n	8002582 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_Delay+0x44>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002582:	bf00      	nop
 8002584:	f7ff ffd2 	bl	800252c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8f7      	bhi.n	8002584 <HAL_Delay+0x28>
    {
    }
  }
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000000c 	.word	0x2000000c

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff8e 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff29 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002768:	f7ff ff40 	bl	80025ec <__NVIC_GetPriorityGrouping>
 800276c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff90 	bl	8002698 <NVIC_EncodePriority>
 8002778:	4602      	mov	r2, r0
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff5f 	bl	8002644 <__NVIC_SetPriority>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff33 	bl	8002608 <__NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ffa4 	bl	8002700 <SysTick_Config>
 80027b8:	4603      	mov	r3, r0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e08e      	b.n	80028f4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_DMA_Init+0x138>)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d80f      	bhi.n	8002802 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b45      	ldr	r3, [pc, #276]	; (8002900 <HAL_DMA_Init+0x13c>)
 80027ea:	4413      	add	r3, r2
 80027ec:	4a45      	ldr	r2, [pc, #276]	; (8002904 <HAL_DMA_Init+0x140>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	009a      	lsls	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_DMA_Init+0x144>)
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002800:	e00e      	b.n	8002820 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_DMA_Init+0x148>)
 800280a:	4413      	add	r3, r2
 800280c:	4a3d      	ldr	r2, [pc, #244]	; (8002904 <HAL_DMA_Init+0x140>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	009a      	lsls	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <HAL_DMA_Init+0x14c>)
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa22 	bl	8002cbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002880:	d102      	bne.n	8002888 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002890:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002894:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800289e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d010      	beq.n	80028ca <HAL_DMA_Init+0x106>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d80c      	bhi.n	80028ca <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fa41 	bl	8002d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	e008      	b.n	80028dc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40020407 	.word	0x40020407
 8002900:	bffdfff8 	.word	0xbffdfff8
 8002904:	cccccccd 	.word	0xcccccccd
 8002908:	40020000 	.word	0x40020000
 800290c:	bffdfbf8 	.word	0xbffdfbf8
 8002910:	40020400 	.word	0x40020400

08002914 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_DMA_Start_IT+0x20>
 8002930:	2302      	movs	r3, #2
 8002932:	e066      	b.n	8002a02 <HAL_DMA_Start_IT+0xee>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d155      	bne.n	80029f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f966 	bl	8002c3e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 020e 	orr.w	r2, r2, #14
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e00f      	b.n	80029ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0204 	bic.w	r2, r2, #4
 800299a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 020a 	orr.w	r2, r2, #10
 80029aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e005      	b.n	8002a00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
 80029fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e04f      	b.n	8002abc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d008      	beq.n	8002a3a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e040      	b.n	8002abc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 020e 	bic.w	r2, r2, #14
 8002a48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f003 021c 	and.w	r2, r3, #28
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2101      	movs	r1, #1
 8002a78:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00c      	beq.n	8002aaa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002aa8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	f003 031c 	and.w	r3, r3, #28
 8002ae8:	2204      	movs	r2, #4
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d026      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x7a>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d021      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0204 	bic.w	r2, r2, #4
 8002b1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	f003 021c 	and.w	r2, r3, #28
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2104      	movs	r1, #4
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d071      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b40:	e06c      	b.n	8002c1c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f003 031c 	and.w	r3, r3, #28
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d02e      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0xec>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d029      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10b      	bne.n	8002b86 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 020a 	bic.w	r2, r2, #10
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f003 021c 	and.w	r2, r3, #28
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	2102      	movs	r1, #2
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d038      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002bb2:	e033      	b.n	8002c1c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f003 031c 	and.w	r3, r3, #28
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02a      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x156>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d025      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020e 	bic.w	r2, r2, #14
 8002be0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f003 021c 	and.w	r2, r3, #28
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
}
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c54:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c66:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f003 021c 	and.w	r2, r3, #28
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d108      	bne.n	8002c9e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c9c:	e007      	b.n	8002cae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	60da      	str	r2, [r3, #12]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d80a      	bhi.n	8002ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cdc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6493      	str	r3, [r2, #72]	; 0x48
 8002ce4:	e007      	b.n	8002cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	009a      	lsls	r2, r3, #2
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3b08      	subs	r3, #8
 8002cfe:	4a0c      	ldr	r2, [pc, #48]	; (8002d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002d0c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2201      	movs	r2, #1
 8002d16:	409a      	lsls	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40020407 	.word	0x40020407
 8002d2c:	4002081c 	.word	0x4002081c
 8002d30:	cccccccd 	.word	0xcccccccd
 8002d34:	40020880 	.word	0x40020880

08002d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d48:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	461a      	mov	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2201      	movs	r2, #1
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	1000823f 	.word	0x1000823f
 8002d80:	40020940 	.word	0x40020940

08002d84 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d92:	e14c      	b.n	800302e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 813e 	beq.w	8003028 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d005      	beq.n	8002dc4 <HAL_GPIO_Init+0x40>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d130      	bne.n	8002e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 0201 	and.w	r2, r3, #1
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d017      	beq.n	8002e62 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d123      	bne.n	8002eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	6939      	ldr	r1, [r7, #16]
 8002eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8098 	beq.w	8003028 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef8:	4a54      	ldr	r2, [pc, #336]	; (800304c <HAL_GPIO_Init+0x2c8>)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f22:	d019      	beq.n	8002f58 <HAL_GPIO_Init+0x1d4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_GPIO_Init+0x2cc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_GPIO_Init+0x1d0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a49      	ldr	r2, [pc, #292]	; (8003054 <HAL_GPIO_Init+0x2d0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00d      	beq.n	8002f50 <HAL_GPIO_Init+0x1cc>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a48      	ldr	r2, [pc, #288]	; (8003058 <HAL_GPIO_Init+0x2d4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <HAL_GPIO_Init+0x1c8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a47      	ldr	r2, [pc, #284]	; (800305c <HAL_GPIO_Init+0x2d8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_GPIO_Init+0x1c4>
 8002f44:	2304      	movs	r3, #4
 8002f46:	e008      	b.n	8002f5a <HAL_GPIO_Init+0x1d6>
 8002f48:	2307      	movs	r3, #7
 8002f4a:	e006      	b.n	8002f5a <HAL_GPIO_Init+0x1d6>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e004      	b.n	8002f5a <HAL_GPIO_Init+0x1d6>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e002      	b.n	8002f5a <HAL_GPIO_Init+0x1d6>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_GPIO_Init+0x1d6>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	f002 0203 	and.w	r2, r2, #3
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	4093      	lsls	r3, r2
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f6a:	4938      	ldr	r1, [pc, #224]	; (800304c <HAL_GPIO_Init+0x2c8>)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f78:	4b39      	ldr	r3, [pc, #228]	; (8003060 <HAL_GPIO_Init+0x2dc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f9c:	4a30      	ldr	r2, [pc, #192]	; (8003060 <HAL_GPIO_Init+0x2dc>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <HAL_GPIO_Init+0x2dc>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fc6:	4a26      	ldr	r2, [pc, #152]	; (8003060 <HAL_GPIO_Init+0x2dc>)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_GPIO_Init+0x2dc>)
 8002fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff2:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_GPIO_Init+0x2dc>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002ffa:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_GPIO_Init+0x2dc>)
 8002ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003020:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <HAL_GPIO_Init+0x2dc>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f aeab 	bne.w	8002d94 <HAL_GPIO_Init+0x10>
  }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40010000 	.word	0x40010000
 8003050:	48000400 	.word	0x48000400
 8003054:	48000800 	.word	0x48000800
 8003058:	48000c00 	.word	0x48000c00
 800305c:	48001000 	.word	0x48001000
 8003060:	58000800 	.word	0x58000800

08003064 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
 8003080:	e001      	b.n	8003086 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
 80030a0:	4613      	mov	r3, r2
 80030a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b0:	e002      	b.n	80030b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030da:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f806 	bl	80030f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	58000800 	.word	0x58000800

080030f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800310a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310c:	b08b      	sub	sp, #44	; 0x2c
 800310e:	af06      	add	r7, sp, #24
 8003110:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d7      	b.n	80032cc <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff f925 	bl	8002380 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f005 f9e8 	bl	8008518 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e04c      	b.n	80031e8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	3301      	adds	r3, #1
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	b298      	uxth	r0, r3
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	3336      	adds	r3, #54	; 0x36
 800318c:	4602      	mov	r2, r0
 800318e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	440b      	add	r3, r1
 80031a0:	3303      	adds	r3, #3
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	3338      	adds	r3, #56	; 0x38
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	440b      	add	r3, r1
 80031c8:	333c      	adds	r3, #60	; 0x3c
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	3340      	adds	r3, #64	; 0x40
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	3301      	adds	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d3ad      	bcc.n	800314e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	e044      	b.n	8003282 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	f203 1369 	addw	r3, r3, #361	; 0x169
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	3301      	adds	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	d3b5      	bcc.n	80031f8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	687e      	ldr	r6, [r7, #4]
 8003294:	466d      	mov	r5, sp
 8003296:	f106 0410 	add.w	r4, r6, #16
 800329a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	602b      	str	r3, [r5, #0]
 80032a2:	1d33      	adds	r3, r6, #4
 80032a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a6:	6838      	ldr	r0, [r7, #0]
 80032a8:	f005 f951 	bl	800854e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f805 	bl	80032d4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800330c:	b29b      	uxth	r3, r3
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003336:	6013      	str	r3, [r2, #0]
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	58000400 	.word	0x58000400

08003348 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_PWREx_GetVoltageRange+0x18>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	58000400 	.word	0x58000400

08003364 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003376:	d101      	bne.n	800337c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_RCC_HSE_Enable>:
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_RCC_HSE_Disable>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_RCC_HSE_IsReady>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033d6:	d101      	bne.n	80033dc <LL_RCC_HSE_IsReady+0x18>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <LL_RCC_HSE_IsReady+0x1a>
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_RCC_HSI_Enable>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_RCC_HSI_Disable>:
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003418:	6013      	str	r3, [r2, #0]
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_RCC_HSI_IsReady>:
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d101      	bne.n	800343c <LL_RCC_HSI_IsReady+0x18>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <LL_RCC_HSI_IsReady+0x1a>
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_RCC_HSI48_Enable>:
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800347e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_RCC_HSI48_Disable>:
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_RCC_HSI48_IsReady>:
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d101      	bne.n	80034ce <LL_RCC_HSI48_IsReady+0x18>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <LL_RCC_HSI48_IsReady+0x1a>
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_RCC_LSE_Enable>:
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_RCC_LSE_Disable>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_RCC_LSE_EnableBypass>:
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_RCC_LSE_DisableBypass>:
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <LL_RCC_LSE_IsReady>:
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d101      	bne.n	800357a <LL_RCC_LSE_IsReady+0x18>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <LL_RCC_LSE_IsReady+0x1a>
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_RCC_LSI1_Enable>:
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_RCC_LSI1_Disable>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_RCC_LSI1_IsReady>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d101      	bne.n	80035e2 <LL_RCC_LSI1_IsReady+0x18>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <LL_RCC_LSI1_IsReady+0x1a>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_RCC_LSI2_Enable>:
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80035f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035fe:	f043 0304 	orr.w	r3, r3, #4
 8003602:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_RCC_LSI2_Disable>:
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_RCC_LSI2_IsReady>:
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	d101      	bne.n	800364a <LL_RCC_LSI2_IsReady+0x18>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <LL_RCC_LSI2_IsReady+0x1a>
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_RCC_LSI2_SetTrimming>:
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003666:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_RCC_MSI_Enable>:
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6013      	str	r3, [r2, #0]
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <LL_RCC_MSI_Disable>:
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80036a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6013      	str	r3, [r2, #0]
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_RCC_MSI_IsReady>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80036c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d101      	bne.n	80036d6 <LL_RCC_MSI_IsReady+0x16>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_RCC_MSI_IsReady+0x18>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_RCC_MSI_SetRange>:
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80036ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_RCC_MSI_GetRange>:
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2bb0      	cmp	r3, #176	; 0xb0
 8003720:	d901      	bls.n	8003726 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003722:	23b0      	movs	r3, #176	; 0xb0
 8003724:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003726:	687b      	ldr	r3, [r7, #4]
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_RCC_SetSysClkSource>:
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 0203 	bic.w	r2, r3, #3
 8003770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_RCC_GetSysClkSource>:
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <LL_RCC_SetAHBPrescaler>:
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_RCC_SetAHB4Prescaler>:
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003802:	f023 020f 	bic.w	r2, r3, #15
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_RCC_SetAPB1Prescaler>:
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_RCC_SetAPB2Prescaler>:
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800385a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_RCC_GetAHBPrescaler>:
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_RCC_GetAHB4Prescaler>:
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_RCC_GetAPB1Prescaler>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80038a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_RCC_GetAPB2Prescaler>:
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e6:	6013      	str	r3, [r2, #0]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003904:	6013      	str	r3, [r2, #0]
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003922:	d101      	bne.n	8003928 <LL_RCC_PLL_IsReady+0x18>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <LL_RCC_PLL_IsReady+0x1a>
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0303 	and.w	r3, r3, #3
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800399a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d101      	bne.n	80039ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ce:	d101      	bne.n	80039d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d101      	bne.n	80039fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a18:	d101      	bne.n	8003a1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a3c:	d101      	bne.n	8003a42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b08d      	sub	sp, #52	; 0x34
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e37e      	b.n	8004160 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8092 	beq.w	8003b94 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a70:	f7ff fe89 	bl	8003786 <LL_RCC_GetSysClkSource>
 8003a74:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a76:	f7ff ff82 	bl	800397e <LL_RCC_PLL_GetMainSource>
 8003a7a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_RCC_OscConfig+0x3e>
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	2b0c      	cmp	r3, #12
 8003a86:	d14c      	bne.n	8003b22 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d149      	bne.n	8003b22 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a8e:	f7ff fe17 	bl	80036c0 <LL_RCC_MSI_IsReady>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x54>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e35d      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003aa8:	f7ff fe2f 	bl	800370a <LL_RCC_MSI_GetRange>
 8003aac:	4603      	mov	r3, r0
 8003aae:	429c      	cmp	r4, r3
 8003ab0:	d914      	bls.n	8003adc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fd42 	bl	8004540 <RCC_SetFlashLatencyFromMSIRange>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e34c      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fe09 	bl	80036e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fe2d 	bl	8003734 <LL_RCC_MSI_SetCalibTrimming>
 8003ada:	e013      	b.n	8003b04 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fdfe 	bl	80036e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fe22 	bl	8003734 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fd23 	bl	8004540 <RCC_SetFlashLatencyFromMSIRange>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e32d      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b04:	f000 fcdc 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4ab3      	ldr	r2, [pc, #716]	; (8003dd8 <HAL_RCC_OscConfig+0x388>)
 8003b0c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b0e:	4bb3      	ldr	r3, [pc, #716]	; (8003ddc <HAL_RCC_OscConfig+0x38c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fcbc 	bl	8002490 <HAL_InitTick>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d039      	beq.n	8003b92 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e31e      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01e      	beq.n	8003b68 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b2a:	f7ff fdab 	bl	8003684 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fcfd 	bl	800252c <HAL_GetTick>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b36:	f7fe fcf9 	bl	800252c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e30b      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003b48:	f7ff fdba 	bl	80036c0 <LL_RCC_MSI_IsReady>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f1      	beq.n	8003b36 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fdc3 	bl	80036e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fde7 	bl	8003734 <LL_RCC_MSI_SetCalibTrimming>
 8003b66:	e015      	b.n	8003b94 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b68:	f7ff fd9b 	bl	80036a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fcde 	bl	800252c <HAL_GetTick>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b74:	f7fe fcda 	bl	800252c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e2ec      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003b86:	f7ff fd9b 	bl	80036c0 <LL_RCC_MSI_IsReady>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f1      	bne.n	8003b74 <HAL_RCC_OscConfig+0x124>
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b92:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d04e      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba0:	f7ff fdf1 	bl	8003786 <LL_RCC_GetSysClkSource>
 8003ba4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba6:	f7ff feea 	bl	800397e <LL_RCC_PLL_GetMainSource>
 8003baa:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x16e>
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbe:	f7ff fc01 	bl	80033c4 <LL_RCC_HSE_IsReady>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d039      	beq.n	8003c3c <HAL_RCC_OscConfig+0x1ec>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d135      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e2c5      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCC_OscConfig+0x194>
 8003bde:	f7ff fbd3 	bl	8003388 <LL_RCC_HSE_Enable>
 8003be2:	e001      	b.n	8003be8 <HAL_RCC_OscConfig+0x198>
 8003be4:	f7ff fbdf 	bl	80033a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d012      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fc9c 	bl	800252c <HAL_GetTick>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fc98 	bl	800252c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e2aa      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003c0a:	f7ff fbdb 	bl	80033c4 <LL_RCC_HSE_IsReady>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f1      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x1a8>
 8003c14:	e013      	b.n	8003c3e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fe fc89 	bl	800252c <HAL_GetTick>
 8003c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c1e:	f7fe fc85 	bl	800252c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b64      	cmp	r3, #100	; 0x64
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e297      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003c30:	f7ff fbc8 	bl	80033c4 <LL_RCC_HSE_IsReady>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f1      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1ce>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d051      	beq.n	8003cee <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4a:	f7ff fd9c 	bl	8003786 <LL_RCC_GetSysClkSource>
 8003c4e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c50:	f7ff fe95 	bl	800397e <LL_RCC_PLL_GetMainSource>
 8003c54:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_OscConfig+0x218>
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d113      	bne.n	8003c8a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d110      	bne.n	8003c8a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c68:	f7ff fbdc 	bl	8003424 <LL_RCC_HSI_IsReady>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x22e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e270      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fbe0 	bl	8003448 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c88:	e031      	b.n	8003cee <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d019      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c92:	f7ff fba9 	bl	80033e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fe fc49 	bl	800252c <HAL_GetTick>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fc45 	bl	800252c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e257      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003cb0:	f7ff fbb8 	bl	8003424 <LL_RCC_HSI_IsReady>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f1      	beq.n	8003c9e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fbc2 	bl	8003448 <LL_RCC_HSI_SetCalibTrimming>
 8003cc4:	e013      	b.n	8003cee <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc6:	f7ff fb9e 	bl	8003406 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe fc2f 	bl	800252c <HAL_GetTick>
 8003cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fc2b 	bl	800252c <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e23d      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003ce4:	f7ff fb9e 	bl	8003424 <LL_RCC_HSI_IsReady>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f1      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80a3 	beq.w	8003e4e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d076      	beq.n	8003dfe <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d046      	beq.n	8003daa <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003d1c:	f7ff fc55 	bl	80035ca <LL_RCC_LSI1_IsReady>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d113      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003d26:	f7ff fc2e 	bl	8003586 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d2a:	f7fe fbff 	bl	800252c <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d32:	f7fe fbfb 	bl	800252c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e20d      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003d44:	f7ff fc41 	bl	80035ca <LL_RCC_LSI1_IsReady>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f1      	beq.n	8003d32 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003d4e:	f7ff fc4e 	bl	80035ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fe fbeb 	bl	800252c <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003d5a:	f7fe fbe7 	bl	800252c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1f9      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003d6c:	f7ff fc61 	bl	8003632 <LL_RCC_LSI2_IsReady>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f1      	beq.n	8003d5a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fc6b 	bl	8003656 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003d80:	f7ff fc12 	bl	80035a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fbd2 	bl	800252c <HAL_GetTick>
 8003d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d8c:	f7fe fbce 	bl	800252c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1e0      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003d9e:	f7ff fc14 	bl	80035ca <LL_RCC_LSI1_IsReady>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f1      	bne.n	8003d8c <HAL_RCC_OscConfig+0x33c>
 8003da8:	e051      	b.n	8003e4e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003daa:	f7ff fbec 	bl	8003586 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fe fbbd 	bl	800252c <HAL_GetTick>
 8003db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003db6:	f7fe fbb9 	bl	800252c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1cb      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003dc8:	f7ff fbff 	bl	80035ca <LL_RCC_LSI1_IsReady>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f1      	beq.n	8003db6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003dd2:	f7ff fc1d 	bl	8003610 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003dd6:	e00c      	b.n	8003df2 <HAL_RCC_OscConfig+0x3a2>
 8003dd8:	20000004 	.word	0x20000004
 8003ddc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003de0:	f7fe fba4 	bl	800252c <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e1b6      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003df2:	f7ff fc1e 	bl	8003632 <LL_RCC_LSI2_IsReady>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f1      	bne.n	8003de0 <HAL_RCC_OscConfig+0x390>
 8003dfc:	e027      	b.n	8003e4e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003dfe:	f7ff fc07 	bl	8003610 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e02:	f7fe fb93 	bl	800252c <HAL_GetTick>
 8003e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003e0a:	f7fe fb8f 	bl	800252c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e1a1      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003e1c:	f7ff fc09 	bl	8003632 <LL_RCC_LSI2_IsReady>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f1      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003e26:	f7ff fbbf 	bl	80035a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2a:	f7fe fb7f 	bl	800252c <HAL_GetTick>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003e32:	f7fe fb7b 	bl	800252c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e18d      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003e44:	f7ff fbc1 	bl	80035ca <LL_RCC_LSI1_IsReady>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f1      	bne.n	8003e32 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d05b      	beq.n	8003f12 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5a:	4bb5      	ldr	r3, [pc, #724]	; (8004130 <HAL_RCC_OscConfig+0x6e0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d114      	bne.n	8003e90 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003e66:	f7ff fa5f 	bl	8003328 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fb5f 	bl	800252c <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fe fb5b 	bl	800252c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e16d      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e84:	4baa      	ldr	r3, [pc, #680]	; (8004130 <HAL_RCC_OscConfig+0x6e0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d102      	bne.n	8003e9e <HAL_RCC_OscConfig+0x44e>
 8003e98:	f7ff fb1f 	bl	80034da <LL_RCC_LSE_Enable>
 8003e9c:	e00c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x468>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d104      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x460>
 8003ea6:	f7ff fb3a 	bl	800351e <LL_RCC_LSE_EnableBypass>
 8003eaa:	f7ff fb16 	bl	80034da <LL_RCC_LSE_Enable>
 8003eae:	e003      	b.n	8003eb8 <HAL_RCC_OscConfig+0x468>
 8003eb0:	f7ff fb24 	bl	80034fc <LL_RCC_LSE_Disable>
 8003eb4:	f7ff fb44 	bl	8003540 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d014      	beq.n	8003eea <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fe fb34 	bl	800252c <HAL_GetTick>
 8003ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fb30 	bl	800252c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e140      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ede:	f7ff fb40 	bl	8003562 <LL_RCC_LSE_IsReady>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0ef      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x478>
 8003ee8:	e013      	b.n	8003f12 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eea:	f7fe fb1f 	bl	800252c <HAL_GetTick>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fe fb1b 	bl	800252c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e12b      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003f08:	f7ff fb2b 	bl	8003562 <LL_RCC_LSE_IsReady>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ef      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d02c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d014      	beq.n	8003f50 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f26:	f7ff faa4 	bl	8003472 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fe faff 	bl	800252c <HAL_GetTick>
 8003f2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f32:	f7fe fafb 	bl	800252c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e10d      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003f44:	f7ff fab7 	bl	80034b6 <LL_RCC_HSI48_IsReady>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f1      	beq.n	8003f32 <HAL_RCC_OscConfig+0x4e2>
 8003f4e:	e013      	b.n	8003f78 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f50:	f7ff faa0 	bl	8003494 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7fe faea 	bl	800252c <HAL_GetTick>
 8003f58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f5c:	f7fe fae6 	bl	800252c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0f8      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003f6e:	f7ff faa2 	bl	80034b6 <LL_RCC_HSI48_IsReady>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f1      	bne.n	8003f5c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80ee 	beq.w	800415e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f82:	f7ff fc00 	bl	8003786 <LL_RCC_GetSysClkSource>
 8003f86:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	f040 80af 	bne.w	80040f8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0203 	and.w	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d123      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d114      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d106      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d05d      	beq.n	80040ac <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d058      	beq.n	80040a8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0ab      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004008:	f7ff fc73 	bl	80038f2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800400c:	f7fe fa8e 	bl	800252c <HAL_GetTick>
 8004010:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe fa8a 	bl	800252c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e09c      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ef      	bne.n	8004014 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	4b3e      	ldr	r3, [pc, #248]	; (8004134 <HAL_RCC_OscConfig+0x6e4>)
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800404c:	0212      	lsls	r2, r2, #8
 800404e:	4311      	orrs	r1, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004060:	430a      	orrs	r2, r1
 8004062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004066:	4313      	orrs	r3, r2
 8004068:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800406a:	f7ff fc33 	bl	80038d4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407e:	f7fe fa55 	bl	800252c <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004086:	f7fe fa51 	bl	800252c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e063      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ef      	beq.n	8004086 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a6:	e05a      	b.n	800415e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e059      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d151      	bne.n	800415e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040ba:	f7ff fc0b 	bl	80038d4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040cc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ce:	f7fe fa2d 	bl	800252c <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fe fa29 	bl	800252c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e03b      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ef      	beq.n	80040d6 <HAL_RCC_OscConfig+0x686>
 80040f6:	e032      	b.n	800415e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d02d      	beq.n	800415a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fe:	f7ff fbf8 	bl	80038f2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800410c:	f023 0303 	bic.w	r3, r3, #3
 8004110:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004124:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fe fa01 	bl	800252c <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800412c:	e00d      	b.n	800414a <HAL_RCC_OscConfig+0x6fa>
 800412e:	bf00      	nop
 8004130:	58000400 	.word	0x58000400
 8004134:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe f9f8 	bl	800252c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ef      	bne.n	8004138 <HAL_RCC_OscConfig+0x6e8>
 8004158:	e001      	b.n	800415e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3734      	adds	r7, #52	; 0x34
 8004164:	46bd      	mov	sp, r7
 8004166:	bd90      	pop	{r4, r7, pc}

08004168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e12d      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800417c:	4b98      	ldr	r3, [pc, #608]	; (80043e0 <HAL_RCC_ClockConfig+0x278>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d91b      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b95      	ldr	r3, [pc, #596]	; (80043e0 <HAL_RCC_ClockConfig+0x278>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 0207 	bic.w	r2, r3, #7
 8004192:	4993      	ldr	r1, [pc, #588]	; (80043e0 <HAL_RCC_ClockConfig+0x278>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419a:	f7fe f9c7 	bl	800252c <HAL_GetTick>
 800419e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80041a2:	f7fe f9c3 	bl	800252c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e111      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b4:	4b8a      	ldr	r3, [pc, #552]	; (80043e0 <HAL_RCC_ClockConfig+0x278>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d1ef      	bne.n	80041a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fae3 	bl	800379e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041d8:	f7fe f9a8 	bl	800252c <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041e0:	f7fe f9a4 	bl	800252c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e0f2      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80041f2:	f7ff fbd0 	bl	8003996 <LL_RCC_IsActiveFlag_HPRE>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f1      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d016      	beq.n	8004236 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fada 	bl	80037c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004212:	f7fe f98b 	bl	800252c <HAL_GetTick>
 8004216:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800421a:	f7fe f987 	bl	800252c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0d5      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800422c:	f7ff fbc5 	bl	80039ba <LL_RCC_IsActiveFlag_C2HPRE>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f1      	beq.n	800421a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fad3 	bl	80037f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800424c:	f7fe f96e 	bl	800252c <HAL_GetTick>
 8004250:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004254:	f7fe f96a 	bl	800252c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e0b8      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004266:	f7ff fbbb 	bl	80039e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f1      	beq.n	8004254 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d016      	beq.n	80042aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff facd 	bl	8003820 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004286:	f7fe f951 	bl	800252c <HAL_GetTick>
 800428a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800428e:	f7fe f94d 	bl	800252c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e09b      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80042a0:	f7ff fbb1 	bl	8003a06 <LL_RCC_IsActiveFlag_PPRE1>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f1      	beq.n	800428e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d017      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fac3 	bl	8003848 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80042c2:	f7fe f933 	bl	800252c <HAL_GetTick>
 80042c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80042ca:	f7fe f92f 	bl	800252c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e07d      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80042dc:	f7ff fba5 	bl	8003a2a <LL_RCC_IsActiveFlag_PPRE2>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f1      	beq.n	80042ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d043      	beq.n	800437a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d106      	bne.n	8004308 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80042fa:	f7ff f863 	bl	80033c4 <LL_RCC_HSE_IsReady>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d11e      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e067      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b03      	cmp	r3, #3
 800430e:	d106      	bne.n	800431e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004310:	f7ff fafe 	bl	8003910 <LL_RCC_PLL_IsReady>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d113      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e05c      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004326:	f7ff f9cb 	bl	80036c0 <LL_RCC_MSI_IsReady>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d108      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e051      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004334:	f7ff f876 	bl	8003424 <LL_RCC_HSI_IsReady>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e04a      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fa09 	bl	800375e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434c:	f7fe f8ee 	bl	800252c <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	e00a      	b.n	800436a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004354:	f7fe f8ea 	bl	800252c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e036      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	f7ff fa0c 	bl	8003786 <LL_RCC_GetSysClkSource>
 800436e:	4602      	mov	r2, r0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	429a      	cmp	r2, r3
 8004378:	d1ec      	bne.n	8004354 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCC_ClockConfig+0x278>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d21b      	bcs.n	80043c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <HAL_RCC_ClockConfig+0x278>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 0207 	bic.w	r2, r3, #7
 8004390:	4913      	ldr	r1, [pc, #76]	; (80043e0 <HAL_RCC_ClockConfig+0x278>)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fe f8c8 	bl	800252c <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80043a0:	f7fe f8c4 	bl	800252c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e012      	b.n	80043d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCC_ClockConfig+0x278>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d1ef      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80043c0:	f000 f87e 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <HAL_RCC_ClockConfig+0x27c>)
 80043c8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80043ca:	f7fe f8bb 	bl	8002544 <HAL_GetTickPrio>
 80043ce:	4603      	mov	r3, r0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe f85d 	bl	8002490 <HAL_InitTick>
 80043d6:	4603      	mov	r3, r0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	58004000 	.word	0x58004000
 80043e4:	20000004 	.word	0x20000004

080043e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ee:	f7ff f9ca 	bl	8003786 <LL_RCC_GetSysClkSource>
 80043f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80043fa:	f7ff f986 	bl	800370a <LL_RCC_MSI_GetRange>
 80043fe:	4603      	mov	r3, r0
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	4a2b      	ldr	r2, [pc, #172]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e04b      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b04      	cmp	r3, #4
 8004414:	d102      	bne.n	800441c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e045      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d10a      	bne.n	8004438 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004422:	f7fe ff9f 	bl	8003364 <LL_RCC_HSE_IsEnabledDiv2>
 8004426:	4603      	mov	r3, r0
 8004428:	2b01      	cmp	r3, #1
 800442a:	d102      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800442c:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e03a      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004432:	4b22      	ldr	r3, [pc, #136]	; (80044bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e037      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004438:	f7ff faa1 	bl	800397e <LL_RCC_PLL_GetMainSource>
 800443c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d003      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0x64>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d003      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x6a>
 800444a:	e00d      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800444e:	60bb      	str	r3, [r7, #8]
        break;
 8004450:	e015      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004452:	f7fe ff87 	bl	8003364 <LL_RCC_HSE_IsEnabledDiv2>
 8004456:	4603      	mov	r3, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	d102      	bne.n	8004462 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800445e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004460:	e00d      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004462:	4b16      	ldr	r3, [pc, #88]	; (80044bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004464:	60bb      	str	r3, [r7, #8]
        break;
 8004466:	e00a      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004468:	f7ff f94f 	bl	800370a <LL_RCC_MSI_GetRange>
 800446c:	4603      	mov	r3, r0
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	4a0f      	ldr	r2, [pc, #60]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447a:	60bb      	str	r3, [r7, #8]
        break;
 800447c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800447e:	f7ff fa59 	bl	8003934 <LL_RCC_PLL_GetN>
 8004482:	4602      	mov	r2, r0
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	fb03 f402 	mul.w	r4, r3, r2
 800448a:	f7ff fa6c 	bl	8003966 <LL_RCC_PLL_GetDivider>
 800448e:	4603      	mov	r3, r0
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	3301      	adds	r3, #1
 8004494:	fbb4 f4f3 	udiv	r4, r4, r3
 8004498:	f7ff fa59 	bl	800394e <LL_RCC_PLL_GetR>
 800449c:	4603      	mov	r3, r0
 800449e:	0f5b      	lsrs	r3, r3, #29
 80044a0:	3301      	adds	r3, #1
 80044a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80044a8:	68fb      	ldr	r3, [r7, #12]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}
 80044b2:	bf00      	nop
 80044b4:	08009f88 	.word	0x08009f88
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	01e84800 	.word	0x01e84800

080044c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b598      	push	{r3, r4, r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80044c4:	f7ff ff90 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80044c8:	4604      	mov	r4, r0
 80044ca:	f7ff f9d1 	bl	8003870 <LL_RCC_GetAHBPrescaler>
 80044ce:	4603      	mov	r3, r0
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	4a03      	ldr	r2, [pc, #12]	; (80044e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80044d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd98      	pop	{r3, r4, r7, pc}
 80044e4:	08009f28 	.word	0x08009f28

080044e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e8:	b598      	push	{r3, r4, r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80044ec:	f7ff ffe8 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044f0:	4604      	mov	r4, r0
 80044f2:	f7ff f9d7 	bl	80038a4 <LL_RCC_GetAPB1Prescaler>
 80044f6:	4603      	mov	r3, r0
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	fa24 f303 	lsr.w	r3, r4, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd98      	pop	{r3, r4, r7, pc}
 8004510:	08009f68 	.word	0x08009f68

08004514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004514:	b598      	push	{r3, r4, r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004518:	f7ff ffd2 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 800451c:	4604      	mov	r4, r0
 800451e:	f7ff f9cd 	bl	80038bc <LL_RCC_GetAPB2Prescaler>
 8004522:	4603      	mov	r3, r0
 8004524:	0adb      	lsrs	r3, r3, #11
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_RCC_GetPCLK2Freq+0x28>)
 800452c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd98      	pop	{r3, r4, r7, pc}
 800453c:	08009f68 	.word	0x08009f68

08004540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2bb0      	cmp	r3, #176	; 0xb0
 800454c:	d903      	bls.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e007      	b.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004564:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004566:	f7ff f98f 	bl	8003888 <LL_RCC_GetAHB4Prescaler>
 800456a:	4603      	mov	r3, r0
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a0d      	ldr	r2, [pc, #52]	; (80045a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	0c9c      	lsrs	r4, r3, #18
 800458a:	f7fe fedd 	bl	8003348 <HAL_PWREx_GetVoltageRange>
 800458e:	4603      	mov	r3, r0
 8004590:	4619      	mov	r1, r3
 8004592:	4620      	mov	r0, r4
 8004594:	f000 f80c 	bl	80045b0 <RCC_SetFlashLatency>
 8004598:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd90      	pop	{r4, r7, pc}
 80045a2:	bf00      	nop
 80045a4:	08009f88 	.word	0x08009f88
 80045a8:	08009f28 	.word	0x08009f28
 80045ac:	431bde83 	.word	0x431bde83

080045b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b093      	sub	sp, #76	; 0x4c
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <RCC_SetFlashLatency+0xf0>)
 80045bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80045c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80045c6:	4a37      	ldr	r2, [pc, #220]	; (80046a4 <RCC_SetFlashLatency+0xf4>)
 80045c8:	f107 031c 	add.w	r3, r7, #28
 80045cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80045ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80045d2:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <RCC_SetFlashLatency+0xf8>)
 80045d4:	f107 040c 	add.w	r4, r7, #12
 80045d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80045de:	2300      	movs	r3, #0
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e8:	d11c      	bne.n	8004624 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	643b      	str	r3, [r7, #64]	; 0x40
 80045ee:	e015      	b.n	800461c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045f8:	4413      	add	r3, r2
 80045fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d808      	bhi.n	8004616 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800460c:	4413      	add	r3, r2
 800460e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004614:	e022      	b.n	800465c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004618:	3301      	adds	r3, #1
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
 800461c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461e:	2b03      	cmp	r3, #3
 8004620:	d9e6      	bls.n	80045f0 <RCC_SetFlashLatency+0x40>
 8004622:	e01b      	b.n	800465c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004624:	2300      	movs	r3, #0
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004628:	e015      	b.n	8004656 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800462a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004632:	4413      	add	r3, r2
 8004634:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d808      	bhi.n	8004650 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800463e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004646:	4413      	add	r3, r2
 8004648:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800464e:	e005      	b.n	800465c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004652:	3301      	adds	r3, #1
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	2b02      	cmp	r3, #2
 800465a:	d9e6      	bls.n	800462a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800465c:	4b13      	ldr	r3, [pc, #76]	; (80046ac <RCC_SetFlashLatency+0xfc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 0207 	bic.w	r2, r3, #7
 8004664:	4911      	ldr	r1, [pc, #68]	; (80046ac <RCC_SetFlashLatency+0xfc>)
 8004666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800466c:	f7fd ff5e 	bl	800252c <HAL_GetTick>
 8004670:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004672:	e008      	b.n	8004686 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004674:	f7fd ff5a 	bl	800252c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e007      	b.n	8004696 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004686:	4b09      	ldr	r3, [pc, #36]	; (80046ac <RCC_SetFlashLatency+0xfc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004690:	429a      	cmp	r2, r3
 8004692:	d1ef      	bne.n	8004674 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	374c      	adds	r7, #76	; 0x4c
 800469a:	46bd      	mov	sp, r7
 800469c:	bd90      	pop	{r4, r7, pc}
 800469e:	bf00      	nop
 80046a0:	08009efc 	.word	0x08009efc
 80046a4:	08009f0c 	.word	0x08009f0c
 80046a8:	08009f18 	.word	0x08009f18
 80046ac:	58004000 	.word	0x58004000

080046b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c2:	d101      	bne.n	80046c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <LL_RCC_HSE_IsReady>:
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e6:	d101      	bne.n	80046ec <LL_RCC_HSE_IsReady+0x18>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <LL_RCC_HSE_IsReady+0x1a>
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_RCC_HSI_IsReady>:
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d101      	bne.n	8004710 <LL_RCC_HSI_IsReady+0x18>
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <LL_RCC_HSI_IsReady+0x1a>
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_RCC_HSI48_IsReady>:
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d101      	bne.n	8004734 <LL_RCC_HSI48_IsReady+0x18>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <LL_RCC_HSI48_IsReady+0x1a>
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_RCC_LSE_IsEnabled>:
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <LL_RCC_LSE_IsEnabled+0x18>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <LL_RCC_LSE_IsEnabled+0x1a>
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <LL_RCC_LSE_IsReady>:
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d101      	bne.n	800477c <LL_RCC_LSE_IsReady+0x18>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <LL_RCC_LSE_IsReady+0x1a>
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_RCC_LSI1_IsReady>:
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800478c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d101      	bne.n	80047a0 <LL_RCC_LSI1_IsReady+0x18>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <LL_RCC_LSI1_IsReady+0x1a>
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_RCC_LSI2_IsReady>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80047b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d101      	bne.n	80047c4 <LL_RCC_LSI2_IsReady+0x18>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <LL_RCC_LSI2_IsReady+0x1a>
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <LL_RCC_MSI_IsReady>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80047d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d101      	bne.n	80047e6 <LL_RCC_MSI_IsReady+0x16>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <LL_RCC_MSI_IsReady+0x18>
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <LL_RCC_MSI_EnablePLLMode>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004800:	f043 0304 	orr.w	r3, r3, #4
 8004804:	6013      	str	r3, [r2, #0]
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <LL_RCC_MSI_GetRange>:
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004820:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2bb0      	cmp	r3, #176	; 0xb0
 8004826:	d901      	bls.n	800482c <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004828:	23b0      	movs	r3, #176	; 0xb0
 800482a:	607b      	str	r3, [r7, #4]
  return msiRange;
 800482c:	687b      	ldr	r3, [r7, #4]
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_RCC_SetRFWKPClockSource>:
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800484e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_RCC_GetRFWKPClockSource>:
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 800486a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004876:	4618      	mov	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_GetAHBPrescaler>:
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800488e:	4618      	mov	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_RCC_GetAPB1Prescaler>:
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800489c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <LL_RCC_GetAPB2Prescaler>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_RCC_SetSMPSClockSource>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <LL_RCC_GetSMPSClockSource>:
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <LL_RCC_SetSMPSPrescaler>:
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800491a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4313      	orrs	r3, r2
 8004922:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_RCC_GetSMPSPrescaler>:
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8004934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 800493e:	4618      	mov	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_RCC_SetUSARTClockSource>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f023 0203 	bic.w	r2, r3, #3
 800495c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LL_RCC_SetLPUARTClockSource>:
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800497c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_RCC_SetI2CClockSource>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <LL_RCC_SetLPTIMClockSource>:
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80049e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	041b      	lsls	r3, r3, #16
 80049f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <LL_RCC_SetSAIClockSource>:
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_RCC_SetRNGClockSource>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_RCC_SetCLK48ClockSource>:
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_RCC_SetUSBClockSource>:
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff ffe3 	bl	8004a66 <LL_RCC_SetCLK48ClockSource>
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <LL_RCC_SetADCClockSource>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_RCC_GetUSARTClockSource>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4013      	ands	r3, r2
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <LL_RCC_GetLPUARTClockSource>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4013      	ands	r3, r2
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_RCC_GetI2CClockSource>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4013      	ands	r3, r2
 8004b28:	091a      	lsrs	r2, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	4313      	orrs	r3, r2
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_RCC_GetLPTIMClockSource>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	0c1a      	lsrs	r2, r3, #16
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_RCC_GetSAIClockSource>:
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8004b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4013      	ands	r3, r2
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_RCC_GetRNGClockSource>:
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8004b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4013      	ands	r3, r2
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <LL_RCC_GetCLK48ClockSource>:
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8004baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4013      	ands	r3, r2
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_RCC_GetUSBClockSource>:
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ffe9 	bl	8004ba2 <LL_RCC_GetCLK48ClockSource>
 8004bd0:	4603      	mov	r3, r0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <LL_RCC_GetADCClockSource>:
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4013      	ands	r3, r2
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_SetRTCClockSource>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_GetRTCClockSource>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_RCC_ForceBackupDomainReset>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c7a:	bf00      	nop
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <LL_RCC_PLL_IsReady>:
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c96:	d101      	bne.n	8004c9c <LL_RCC_PLL_IsReady+0x18>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <LL_RCC_PLL_IsReady+0x1a>
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LL_RCC_PLL_GetN>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	0a1b      	lsrs	r3, r3, #8
 8004cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_RCC_PLL_GetP>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_RCC_PLL_GetQ>:
{
 8004cda:	b480      	push	{r7}
 8004cdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8004cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <LL_RCC_PLL_GetDivider>:
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_RCC_PLLSAI1_Enable>:
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d1c:	6013      	str	r3, [r2, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <LL_RCC_PLLSAI1_Disable>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d3a:	6013      	str	r3, [r2, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <LL_RCC_PLLSAI1_IsReady>:
{
 8004d46:	b480      	push	{r7}
 8004d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d58:	d101      	bne.n	8004d5e <LL_RCC_PLLSAI1_IsReady+0x18>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <LL_RCC_PLLSAI1_GetN>:
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8004d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <LL_RCC_PLLSAI1_GetP>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8004d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_RCC_PLLSAI1_GetQ>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_RCC_PLLSAI1_GetR>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <LL_RCC_PLL_GetMainSource>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004dec:	2300      	movs	r3, #0
 8004dee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004df0:	2300      	movs	r3, #0
 8004df2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d034      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e08:	d021      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004e0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e0e:	d81b      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e14:	d01d      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e1a:	d815      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00b      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e24:	d110      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e36:	e00d      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fd64 	bl	800590a <RCCEx_PLLSAI1_ConfigNP>
 8004e42:	4603      	mov	r3, r0
 8004e44:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e46:	e005      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
        break;
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e54:	7ffb      	ldrb	r3, [r7, #31]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d105      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fdd5 	bl	8004a0e <LL_RCC_SetSAIClockSource>
 8004e64:	e001      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e66:	7ffb      	ldrb	r3, [r7, #31]
 8004e68:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d046      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004e76:	f7ff fed6 	bl	8004c26 <LL_RCC_GetRTCClockSource>
 8004e7a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d03c      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e86:	f7fe fa4f 	bl	8003328 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff feb0 	bl	8004bfa <LL_RCC_SetRTCClockSource>
 8004e9a:	e02e      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004ea6:	f7ff fecb 	bl	8004c40 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004eaa:	f7ff feda 	bl	8004c62 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004ec6:	f7ff fc3b 	bl	8004740 <LL_RCC_LSE_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d114      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ed0:	f7fd fb2c 	bl	800252c <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed8:	f7fd fb28 	bl	800252c <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d902      	bls.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	77fb      	strb	r3, [r7, #31]
              break;
 8004eee:	e004      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ef0:	f7ff fc38 	bl	8004764 <LL_RCC_LSE_IsReady>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d1ee      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	77bb      	strb	r3, [r7, #30]
 8004efe:	e001      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f00:	7ffb      	ldrb	r3, [r7, #31]
 8004f02:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fd17 	bl	8004948 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fd22 	bl	8004974 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fd4a 	bl	80049da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fd3f 	bl	80049da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fd17 	bl	80049a0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d004      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fd0c 	bl	80049a0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d022      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fd7a 	bl	8004a92 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa6:	d107      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fc0:	d10b      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fcfa 	bl	80059c0 <RCCEx_PLLSAI1_ConfigNQ>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004fd0:	7ffb      	ldrb	r3, [r7, #31]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004fd6:	7ffb      	ldrb	r3, [r7, #31]
 8004fd8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02b      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d008      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff8:	d003      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d105      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fd17 	bl	8004a3a <LL_RCC_SetRNGClockSource>
 800500c:	e00a      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	2000      	movs	r0, #0
 800501a:	f7ff fd0e 	bl	8004a3a <LL_RCC_SetRNGClockSource>
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff fd21 	bl	8004a66 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800502c:	d107      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800502e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800503c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005046:	2b00      	cmp	r3, #0
 8005048:	d022      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fd2a 	bl	8004aa8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505c:	d107      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005076:	d10b      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fcfa 	bl	8005a76 <RCCEx_PLLSAI1_ConfigNR>
 8005082:	4603      	mov	r3, r0
 8005084:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005086:	7ffb      	ldrb	r3, [r7, #31]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800508c:	7ffb      	ldrb	r3, [r7, #31]
 800508e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d004      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff fbca 	bl	800483a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fc26 	bl	8004908 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fc01 	bl	80048c8 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80050c6:	7fbb      	ldrb	r3, [r7, #30]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b093      	sub	sp, #76	; 0x4c
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 80050dc:	f7ff fc28 	bl	8004930 <LL_RCC_GetSMPSPrescaler>
 80050e0:	4603      	mov	r3, r0
 80050e2:	091b      	lsrs	r3, r3, #4
 80050e4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ec:	d12d      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 80050ee:	f7ff fd9a 	bl	8004c26 <LL_RCC_GetRTCClockSource>
 80050f2:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fa:	d109      	bne.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80050fc:	f7ff fb32 	bl	8004764 <LL_RCC_LSE_IsReady>
 8005100:	4603      	mov	r3, r0
 8005102:	2b01      	cmp	r3, #1
 8005104:	f040 83d8 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8005108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510c:	647b      	str	r3, [r7, #68]	; 0x44
 800510e:	e3d3      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d110      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8005118:	f7ff fb36 	bl	8004788 <LL_RCC_LSI1_IsReady>
 800511c:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800511e:	f7ff fb45 	bl	80047ac <LL_RCC_LSI2_IsReady>
 8005122:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d003      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 83c3 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8005132:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005136:	647b      	str	r3, [r7, #68]	; 0x44
 8005138:	e3be      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005140:	f040 83ba 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 8005144:	4bba      	ldr	r3, [pc, #744]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8005146:	647b      	str	r3, [r7, #68]	; 0x44
 8005148:	e3b6      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d130      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8005150:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8005154:	f7ff fd05 	bl	8004b62 <LL_RCC_GetSAIClockSource>
 8005158:	4603      	mov	r3, r0
 800515a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800515e:	d008      	beq.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8005160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005164:	d822      	bhi.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800516a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516e:	d013      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8005170:	e01c      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 8005172:	f7ff fac1 	bl	80046f8 <LL_RCC_HSI_IsReady>
 8005176:	4603      	mov	r3, r0
 8005178:	2b01      	cmp	r3, #1
 800517a:	f040 837e 	bne.w	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 800517e:	4bad      	ldr	r3, [pc, #692]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005180:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005182:	e37a      	b.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8005184:	f7ff fddf 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 8005188:	4603      	mov	r3, r0
 800518a:	2b01      	cmp	r3, #1
 800518c:	f040 8377 	bne.w	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8005190:	f000 fdce 	bl	8005d30 <RCC_PLLSAI1_GetFreqDomain_P>
 8005194:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005196:	e372      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8005198:	f7ff fd74 	bl	8004c84 <LL_RCC_PLL_IsReady>
 800519c:	4603      	mov	r3, r0
 800519e:	2b01      	cmp	r3, #1
 80051a0:	f040 836f 	bne.w	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 80051a4:	f000 fcc2 	bl	8005b2c <RCC_PLL_GetFreqDomain_P>
 80051a8:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80051aa:	e36a      	b.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80051ac:	4ba2      	ldr	r3, [pc, #648]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 80051b0:	e382      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b8:	d168      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 80051ba:	f000 fb87 	bl	80058cc <HAL_RCCEx_GetRngCLKSource>
 80051be:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c6:	d110      	bne.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80051c8:	f7ff fade 	bl	8004788 <LL_RCC_LSI1_IsReady>
 80051cc:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80051ce:	f7ff faed 	bl	80047ac <LL_RCC_LSI2_IsReady>
 80051d2:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d003      	beq.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 836b 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80051e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80051e6:	647b      	str	r3, [r7, #68]	; 0x44
 80051e8:	e366      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f0:	d109      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80051f2:	f7ff fab7 	bl	8004764 <LL_RCC_LSE_IsReady>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f040 835d 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80051fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005202:	647b      	str	r3, [r7, #68]	; 0x44
 8005204:	e358      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800520c:	d10e      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 800520e:	f7ff fd39 	bl	8004c84 <LL_RCC_PLL_IsReady>
 8005212:	4603      	mov	r3, r0
 8005214:	2b01      	cmp	r3, #1
 8005216:	f040 834f 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 800521a:	f000 fcdd 	bl	8005bd8 <RCC_PLL_GetFreqDomain_Q>
 800521e:	4603      	mov	r3, r0
 8005220:	4a86      	ldr	r2, [pc, #536]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	647b      	str	r3, [r7, #68]	; 0x44
 800522a:	e345      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8005232:	d114      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 8005234:	f7ff facc 	bl	80047d0 <LL_RCC_MSI_IsReady>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	f040 833c 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 8005240:	f7ff fae6 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005244:	4603      	mov	r3, r0
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	4a7c      	ldr	r2, [pc, #496]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800524e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005252:	4a7a      	ldr	r2, [pc, #488]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	647b      	str	r3, [r7, #68]	; 0x44
 800525c:	e32c      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8005264:	d109      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8005266:	f7ff fd6e 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	f040 8323 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8005272:	f000 fdb3 	bl	8005ddc <RCC_PLLSAI1_GetFreqDomain_Q>
 8005276:	6478      	str	r0, [r7, #68]	; 0x44
 8005278:	e31e      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 800527a:	f7ff fa4f 	bl	800471c <LL_RCC_HSI48_IsReady>
 800527e:	4603      	mov	r3, r0
 8005280:	2b01      	cmp	r3, #1
 8005282:	f040 8319 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 8005286:	4b6b      	ldr	r3, [pc, #428]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8005288:	647b      	str	r3, [r7, #68]	; 0x44
 800528a:	e315      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005292:	d13f      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8005294:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8005298:	f7ff fc93 	bl	8004bc2 <LL_RCC_GetUSBClockSource>
 800529c:	4603      	mov	r3, r0
 800529e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052a2:	d01d      	beq.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80052a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80052a8:	d82b      	bhi.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 80052aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ae:	d003      	beq.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80052b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80052b6:	e024      	b.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80052b8:	f7ff fd45 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	f040 82e1 	bne.w	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 80052c4:	f000 fd8a 	bl	8005ddc <RCC_PLLSAI1_GetFreqDomain_Q>
 80052c8:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80052ca:	e2dc      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 80052cc:	f7ff fcda 	bl	8004c84 <LL_RCC_PLL_IsReady>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	f040 82d9 	bne.w	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 80052d8:	f000 fc7e 	bl	8005bd8 <RCC_PLL_GetFreqDomain_Q>
 80052dc:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80052de:	e2d4      	b.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 80052e0:	f7ff fa76 	bl	80047d0 <LL_RCC_MSI_IsReady>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	f040 82d1 	bne.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80052ec:	f7ff fa90 	bl	8004810 <LL_RCC_MSI_GetRange>
 80052f0:	4603      	mov	r3, r0
 80052f2:	091b      	lsrs	r3, r3, #4
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	4a51      	ldr	r2, [pc, #324]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80052fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052fe:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005300:	e2c5      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 8005302:	f7ff fa0b 	bl	800471c <LL_RCC_HSI48_IsReady>
 8005306:	4603      	mov	r3, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	f040 82c2 	bne.w	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 800530e:	4b4d      	ldr	r3, [pc, #308]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005312:	e2be      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d140      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 800531a:	2003      	movs	r0, #3
 800531c:	f7ff fbda 	bl	8004ad4 <LL_RCC_GetUSARTClockSource>
 8005320:	4603      	mov	r3, r0
 8005322:	2b03      	cmp	r3, #3
 8005324:	d013      	beq.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8005326:	2b03      	cmp	r3, #3
 8005328:	d81b      	bhi.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800532a:	2b01      	cmp	r3, #1
 800532c:	d002      	beq.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800532e:	2b02      	cmp	r3, #2
 8005330:	d004      	beq.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005332:	e016      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8005334:	f7ff f858 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005338:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800533a:	e2bd      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800533c:	f7ff f9dc 	bl	80046f8 <LL_RCC_HSI_IsReady>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	f040 82a7 	bne.w	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 8005348:	4b3a      	ldr	r3, [pc, #232]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800534a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800534c:	e2a3      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 800534e:	f7ff fa09 	bl	8004764 <LL_RCC_LSE_IsReady>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	f040 82a0 	bne.w	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 800535a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005360:	e29b      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8005362:	f7ff f841 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005366:	4604      	mov	r4, r0
 8005368:	f7ff fa8a 	bl	8004880 <LL_RCC_GetAHBPrescaler>
 800536c:	4603      	mov	r3, r0
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	4a34      	ldr	r2, [pc, #208]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	fbb4 f4f3 	udiv	r4, r4, r3
 800537e:	f7ff fa97 	bl	80048b0 <LL_RCC_GetAPB2Prescaler>
 8005382:	4603      	mov	r3, r0
 8005384:	0adb      	lsrs	r3, r3, #11
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	4a30      	ldr	r2, [pc, #192]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 800538c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	fa24 f303 	lsr.w	r3, r4, r3
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 800539a:	e28d      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d156      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 80053a2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80053a6:	f7ff fba5 	bl	8004af4 <LL_RCC_GetLPUARTClockSource>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b0:	d016      	beq.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80053b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053b6:	d81d      	bhi.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	d003      	beq.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80053be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c2:	d004      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80053c4:	e016      	b.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80053c6:	f7ff f80f 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80053ca:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80053cc:	e274      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80053ce:	f7ff f993 	bl	80046f8 <LL_RCC_HSI_IsReady>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	f040 8262 	bne.w	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 80053da:	4b16      	ldr	r3, [pc, #88]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80053de:	e25e      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80053e0:	f7ff f9c0 	bl	8004764 <LL_RCC_LSE_IsReady>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	f040 825b 	bne.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 80053ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80053f2:	e256      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80053f4:	f7fe fff8 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80053f8:	4604      	mov	r4, r0
 80053fa:	f7ff fa41 	bl	8004880 <LL_RCC_GetAHBPrescaler>
 80053fe:	4603      	mov	r3, r0
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	4a10      	ldr	r2, [pc, #64]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8005408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800540c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005410:	f7ff fa42 	bl	8004898 <LL_RCC_GetAPB1Prescaler>
 8005414:	4603      	mov	r3, r0
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4a0b      	ldr	r2, [pc, #44]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 800541e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	fa24 f303 	lsr.w	r3, r4, r3
 800542a:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 800542c:	e244      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800542e:	bf00      	nop
 8005430:	000f4240 	.word	0x000f4240
 8005434:	00f42400 	.word	0x00f42400
 8005438:	001fff68 	.word	0x001fff68
 800543c:	aaaaaaab 	.word	0xaaaaaaab
 8005440:	08009f88 	.word	0x08009f88
 8005444:	02dc6c00 	.word	0x02dc6c00
 8005448:	08009f28 	.word	0x08009f28
 800544c:	08009f68 	.word	0x08009f68
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005456:	d12a      	bne.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8005458:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 800545c:	f7ff fbbd 	bl	8004bda <LL_RCC_GetADCClockSource>
 8005460:	4603      	mov	r3, r0
 8005462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005466:	d014      	beq.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005468:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800546c:	f200 821b 	bhi.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8005470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005474:	d003      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8005476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800547a:	d00e      	beq.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 800547c:	e213      	b.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800547e:	f7ff fc62 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	f040 8210 	bne.w	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 800548a:	f000 fbfb 	bl	8005c84 <RCC_PLLSAI1_GetFreqDomain_R>
 800548e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005490:	e20b      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 8005492:	f7fe ffa9 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005496:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005498:	e20e      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 800549a:	f7ff fbf3 	bl	8004c84 <LL_RCC_PLL_IsReady>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	f040 8204 	bne.w	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 80054a6:	f000 fb41 	bl	8005b2c <RCC_PLL_GetFreqDomain_P>
 80054aa:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80054ac:	e1ff      	b.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d135      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 80054b4:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80054b8:	f7ff fb2c 	bl	8004b14 <LL_RCC_GetI2CClockSource>
 80054bc:	4603      	mov	r3, r0
 80054be:	4ab7      	ldr	r2, [pc, #732]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80054c4:	4ab6      	ldr	r2, [pc, #728]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 80054ca:	e00c      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80054cc:	f7fe ff8c 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80054d0:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80054d2:	e1f1      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80054d4:	f7ff f910 	bl	80046f8 <LL_RCC_HSI_IsReady>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	f040 81e9 	bne.w	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 80054e0:	4bb0      	ldr	r3, [pc, #704]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80054e2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80054e4:	e1e5      	b.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80054e6:	f7fe ff7f 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80054ea:	4604      	mov	r4, r0
 80054ec:	f7ff f9c8 	bl	8004880 <LL_RCC_GetAHBPrescaler>
 80054f0:	4603      	mov	r3, r0
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	4aab      	ldr	r2, [pc, #684]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80054fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fe:	fbb4 f4f3 	udiv	r4, r4, r3
 8005502:	f7ff f9c9 	bl	8004898 <LL_RCC_GetAPB1Prescaler>
 8005506:	4603      	mov	r3, r0
 8005508:	0a1b      	lsrs	r3, r3, #8
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	4aa7      	ldr	r2, [pc, #668]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8005510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa24 f303 	lsr.w	r3, r4, r3
 800551c:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 800551e:	e1cb      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b08      	cmp	r3, #8
 8005524:	d135      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 8005526:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800552a:	f7ff faf3 	bl	8004b14 <LL_RCC_GetI2CClockSource>
 800552e:	4603      	mov	r3, r0
 8005530:	4a9f      	ldr	r2, [pc, #636]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8005536:	4a9f      	ldr	r2, [pc, #636]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800553c:	e00c      	b.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800553e:	f7fe ff53 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005542:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005544:	e1b8      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8005546:	f7ff f8d7 	bl	80046f8 <LL_RCC_HSI_IsReady>
 800554a:	4603      	mov	r3, r0
 800554c:	2b01      	cmp	r3, #1
 800554e:	f040 81b2 	bne.w	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 8005552:	4b94      	ldr	r3, [pc, #592]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005556:	e1ae      	b.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8005558:	f7fe ff46 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 800555c:	4604      	mov	r4, r0
 800555e:	f7ff f98f 	bl	8004880 <LL_RCC_GetAHBPrescaler>
 8005562:	4603      	mov	r3, r0
 8005564:	091b      	lsrs	r3, r3, #4
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	4a8f      	ldr	r2, [pc, #572]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005570:	fbb4 f4f3 	udiv	r4, r4, r3
 8005574:	f7ff f990 	bl	8004898 <LL_RCC_GetAPB1Prescaler>
 8005578:	4603      	mov	r3, r0
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4a8a      	ldr	r2, [pc, #552]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8005582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	fa24 f303 	lsr.w	r3, r4, r3
 800558e:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8005590:	e192      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b10      	cmp	r3, #16
 8005596:	d151      	bne.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 8005598:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800559c:	f7ff face 	bl	8004b3c <LL_RCC_GetLPTIMClockSource>
 80055a0:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	4a84      	ldr	r2, [pc, #528]	; (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d110      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80055aa:	f7ff f8ed 	bl	8004788 <LL_RCC_LSI1_IsReady>
 80055ae:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80055b0:	f7ff f8fc 	bl	80047ac <LL_RCC_LSI2_IsReady>
 80055b4:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d003      	beq.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	f040 817a 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80055c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055c8:	647b      	str	r3, [r7, #68]	; 0x44
 80055ca:	e175      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	4a7b      	ldr	r2, [pc, #492]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d108      	bne.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80055d4:	f7ff f890 	bl	80046f8 <LL_RCC_HSI_IsReady>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b01      	cmp	r3, #1
 80055dc:	f040 816c 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 80055e0:	4b70      	ldr	r3, [pc, #448]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80055e2:	647b      	str	r3, [r7, #68]	; 0x44
 80055e4:	e168      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80055ec:	d109      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80055ee:	f7ff f8b9 	bl	8004764 <LL_RCC_LSE_IsReady>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	f040 815f 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005600:	e15a      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8005602:	f7fe fef1 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8005606:	4604      	mov	r4, r0
 8005608:	f7ff f93a 	bl	8004880 <LL_RCC_GetAHBPrescaler>
 800560c:	4603      	mov	r3, r0
 800560e:	091b      	lsrs	r3, r3, #4
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	4a64      	ldr	r2, [pc, #400]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8005616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561a:	fbb4 f4f3 	udiv	r4, r4, r3
 800561e:	f7ff f93b 	bl	8004898 <LL_RCC_GetAPB1Prescaler>
 8005622:	4603      	mov	r3, r0
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	4a60      	ldr	r2, [pc, #384]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800562c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	fa24 f303 	lsr.w	r3, r4, r3
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
 800563a:	e13d      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b20      	cmp	r3, #32
 8005640:	d151      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 8005642:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005646:	f7ff fa79 	bl	8004b3c <LL_RCC_GetLPTIMClockSource>
 800564a:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	4a5c      	ldr	r2, [pc, #368]	; (80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d110      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8005654:	f7ff f898 	bl	8004788 <LL_RCC_LSI1_IsReady>
 8005658:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800565a:	f7ff f8a7 	bl	80047ac <LL_RCC_LSI2_IsReady>
 800565e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	2b01      	cmp	r3, #1
 8005664:	d003      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	2b01      	cmp	r3, #1
 800566a:	f040 8125 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800566e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005672:	647b      	str	r3, [r7, #68]	; 0x44
 8005674:	e120      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	4a52      	ldr	r2, [pc, #328]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d108      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800567e:	f7ff f83b 	bl	80046f8 <LL_RCC_HSI_IsReady>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	f040 8117 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 800568a:	4b46      	ldr	r3, [pc, #280]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800568c:	647b      	str	r3, [r7, #68]	; 0x44
 800568e:	e113      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8005690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005692:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005696:	d109      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8005698:	f7ff f864 	bl	8004764 <LL_RCC_LSE_IsReady>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	f040 810a 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80056a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a8:	647b      	str	r3, [r7, #68]	; 0x44
 80056aa:	e105      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80056ac:	f7fe fe9c 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 80056b0:	4604      	mov	r4, r0
 80056b2:	f7ff f8e5 	bl	8004880 <LL_RCC_GetAHBPrescaler>
 80056b6:	4603      	mov	r3, r0
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	4a3a      	ldr	r2, [pc, #232]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80056c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80056c8:	f7ff f8e6 	bl	8004898 <LL_RCC_GetAPB1Prescaler>
 80056cc:	4603      	mov	r3, r0
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	4a35      	ldr	r2, [pc, #212]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80056d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	fa24 f303 	lsr.w	r3, r4, r3
 80056e2:	647b      	str	r3, [r7, #68]	; 0x44
 80056e4:	e0e8      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d119      	bne.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 80056ee:	f7ff f8ba 	bl	8004866 <LL_RCC_GetRFWKPClockSource>
 80056f2:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fa:	d109      	bne.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80056fc:	f7ff f832 	bl	8004764 <LL_RCC_LSE_IsReady>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	f040 80d8 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8005708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570c:	647b      	str	r3, [r7, #68]	; 0x44
 800570e:	e0d3      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005716:	f040 80cf 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 800571a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800571e:	647b      	str	r3, [r7, #68]	; 0x44
 8005720:	e0ca      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005728:	f040 80c6 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 800572c:	f7ff f8e0 	bl	80048f0 <LL_RCC_GetSMPSClockSource>
 8005730:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8005732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d115      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8005738:	f7fe ffde 	bl	80046f8 <LL_RCC_HSI_IsReady>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	f040 80ba 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8005744:	4920      	ldr	r1, [pc, #128]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8005746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005748:	4613      	mov	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8005756:	fbb2 f3f3 	udiv	r3, r2, r3
 800575a:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 800575c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
 8005762:	e0a9      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576a:	d131      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 800576c:	f7fe ffb2 	bl	80046d4 <LL_RCC_HSE_IsReady>
 8005770:	4603      	mov	r3, r0
 8005772:	2b01      	cmp	r3, #1
 8005774:	f040 80a0 	bne.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8005778:	4913      	ldr	r1, [pc, #76]	; (80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800577a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	3314      	adds	r3, #20
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a10      	ldr	r2, [pc, #64]	; (80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8005792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	647b      	str	r3, [r7, #68]	; 0x44
 8005798:	e08e      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800579a:	bf00      	nop
 800579c:	00030100 	.word	0x00030100
 80057a0:	00030200 	.word	0x00030200
 80057a4:	00f42400 	.word	0x00f42400
 80057a8:	08009f28 	.word	0x08009f28
 80057ac:	08009f68 	.word	0x08009f68
 80057b0:	00301000 	.word	0x00301000
 80057b4:	00302000 	.word	0x00302000
 80057b8:	000c0004 	.word	0x000c0004
 80057bc:	000c0008 	.word	0x000c0008
 80057c0:	00300010 	.word	0x00300010
 80057c4:	00300020 	.word	0x00300020
 80057c8:	08009fc8 	.word	0x08009fc8
 80057cc:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d6:	d16f      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 80057d8:	f7ff f81a 	bl	8004810 <LL_RCC_MSI_GetRange>
 80057dc:	4603      	mov	r3, r0
 80057de:	2bb0      	cmp	r3, #176	; 0xb0
 80057e0:	d037      	beq.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80057e2:	2bb0      	cmp	r3, #176	; 0xb0
 80057e4:	d844      	bhi.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80057e6:	2ba0      	cmp	r3, #160	; 0xa0
 80057e8:	d024      	beq.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 80057ea:	2ba0      	cmp	r3, #160	; 0xa0
 80057ec:	d840      	bhi.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d002      	beq.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80057f2:	2b90      	cmp	r3, #144	; 0x90
 80057f4:	d00f      	beq.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 80057f6:	e03b      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 80057f8:	4b32      	ldr	r3, [pc, #200]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80057fa:	6a19      	ldr	r1, [r3, #32]
 80057fc:	4832      	ldr	r0, [pc, #200]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80057fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4403      	add	r3, r0
 800580a:	3310      	adds	r3, #16
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005812:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005814:	e02d      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8005818:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800581a:	482b      	ldr	r0, [pc, #172]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800581c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800581e:	4613      	mov	r3, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	4413      	add	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4403      	add	r3, r0
 8005828:	330c      	adds	r3, #12
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005832:	e01e      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8005834:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8005836:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005838:	4823      	ldr	r0, [pc, #140]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800583a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800583c:	4613      	mov	r3, r2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4413      	add	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4403      	add	r3, r0
 8005846:	3308      	adds	r3, #8
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	fbb1 f3f3 	udiv	r3, r1, r3
 800584e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005850:	e00f      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8005852:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8005854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005856:	481c      	ldr	r0, [pc, #112]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585a:	4613      	mov	r3, r2
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4403      	add	r3, r0
 8005864:	3304      	adds	r3, #4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	fbb1 f3f3 	udiv	r3, r1, r3
 800586c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800586e:	e000      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8005870:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8005872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
 8005878:	e01e      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800587a:	bf00      	nop
 800587c:	e01c      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800587e:	bf00      	nop
 8005880:	e01a      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005882:	bf00      	nop
 8005884:	e018      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005886:	bf00      	nop
 8005888:	e016      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800588a:	bf00      	nop
 800588c:	e014      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800588e:	bf00      	nop
 8005890:	e012      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005892:	bf00      	nop
 8005894:	e010      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8005896:	bf00      	nop
 8005898:	e00e      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800589a:	bf00      	nop
 800589c:	e00c      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800589e:	bf00      	nop
 80058a0:	e00a      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80058a2:	bf00      	nop
 80058a4:	e008      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80058a6:	bf00      	nop
 80058a8:	e006      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80058aa:	bf00      	nop
 80058ac:	e004      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80058ae:	bf00      	nop
 80058b0:	e002      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80058b6:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 80058b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	374c      	adds	r7, #76	; 0x4c
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}
 80058c2:	bf00      	nop
 80058c4:	08009f88 	.word	0x08009f88
 80058c8:	08009fc8 	.word	0x08009fc8

080058cc <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 80058d2:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 80058d6:	f7ff f954 	bl	8004b82 <LL_RCC_GetRNGClockSource>
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 80058e2:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 80058e6:	f7ff f95c 	bl	8004ba2 <LL_RCC_GetCLK48ClockSource>
 80058ea:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f2:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 80058f4:	687b      	ldr	r3, [r7, #4]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005902:	f7fe ff76 	bl	80047f2 <LL_RCC_MSI_EnablePLLMode>
}
 8005906:	bf00      	nop
 8005908:	bd80      	pop	{r7, pc}

0800590a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005916:	f7ff fa07 	bl	8004d28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800591a:	f7fc fe07 	bl	800252c <HAL_GetTick>
 800591e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005920:	e009      	b.n	8005936 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005922:	f7fc fe03 	bl	800252c <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d902      	bls.n	8005936 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	73fb      	strb	r3, [r7, #15]
      break;
 8005934:	e004      	b.n	8005940 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005936:	f7ff fa06 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d137      	bne.n	80059b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595a:	4313      	orrs	r3, r2
 800595c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800595e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005970:	4313      	orrs	r3, r2
 8005972:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005974:	f7ff f9c9 	bl	8004d0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fc fdd8 	bl	800252c <HAL_GetTick>
 800597c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800597e:	e009      	b.n	8005994 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005980:	f7fc fdd4 	bl	800252c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d902      	bls.n	8005994 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
        break;
 8005992:	e004      	b.n	800599e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005994:	f7ff f9d7 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 8005998:	4603      	mov	r3, r0
 800599a:	2b01      	cmp	r3, #1
 800599c:	d1f0      	bne.n	8005980 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d108      	bne.n	80059b6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b2:	4313      	orrs	r3, r2
 80059b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80059cc:	f7ff f9ac 	bl	8004d28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059d0:	f7fc fdac 	bl	800252c <HAL_GetTick>
 80059d4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059d6:	e009      	b.n	80059ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059d8:	f7fc fda8 	bl	800252c <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d902      	bls.n	80059ec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	73fb      	strb	r3, [r7, #15]
      break;
 80059ea:	e004      	b.n	80059f6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059ec:	f7ff f9ab 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d137      	bne.n	8005a6c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a10:	4313      	orrs	r3, r2
 8005a12:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a2a:	f7ff f96e 	bl	8004d0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a2e:	f7fc fd7d 	bl	800252c <HAL_GetTick>
 8005a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a34:	e009      	b.n	8005a4a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a36:	f7fc fd79 	bl	800252c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d902      	bls.n	8005a4a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	73fb      	strb	r3, [r7, #15]
        break;
 8005a48:	e004      	b.n	8005a54 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a4a:	f7ff f97c 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d1f0      	bne.n	8005a36 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d108      	bne.n	8005a6c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a82:	f7ff f951 	bl	8004d28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a86:	f7fc fd51 	bl	800252c <HAL_GetTick>
 8005a8a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a8c:	e009      	b.n	8005aa2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a8e:	f7fc fd4d 	bl	800252c <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d902      	bls.n	8005aa2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa0:	e004      	b.n	8005aac <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005aa2:	f7ff f950 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f0      	bne.n	8005a8e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d137      	bne.n	8005b22 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005adc:	4313      	orrs	r3, r2
 8005ade:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ae0:	f7ff f913 	bl	8004d0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae4:	f7fc fd22 	bl	800252c <HAL_GetTick>
 8005ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005aea:	e009      	b.n	8005b00 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aec:	f7fc fd1e 	bl	800252c <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d902      	bls.n	8005b00 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	73fb      	strb	r3, [r7, #15]
        break;
 8005afe:	e004      	b.n	8005b0a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b00:	f7ff f921 	bl	8004d46 <LL_RCC_PLLSAI1_IsReady>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d1f0      	bne.n	8005aec <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d108      	bne.n	8005b22 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8005b2c:	b590      	push	{r4, r7, lr}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005b32:	f7ff f94b 	bl	8004dcc <LL_RCC_PLL_GetMainSource>
 8005b36:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d017      	beq.n	8005b6e <RCC_PLL_GetFreqDomain_P+0x42>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d81f      	bhi.n	8005b84 <RCC_PLL_GetFreqDomain_P+0x58>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d003      	beq.n	8005b52 <RCC_PLL_GetFreqDomain_P+0x26>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d00b      	beq.n	8005b68 <RCC_PLL_GetFreqDomain_P+0x3c>
 8005b50:	e018      	b.n	8005b84 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b52:	f7fe fe5d 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005b56:	4603      	mov	r3, r0
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	4a1b      	ldr	r2, [pc, #108]	; (8005bcc <RCC_PLL_GetFreqDomain_P+0xa0>)
 8005b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b64:	607b      	str	r3, [r7, #4]
      break;
 8005b66:	e018      	b.n	8005b9a <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8005b6a:	607b      	str	r3, [r7, #4]
      break;
 8005b6c:	e015      	b.n	8005b9a <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b6e:	f7fe fd9f 	bl	80046b0 <LL_RCC_HSE_IsEnabledDiv2>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d102      	bne.n	8005b7e <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005b78:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8005b7a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005b7c:	e00d      	b.n	8005b9a <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8005b80:	607b      	str	r3, [r7, #4]
      break;
 8005b82:	e00a      	b.n	8005b9a <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b84:	f7fe fe44 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <RCC_PLL_GetFreqDomain_P+0xa0>)
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	607b      	str	r3, [r7, #4]
      break;
 8005b98:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005b9a:	f7ff f885 	bl	8004ca8 <LL_RCC_PLL_GetN>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	fb03 f402 	mul.w	r4, r3, r2
 8005ba6:	f7ff f8a4 	bl	8004cf2 <LL_RCC_PLL_GetDivider>
 8005baa:	4603      	mov	r3, r0
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	3301      	adds	r3, #1
 8005bb0:	fbb4 f4f3 	udiv	r4, r4, r3
 8005bb4:	f7ff f885 	bl	8004cc2 <LL_RCC_PLL_GetP>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	0c5b      	lsrs	r3, r3, #17
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd90      	pop	{r4, r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	08009f88 	.word	0x08009f88
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	01e84800 	.word	0x01e84800

08005bd8 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005bde:	f7ff f8f5 	bl	8004dcc <LL_RCC_PLL_GetMainSource>
 8005be2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d017      	beq.n	8005c1a <RCC_PLL_GetFreqDomain_Q+0x42>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d81f      	bhi.n	8005c30 <RCC_PLL_GetFreqDomain_Q+0x58>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d003      	beq.n	8005bfe <RCC_PLL_GetFreqDomain_Q+0x26>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d00b      	beq.n	8005c14 <RCC_PLL_GetFreqDomain_Q+0x3c>
 8005bfc:	e018      	b.n	8005c30 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005bfe:	f7fe fe07 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005c02:	4603      	mov	r3, r0
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	4a1b      	ldr	r2, [pc, #108]	; (8005c78 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8005c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c10:	607b      	str	r3, [r7, #4]
      break;
 8005c12:	e018      	b.n	8005c46 <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005c14:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8005c16:	607b      	str	r3, [r7, #4]
      break;
 8005c18:	e015      	b.n	8005c46 <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c1a:	f7fe fd49 	bl	80046b0 <LL_RCC_HSE_IsEnabledDiv2>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d102      	bne.n	8005c2a <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005c24:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8005c26:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8005c28:	e00d      	b.n	8005c46 <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8005c2a:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8005c2c:	607b      	str	r3, [r7, #4]
      break;
 8005c2e:	e00a      	b.n	8005c46 <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c30:	f7fe fdee 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005c34:	4603      	mov	r3, r0
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	4a0e      	ldr	r2, [pc, #56]	; (8005c78 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8005c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c42:	607b      	str	r3, [r7, #4]
      break;
 8005c44:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c46:	f7ff f82f 	bl	8004ca8 <LL_RCC_PLL_GetN>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	fb03 f402 	mul.w	r4, r3, r2
 8005c52:	f7ff f84e 	bl	8004cf2 <LL_RCC_PLL_GetDivider>
 8005c56:	4603      	mov	r3, r0
 8005c58:	091b      	lsrs	r3, r3, #4
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c60:	f7ff f83b 	bl	8004cda <LL_RCC_PLL_GetQ>
 8005c64:	4603      	mov	r3, r0
 8005c66:	0e5b      	lsrs	r3, r3, #25
 8005c68:	3301      	adds	r3, #1
 8005c6a:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}
 8005c76:	bf00      	nop
 8005c78:	08009f88 	.word	0x08009f88
 8005c7c:	00f42400 	.word	0x00f42400
 8005c80:	01e84800 	.word	0x01e84800

08005c84 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005c8a:	f7ff f89f 	bl	8004dcc <LL_RCC_PLL_GetMainSource>
 8005c8e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d017      	beq.n	8005cc6 <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d81f      	bhi.n	8005cdc <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d003      	beq.n	8005caa <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d00b      	beq.n	8005cc0 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8005ca8:	e018      	b.n	8005cdc <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005caa:	f7fe fdb1 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	; (8005d24 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8005cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbc:	607b      	str	r3, [r7, #4]
      break;
 8005cbe:	e018      	b.n	8005cf2 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8005cc2:	607b      	str	r3, [r7, #4]
      break;
 8005cc4:	e015      	b.n	8005cf2 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005cc6:	f7fe fcf3 	bl	80046b0 <LL_RCC_HSE_IsEnabledDiv2>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d102      	bne.n	8005cd6 <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005cd0:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8005cd2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005cd4:	e00d      	b.n	8005cf2 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8005cd8:	607b      	str	r3, [r7, #4]
      break;
 8005cda:	e00a      	b.n	8005cf2 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005cdc:	f7fe fd98 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	4a0e      	ldr	r2, [pc, #56]	; (8005d24 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8005cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cee:	607b      	str	r3, [r7, #4]
      break;
 8005cf0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005cf2:	f7ff f83a 	bl	8004d6a <LL_RCC_PLLSAI1_GetN>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	fb03 f402 	mul.w	r4, r3, r2
 8005cfe:	f7fe fff8 	bl	8004cf2 <LL_RCC_PLL_GetDivider>
 8005d02:	4603      	mov	r3, r0
 8005d04:	091b      	lsrs	r3, r3, #4
 8005d06:	3301      	adds	r3, #1
 8005d08:	fbb4 f4f3 	udiv	r4, r4, r3
 8005d0c:	f7ff f852 	bl	8004db4 <LL_RCC_PLLSAI1_GetR>
 8005d10:	4603      	mov	r3, r0
 8005d12:	0f5b      	lsrs	r3, r3, #29
 8005d14:	3301      	adds	r3, #1
 8005d16:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd90      	pop	{r4, r7, pc}
 8005d22:	bf00      	nop
 8005d24:	08009f88 	.word	0x08009f88
 8005d28:	00f42400 	.word	0x00f42400
 8005d2c:	01e84800 	.word	0x01e84800

08005d30 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005d36:	f7ff f849 	bl	8004dcc <LL_RCC_PLL_GetMainSource>
 8005d3a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d017      	beq.n	8005d72 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d81f      	bhi.n	8005d88 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d003      	beq.n	8005d56 <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d00b      	beq.n	8005d6c <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8005d54:	e018      	b.n	8005d88 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d56:	f7fe fd5b 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	091b      	lsrs	r3, r3, #4
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8005d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d68:	607b      	str	r3, [r7, #4]
      break;
 8005d6a:	e018      	b.n	8005d9e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005d6c:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8005d6e:	607b      	str	r3, [r7, #4]
      break;
 8005d70:	e015      	b.n	8005d9e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d72:	f7fe fc9d 	bl	80046b0 <LL_RCC_HSE_IsEnabledDiv2>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005d7c:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8005d7e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005d80:	e00d      	b.n	8005d9e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8005d84:	607b      	str	r3, [r7, #4]
      break;
 8005d86:	e00a      	b.n	8005d9e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d88:	f7fe fd42 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	4a0e      	ldr	r2, [pc, #56]	; (8005dd0 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8005d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9a:	607b      	str	r3, [r7, #4]
      break;
 8005d9c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d9e:	f7fe ffe4 	bl	8004d6a <LL_RCC_PLLSAI1_GetN>
 8005da2:	4602      	mov	r2, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	fb03 f402 	mul.w	r4, r3, r2
 8005daa:	f7fe ffa2 	bl	8004cf2 <LL_RCC_PLL_GetDivider>
 8005dae:	4603      	mov	r3, r0
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	3301      	adds	r3, #1
 8005db4:	fbb4 f4f3 	udiv	r4, r4, r3
 8005db8:	f7fe ffe4 	bl	8004d84 <LL_RCC_PLLSAI1_GetP>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	0c5b      	lsrs	r3, r3, #17
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd90      	pop	{r4, r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	08009f88 	.word	0x08009f88
 8005dd4:	00f42400 	.word	0x00f42400
 8005dd8:	01e84800 	.word	0x01e84800

08005ddc <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005de2:	f7fe fff3 	bl	8004dcc <LL_RCC_PLL_GetMainSource>
 8005de6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d017      	beq.n	8005e1e <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d81f      	bhi.n	8005e34 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d003      	beq.n	8005e02 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d00b      	beq.n	8005e18 <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8005e00:	e018      	b.n	8005e34 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e02:	f7fe fd05 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005e06:	4603      	mov	r3, r0
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8005e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e14:	607b      	str	r3, [r7, #4]
      break;
 8005e16:	e018      	b.n	8005e4a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005e18:	4b19      	ldr	r3, [pc, #100]	; (8005e80 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8005e1a:	607b      	str	r3, [r7, #4]
      break;
 8005e1c:	e015      	b.n	8005e4a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e1e:	f7fe fc47 	bl	80046b0 <LL_RCC_HSE_IsEnabledDiv2>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d102      	bne.n	8005e2e <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005e28:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8005e2a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005e2c:	e00d      	b.n	8005e4a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8005e2e:	4b15      	ldr	r3, [pc, #84]	; (8005e84 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8005e30:	607b      	str	r3, [r7, #4]
      break;
 8005e32:	e00a      	b.n	8005e4a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e34:	f7fe fcec 	bl	8004810 <LL_RCC_MSI_GetRange>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	4a0e      	ldr	r2, [pc, #56]	; (8005e7c <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8005e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e46:	607b      	str	r3, [r7, #4]
      break;
 8005e48:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005e4a:	f7fe ff8e 	bl	8004d6a <LL_RCC_PLLSAI1_GetN>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	fb03 f402 	mul.w	r4, r3, r2
 8005e56:	f7fe ff4c 	bl	8004cf2 <LL_RCC_PLL_GetDivider>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	3301      	adds	r3, #1
 8005e60:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e64:	f7fe ff9a 	bl	8004d9c <LL_RCC_PLLSAI1_GetQ>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	0e5b      	lsrs	r3, r3, #25
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd90      	pop	{r4, r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	08009f88 	.word	0x08009f88
 8005e80:	00f42400 	.word	0x00f42400
 8005e84:	01e84800 	.word	0x01e84800

08005e88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e090      	b.n	8005fbc <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7fb fe82 	bl	8001bb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	22ca      	movs	r2, #202	; 0xca
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2253      	movs	r2, #83	; 0x53
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fd9d 	bl	8006a0c <RTC_EnterInitMode>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d009      	beq.n	8005eec <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	22ff      	movs	r2, #255	; 0xff
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e067      	b.n	8005fbc <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6899      	ldr	r1, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68d2      	ldr	r2, [r2, #12]
 8005f26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6919      	ldr	r1, [r3, #16]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	041a      	lsls	r2, r3, #16
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4a:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0203 	bic.w	r2, r2, #3
 8005f5a:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69da      	ldr	r2, [r3, #28]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d113      	bne.n	8005faa <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fd1c 	bl	80069c0 <HAL_RTC_WaitForSynchro>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	22ff      	movs	r2, #255	; 0xff
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2204      	movs	r2, #4
 8005f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e008      	b.n	8005fbc <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	22ff      	movs	r2, #255	; 0xff
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005fba:	2300      	movs	r3, #0
  }
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_RTC_SetTime+0x1a>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e0b2      	b.n	8006144 <HAL_RTC_SetTime+0x180>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d126      	bne.n	8006042 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d102      	bne.n	8006008 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fd27 	bl	8006a60 <RTC_ByteToBcd2>
 8006012:	4603      	mov	r3, r0
 8006014:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fd20 	bl	8006a60 <RTC_ByteToBcd2>
 8006020:	4603      	mov	r3, r0
 8006022:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006024:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	789b      	ldrb	r3, [r3, #2]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fd18 	bl	8006a60 <RTC_ByteToBcd2>
 8006030:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006032:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	78db      	ldrb	r3, [r3, #3]
 800603a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e018      	b.n	8006074 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006062:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006068:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	22ca      	movs	r2, #202	; 0xca
 800607a:	625a      	str	r2, [r3, #36]	; 0x24
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2253      	movs	r2, #83	; 0x53
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fcc1 	bl	8006a0c <RTC_EnterInitMode>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	22ff      	movs	r2, #255	; 0xff
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2204      	movs	r2, #4
 800609c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e04b      	b.n	8006144 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80060b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060ba:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060ca:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6899      	ldr	r1, [r3, #8]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	431a      	orrs	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d113      	bne.n	800612a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fc5c 	bl	80069c0 <HAL_RTC_WaitForSynchro>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	22ff      	movs	r2, #255	; 0xff
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2204      	movs	r2, #4
 800611a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e00c      	b.n	8006144 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	22ff      	movs	r2, #255	; 0xff
 8006130:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006142:	2300      	movs	r3, #0
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	bd90      	pop	{r4, r7, pc}

0800614c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800617a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800617e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11a      	bne.n	80061fa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fc69 	bl	8006aa0 <RTC_Bcd2ToByte>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fc60 	bl	8006aa0 <RTC_Bcd2ToByte>
 80061e0:	4603      	mov	r3, r0
 80061e2:	461a      	mov	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	789b      	ldrb	r3, [r3, #2]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fc57 	bl	8006aa0 <RTC_Bcd2ToByte>
 80061f2:	4603      	mov	r3, r0
 80061f4:	461a      	mov	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_RTC_SetDate+0x1a>
 800621a:	2302      	movs	r3, #2
 800621c:	e09c      	b.n	8006358 <HAL_RTC_SetDate+0x154>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10e      	bne.n	8006252 <HAL_RTC_SetDate+0x4e>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d008      	beq.n	8006252 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	f023 0310 	bic.w	r3, r3, #16
 8006248:	b2db      	uxtb	r3, r3
 800624a:	330a      	adds	r3, #10
 800624c:	b2da      	uxtb	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11c      	bne.n	8006292 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	78db      	ldrb	r3, [r3, #3]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fbff 	bl	8006a60 <RTC_ByteToBcd2>
 8006262:	4603      	mov	r3, r0
 8006264:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fbf8 	bl	8006a60 <RTC_ByteToBcd2>
 8006270:	4603      	mov	r3, r0
 8006272:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006274:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	789b      	ldrb	r3, [r3, #2]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fbf0 	bl	8006a60 <RTC_ByteToBcd2>
 8006280:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006282:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e00e      	b.n	80062b0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	78db      	ldrb	r3, [r3, #3]
 8006296:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800629e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80062a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	22ca      	movs	r2, #202	; 0xca
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2253      	movs	r2, #83	; 0x53
 80062be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fba3 	bl	8006a0c <RTC_EnterInitMode>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	22ff      	movs	r2, #255	; 0xff
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2204      	movs	r2, #4
 80062d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e037      	b.n	8006358 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062f6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006306:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d113      	bne.n	800633e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fb52 	bl	80069c0 <HAL_RTC_WaitForSynchro>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00d      	beq.n	800633e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	22ff      	movs	r2, #255	; 0xff
 8006328:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2204      	movs	r2, #4
 800632e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e00c      	b.n	8006358 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	22ff      	movs	r2, #255	; 0xff
 8006344:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006356:	2300      	movs	r3, #0
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}

08006360 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006376:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800637a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	0b5b      	lsrs	r3, r3, #13
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d11a      	bne.n	80063f0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	78db      	ldrb	r3, [r3, #3]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fb6e 	bl	8006aa0 <RTC_Bcd2ToByte>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fb65 	bl	8006aa0 <RTC_Bcd2ToByte>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	789b      	ldrb	r3, [r3, #2]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fb5c 	bl	8006aa0 <RTC_Bcd2ToByte>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b089      	sub	sp, #36	; 0x24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_RTC_SetAlarm_IT+0x1a>
 8006412:	2302      	movs	r3, #2
 8006414:	e129      	b.n	800666a <HAL_RTC_SetAlarm_IT+0x26e>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d137      	bne.n	800649c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fb0b 	bl	8006a60 <RTC_ByteToBcd2>
 800644a:	4603      	mov	r3, r0
 800644c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fb04 	bl	8006a60 <RTC_ByteToBcd2>
 8006458:	4603      	mov	r3, r0
 800645a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800645c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	789b      	ldrb	r3, [r3, #2]
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fafc 	bl	8006a60 <RTC_ByteToBcd2>
 8006468:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800646a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	78db      	ldrb	r3, [r3, #3]
 8006472:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006474:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 faee 	bl	8006a60 <RTC_ByteToBcd2>
 8006484:	4603      	mov	r3, r0
 8006486:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006488:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006490:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006496:	4313      	orrs	r3, r2
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	e023      	b.n	80064e4 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064bc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80064ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	22ca      	movs	r2, #202	; 0xca
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2253      	movs	r2, #83	; 0x53
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006508:	d14a      	bne.n	80065a0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006518:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	b2da      	uxtb	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800652a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800652c:	f7fb fffe 	bl	800252c <HAL_GetTick>
 8006530:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006532:	e015      	b.n	8006560 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006534:	f7fb fffa 	bl	800252c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006542:	d90d      	bls.n	8006560 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	22ff      	movs	r2, #255	; 0xff
 800654a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2203      	movs	r2, #3
 8006550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e084      	b.n	800666a <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0e2      	beq.n	8006534 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800658c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800659c:	609a      	str	r2, [r3, #8]
 800659e:	e049      	b.n	8006634 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065ae:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f462 7220 	orn	r2, r2, #640	; 0x280
 80065c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065c2:	f7fb ffb3 	bl	800252c <HAL_GetTick>
 80065c6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80065c8:	e015      	b.n	80065f6 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065ca:	f7fb ffaf 	bl	800252c <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065d8:	d90d      	bls.n	80065f6 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	22ff      	movs	r2, #255	; 0xff
 80065e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2203      	movs	r2, #3
 80065e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e039      	b.n	800666a <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0e2      	beq.n	80065ca <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006622:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006632:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006634:	4b0f      	ldr	r3, [pc, #60]	; (8006674 <HAL_RTC_SetAlarm_IT+0x278>)
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663a:	4a0e      	ldr	r2, [pc, #56]	; (8006674 <HAL_RTC_SetAlarm_IT+0x278>)
 800663c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006640:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006644:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <HAL_RTC_SetAlarm_IT+0x278>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a0a      	ldr	r2, [pc, #40]	; (8006674 <HAL_RTC_SetAlarm_IT+0x278>)
 800664a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800664e:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	22ff      	movs	r2, #255	; 0xff
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3724      	adds	r7, #36	; 0x24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd90      	pop	{r4, r7, pc}
 8006672:	bf00      	nop
 8006674:	58000800 	.word	0x58000800

08006678 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_RTC_DeactivateAlarm+0x18>
 800668c:	2302      	movs	r3, #2
 800668e:	e083      	b.n	8006798 <HAL_RTC_DeactivateAlarm+0x120>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	22ca      	movs	r2, #202	; 0xca
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2253      	movs	r2, #83	; 0x53
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b6:	d131      	bne.n	800671c <HAL_RTC_DeactivateAlarm+0xa4>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066c6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066d6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80066d8:	f7fb ff28 	bl	800252c <HAL_GetTick>
 80066dc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80066de:	e015      	b.n	800670c <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80066e0:	f7fb ff24 	bl	800252c <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ee:	d90d      	bls.n	800670c <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2203      	movs	r2, #3
 80066fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e045      	b.n	8006798 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0e2      	beq.n	80066e0 <HAL_RTC_DeactivateAlarm+0x68>
 800671a:	e030      	b.n	800677e <HAL_RTC_DeactivateAlarm+0x106>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800672a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800673a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800673c:	f7fb fef6 	bl	800252c <HAL_GetTick>
 8006740:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006742:	e015      	b.n	8006770 <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006744:	f7fb fef2 	bl	800252c <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006752:	d90d      	bls.n	8006770 <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	22ff      	movs	r2, #255	; 0xff
 800675a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2203      	movs	r2, #3
 8006760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e013      	b.n	8006798 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0e2      	beq.n	8006744 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	22ff      	movs	r2, #255	; 0xff
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b4:	d143      	bne.n	800683e <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80067d0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	0c1b      	lsrs	r3, r3, #16
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	b2da      	uxtb	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006820:	b2da      	uxtb	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	615a      	str	r2, [r3, #20]
 800683c:	e042      	b.n	80068c4 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006844:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006854:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006858:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> 16U);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006864:	b2da      	uxtb	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> 8U);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	0a1b      	lsrs	r3, r3, #8
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)(tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU));
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> 16U);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	0c1b      	lsrs	r3, r3, #16
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	b2da      	uxtb	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	0e1b      	lsrs	r3, r3, #24
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d125      	bne.n	8006916 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f8e6 	bl	8006aa0 <RTC_Bcd2ToByte>
 80068d4:	4603      	mov	r3, r0
 80068d6:	461a      	mov	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 f8dd 	bl	8006aa0 <RTC_Bcd2ToByte>
 80068e6:	4603      	mov	r3, r0
 80068e8:	461a      	mov	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	789b      	ldrb	r3, [r3, #2]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f8d4 	bl	8006aa0 <RTC_Bcd2ToByte>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f8ca 	bl	8006aa0 <RTC_Bcd2ToByte>
 800690c:	4603      	mov	r3, r0
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d012      	beq.n	800695c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f831 	bl	80069ac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800695a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d012      	beq.n	8006990 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f8ad 	bl	8006ad8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800698e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006990:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006992:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006996:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	58000800 	.word	0x58000800

080069ac <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069d6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80069d8:	f7fb fda8 	bl	800252c <HAL_GetTick>
 80069dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069de:	e009      	b.n	80069f4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069e0:	f7fb fda4 	bl	800252c <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ee:	d901      	bls.n	80069f4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e007      	b.n	8006a04 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0ee      	beq.n	80069e0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d119      	bne.n	8006a56 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a2c:	f7fb fd7e 	bl	800252c <HAL_GetTick>
 8006a30:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a32:	e009      	b.n	8006a48 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a34:	f7fb fd7a 	bl	800252c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a42:	d901      	bls.n	8006a48 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e007      	b.n	8006a58 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0ee      	beq.n	8006a34 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006a72:	e005      	b.n	8006a80 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	3b0a      	subs	r3, #10
 8006a7e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d8f6      	bhi.n	8006a74 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	b2db      	uxtb	r3, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	091b      	lsrs	r3, r3, #4
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	4413      	add	r3, r2
 8006aca:	b2db      	uxtb	r3, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d904      	bls.n	8006b0a <HAL_SAI_InitProtocol+0x1e>
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	3b03      	subs	r3, #3
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d812      	bhi.n	8006b2e <HAL_SAI_InitProtocol+0x42>
 8006b08:	e008      	b.n	8006b1c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fa83 	bl	800701c <SAI_InitI2S>
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1a:	e00b      	b.n	8006b34 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 fb2c 	bl	8007180 <SAI_InitPCM>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2c:	e002      	b.n	8006b34 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
      break;
 8006b32:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d104      	bne.n	8006b44 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f808 	bl	8006b50 <HAL_SAI_Init>
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e17c      	b.n	8006e5c <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d10e      	bne.n	8006b8a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a5c      	ldr	r2, [pc, #368]	; (8006ce4 <HAL_SAI_Init+0x194>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d107      	bne.n	8006b86 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d103      	bne.n	8006b86 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e168      	b.n	8006e5c <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fb f890 	bl	8001cc4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fba5 	bl	80072f4 <SAI_Disable>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e153      	b.n	8006e5c <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_SAI_Init+0x7a>
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d003      	beq.n	8006bd0 <HAL_SAI_Init+0x80>
 8006bc8:	e006      	b.n	8006bd8 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
      break;
 8006bce:	e006      	b.n	8006bde <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bd4:	61bb      	str	r3, [r7, #24]
      break;
 8006bd6:	e002      	b.n	8006bde <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61bb      	str	r3, [r7, #24]
      break;
 8006bdc:	bf00      	nop
  }

  SAI1->GCR = 0;
 8006bde:	4b42      	ldr	r3, [pc, #264]	; (8006ce8 <HAL_SAI_Init+0x198>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d062      	beq.n	8006cb2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006bec:	2040      	movs	r0, #64	; 0x40
 8006bee:	f7fe fa6f 	bl	80050d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bf2:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bfc:	d120      	bne.n	8006c40 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d102      	bne.n	8006c0c <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006c06:	2340      	movs	r3, #64	; 0x40
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	e00a      	b.n	8006c22 <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d103      	bne.n	8006c1c <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	e002      	b.n	8006c22 <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c20:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	fb02 f303 	mul.w	r3, r2, r3
 8006c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	e017      	b.n	8006c70 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c48:	d101      	bne.n	8006c4e <HAL_SAI_Init+0xfe>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e000      	b.n	8006c50 <HAL_SAI_Init+0x100>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	fb02 f303 	mul.w	r3, r2, r3
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c6e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4a1e      	ldr	r2, [pc, #120]	; (8006cec <HAL_SAI_Init+0x19c>)
 8006c74:	fba2 2303 	umull	r2, r3, r2, r3
 8006c78:	08da      	lsrs	r2, r3, #3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006c7e:	6979      	ldr	r1, [r7, #20]
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <HAL_SAI_Init+0x19c>)
 8006c82:	fba3 2301 	umull	r2, r3, r3, r1
 8006c86:	08da      	lsrs	r2, r3, #3
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	1aca      	subs	r2, r1, r3
 8006c92:	2a08      	cmp	r2, #8
 8006c94:	d904      	bls.n	8006ca0 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d104      	bne.n	8006cb2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	085a      	lsrs	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_SAI_Init+0x172>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d109      	bne.n	8006cd6 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_SAI_Init+0x17e>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e001      	b.n	8006cd2 <HAL_SAI_Init+0x182>
 8006cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e00e      	b.n	8006cf4 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d108      	bne.n	8006cf0 <HAL_SAI_Init+0x1a0>
 8006cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce2:	e006      	b.n	8006cf2 <HAL_SAI_Init+0x1a2>
 8006ce4:	40015404 	.word	0x40015404
 8006ce8:	40015400 	.word	0x40015400
 8006cec:	cccccccd 	.word	0xcccccccd
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6819      	ldr	r1, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b59      	ldr	r3, [pc, #356]	; (8006e64 <HAL_SAI_Init+0x314>)
 8006d00:	400b      	ands	r3, r1
 8006d02:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d18:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006d2c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d38:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	051b      	lsls	r3, r3, #20
 8006d40:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d46:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d64:	f023 030f 	bic.w	r3, r3, #15
 8006d68:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6859      	ldr	r1, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6899      	ldr	r1, [r3, #8]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b35      	ldr	r3, [pc, #212]	; (8006e68 <HAL_SAI_Init+0x318>)
 8006d94:	400b      	ands	r3, r1
 8006d96:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6899      	ldr	r1, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006da8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006dae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006db4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006dbe:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68d9      	ldr	r1, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006dd6:	400b      	ands	r3, r1
 8006dd8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68d9      	ldr	r1, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dee:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006df0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	3b01      	subs	r3, #1
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <HAL_SAI_Init+0x31c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d119      	bne.n	8006e42 <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006e0e:	4b18      	ldr	r3, [pc, #96]	; (8006e70 <HAL_SAI_Init+0x320>)
 8006e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e12:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <HAL_SAI_Init+0x320>)
 8006e14:	f023 0301 	bic.w	r3, r3, #1
 8006e18:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d10e      	bne.n	8006e42 <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e30:	490f      	ldr	r1, [pc, #60]	; (8006e70 <HAL_SAI_Init+0x320>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006e36:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <HAL_SAI_Init+0x320>)
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3a:	4a0d      	ldr	r2, [pc, #52]	; (8006e70 <HAL_SAI_Init+0x320>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	f005c010 	.word	0xf005c010
 8006e68:	fff88000 	.word	0xfff88000
 8006e6c:	40015404 	.word	0x40015404
 8006e70:	40015400 	.word	0x40015400

08006e74 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8006e82:	f7fb fb53 	bl	800252c <HAL_GetTick>
 8006e86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_SAI_Transmit_DMA+0x20>
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e098      	b.n	8006fca <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	f040 8091 	bne.w	8006fc8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_SAI_Transmit_DMA+0x40>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e08a      	b.n	8006fca <HAL_SAI_Transmit_DMA+0x156>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	88fa      	ldrh	r2, [r7, #6]
 8006ece:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2212      	movs	r2, #18
 8006ede:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee8:	4a3a      	ldr	r2, [pc, #232]	; (8006fd4 <HAL_SAI_Transmit_DMA+0x160>)
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef2:	4a39      	ldr	r2, [pc, #228]	; (8006fd8 <HAL_SAI_Transmit_DMA+0x164>)
 8006ef4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efc:	4a37      	ldr	r2, [pc, #220]	; (8006fdc <HAL_SAI_Transmit_DMA+0x168>)
 8006efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f06:	2200      	movs	r2, #0
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f14:	4619      	mov	r1, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	331c      	adds	r3, #28
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006f24:	f7fb fcf6 	bl	8002914 <HAL_DMA_Start_IT>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e047      	b.n	8006fca <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f9a1 	bl	8007284 <SAI_InterruptFlag>
 8006f42:	4601      	mov	r1, r0
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006f60:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006f62:	e015      	b.n	8006f90 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006f64:	f7fb fae2 	bl	800252c <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f72:	d90d      	bls.n	8006f90 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e01c      	b.n	8006fca <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0e2      	beq.n	8006f64 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fba:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	e000      	b.n	8006fca <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8006fc8:	2302      	movs	r3, #2
  }
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	080073c7 	.word	0x080073c7
 8006fd8:	08007369 	.word	0x08007369
 8006fdc:	080073e3 	.word	0x080073e3

08006fe0 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <SAI_InitI2S+0x2e>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d103      	bne.n	8007052 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	651a      	str	r2, [r3, #80]	; 0x50
 8007050:	e002      	b.n	8007058 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800705e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007066:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e077      	b.n	8007172 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d107      	bne.n	8007098 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007094:	665a      	str	r2, [r3, #100]	; 0x64
 8007096:	e006      	b.n	80070a6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800709e:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	665a      	str	r2, [r3, #100]	; 0x64
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d84f      	bhi.n	800714c <SAI_InitI2S+0x130>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <SAI_InitI2S+0x98>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	080070e7 	.word	0x080070e7
 80070bc:	08007109 	.word	0x08007109
 80070c0:	0800712b 	.word	0x0800712b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2280      	movs	r2, #128	; 0x80
 80070c8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	011a      	lsls	r2, r3, #4
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2240      	movs	r2, #64	; 0x40
 80070e2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80070e4:	e035      	b.n	8007152 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2280      	movs	r2, #128	; 0x80
 80070ea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	019a      	lsls	r2, r3, #6
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	085b      	lsrs	r3, r3, #1
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2280      	movs	r2, #128	; 0x80
 8007104:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007106:	e024      	b.n	8007152 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	22c0      	movs	r2, #192	; 0xc0
 800710c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	085b      	lsrs	r3, r3, #1
 8007112:	019a      	lsls	r2, r3, #6
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2280      	movs	r2, #128	; 0x80
 8007126:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007128:	e013      	b.n	8007152 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	22e0      	movs	r2, #224	; 0xe0
 800712e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	019a      	lsls	r2, r3, #6
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2280      	movs	r2, #128	; 0x80
 8007148:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800714a:	e002      	b.n	8007152 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
      break;
 8007150:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d10b      	bne.n	8007170 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d102      	bne.n	8007164 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2210      	movs	r2, #16
 8007162:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d102      	bne.n	8007170 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2208      	movs	r2, #8
 800716e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
}
 8007172:	4618      	mov	r0, r3
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop

08007180 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <SAI_InitPCM+0x2e>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d103      	bne.n	80071b6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	651a      	str	r2, [r3, #80]	; 0x50
 80071b4:	e002      	b.n	80071bc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071c8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80071d0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071e4:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d103      	bne.n	80071f4 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2201      	movs	r2, #1
 80071f0:	659a      	str	r2, [r3, #88]	; 0x58
 80071f2:	e002      	b.n	80071fa <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	220d      	movs	r2, #13
 80071f8:	659a      	str	r2, [r3, #88]	; 0x58
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d837      	bhi.n	8007270 <SAI_InitPCM+0xf0>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <SAI_InitPCM+0x88>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	08007219 	.word	0x08007219
 800720c:	0800722f 	.word	0x0800722f
 8007210:	08007245 	.word	0x08007245
 8007214:	0800725b 	.word	0x0800725b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2280      	movs	r2, #128	; 0x80
 800721c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	011a      	lsls	r2, r3, #4
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2240      	movs	r2, #64	; 0x40
 800722a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800722c:	e023      	b.n	8007276 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2280      	movs	r2, #128	; 0x80
 8007232:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2280      	movs	r2, #128	; 0x80
 8007240:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007242:	e018      	b.n	8007276 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	22c0      	movs	r2, #192	; 0xc0
 8007248:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2280      	movs	r2, #128	; 0x80
 8007256:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007258:	e00d      	b.n	8007276 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22e0      	movs	r2, #224	; 0xe0
 800725e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2280      	movs	r2, #128	; 0x80
 800726c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800726e:	e002      	b.n	8007276 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]
      break;
 8007274:	bf00      	nop
  }

  return status;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
}
 8007278:	4618      	mov	r0, r3
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007290:	2301      	movs	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d103      	bne.n	80072a2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f043 0308 	orr.w	r3, r3, #8
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	d10b      	bne.n	80072c2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d003      	beq.n	80072ba <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d103      	bne.n	80072c2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f043 0310 	orr.w	r3, r3, #16
 80072c0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d003      	beq.n	80072d2 <SAI_InterruptFlag+0x4e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d104      	bne.n	80072dc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	e003      	b.n	80072e4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f043 0304 	orr.w	r3, r3, #4
 80072e2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
	...

080072f4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80072fc:	4b18      	ldr	r3, [pc, #96]	; (8007360 <SAI_Disable+0x6c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a18      	ldr	r2, [pc, #96]	; (8007364 <SAI_Disable+0x70>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	0b1b      	lsrs	r3, r3, #12
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800731e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800732c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	72fb      	strb	r3, [r7, #11]
      break;
 800733a:	e009      	b.n	8007350 <SAI_Disable+0x5c>
    }
    count--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3b01      	subs	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e7      	bne.n	8007320 <SAI_Disable+0x2c>

  return status;
 8007350:	7afb      	ldrb	r3, [r7, #11]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000004 	.word	0x20000004
 8007364:	95cbec1b 	.word	0x95cbec1b

08007368 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	2b20      	cmp	r3, #32
 800737c:	d01c      	beq.n	80073b8 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007394:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007396:	2100      	movs	r1, #0
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff ff73 	bl	8007284 <SAI_InterruptFlag>
 800739e:	4603      	mov	r3, r0
 80073a0:	43d9      	mvns	r1, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	400a      	ands	r2, r1
 80073ae:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7ff fe11 	bl	8006fe0 <HAL_SAI_TxCpltCallback>
#endif
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7ff fe0d 	bl	8006ff4 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800740e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7ff ff6f 	bl	80072f4 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fdee 	bl	8007008 <HAL_SAI_ErrorCallback>
#endif
}
 800742c:	bf00      	nop
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e097      	b.n	8007578 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fa fe45 	bl	80020ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007478:	f023 0307 	bic.w	r3, r3, #7
 800747c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f000 f907 	bl	800769c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	4313      	orrs	r3, r2
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80074d4:	f023 030c 	bic.w	r3, r3, #12
 80074d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	4313      	orrs	r3, r2
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	011a      	lsls	r2, r3, #4
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	031b      	lsls	r3, r3, #12
 8007504:	4313      	orrs	r3, r2
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007512:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800751a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	4313      	orrs	r3, r2
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007590:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007598:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d110      	bne.n	80075d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d102      	bne.n	80075bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80075b6:	7b7b      	ldrb	r3, [r7, #13]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d001      	beq.n	80075c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e069      	b.n	8007694 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d0:	e031      	b.n	8007636 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d110      	bne.n	80075fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d102      	bne.n	80075e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075de:	7b3b      	ldrb	r3, [r7, #12]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d001      	beq.n	80075e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e055      	b.n	8007694 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075f8:	e01d      	b.n	8007636 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d108      	bne.n	8007612 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d105      	bne.n	8007612 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007606:	7b7b      	ldrb	r3, [r7, #13]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d102      	bne.n	8007612 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800760c:	7b3b      	ldrb	r3, [r7, #12]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d001      	beq.n	8007616 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e03e      	b.n	8007694 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2202      	movs	r2, #2
 8007622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2202      	movs	r2, #2
 8007632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_TIM_Encoder_Start+0xc4>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b04      	cmp	r3, #4
 8007640:	d008      	beq.n	8007654 <HAL_TIM_Encoder_Start+0xd4>
 8007642:	e00f      	b.n	8007664 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2201      	movs	r2, #1
 800764a:	2100      	movs	r1, #0
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f889 	bl	8007764 <TIM_CCxChannelCmd>
      break;
 8007652:	e016      	b.n	8007682 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2201      	movs	r2, #1
 800765a:	2104      	movs	r1, #4
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f881 	bl	8007764 <TIM_CCxChannelCmd>
      break;
 8007662:	e00e      	b.n	8007682 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	2100      	movs	r1, #0
 800766c:	4618      	mov	r0, r3
 800766e:	f000 f879 	bl	8007764 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2201      	movs	r2, #1
 8007678:	2104      	movs	r1, #4
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f872 	bl	8007764 <TIM_CCxChannelCmd>
      break;
 8007680:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a2a      	ldr	r2, [pc, #168]	; (8007758 <TIM_Base_SetConfig+0xbc>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_Base_SetConfig+0x20>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ba:	d108      	bne.n	80076ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a21      	ldr	r2, [pc, #132]	; (8007758 <TIM_Base_SetConfig+0xbc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00b      	beq.n	80076ee <TIM_Base_SetConfig+0x52>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076dc:	d007      	beq.n	80076ee <TIM_Base_SetConfig+0x52>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1e      	ldr	r2, [pc, #120]	; (800775c <TIM_Base_SetConfig+0xc0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_Base_SetConfig+0x52>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <TIM_Base_SetConfig+0xc4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d108      	bne.n	8007700 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <TIM_Base_SetConfig+0xbc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d007      	beq.n	800773c <TIM_Base_SetConfig+0xa0>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a0b      	ldr	r2, [pc, #44]	; (800775c <TIM_Base_SetConfig+0xc0>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_Base_SetConfig+0xa0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a0a      	ldr	r2, [pc, #40]	; (8007760 <TIM_Base_SetConfig+0xc4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d103      	bne.n	8007744 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	691a      	ldr	r2, [r3, #16]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	615a      	str	r2, [r3, #20]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40012c00 	.word	0x40012c00
 800775c:	40014400 	.word	0x40014400
 8007760:	40014800 	.word	0x40014800

08007764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	2201      	movs	r2, #1
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a1a      	ldr	r2, [r3, #32]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	43db      	mvns	r3, r3
 8007786:	401a      	ands	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a1a      	ldr	r2, [r3, #32]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	6879      	ldr	r1, [r7, #4]
 8007798:	fa01 f303 	lsl.w	r3, r1, r3
 800779c:	431a      	orrs	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e04a      	b.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a1f      	ldr	r2, [pc, #124]	; (800786c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d108      	bne.n	8007804 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a12      	ldr	r2, [pc, #72]	; (800786c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d004      	beq.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007830:	d10c      	bne.n	800784c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	4313      	orrs	r3, r2
 8007842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40012c00 	.word	0x40012c00

08007870 <LL_RCC_GetUSARTClockSource>:
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800787c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4013      	ands	r3, r2
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <LL_RCC_GetLPUARTClockSource>:
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800789c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4013      	ands	r3, r2
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e042      	b.n	8007948 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fa fcb3 	bl	8002240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2224      	movs	r2, #36	; 0x24
 80078de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0201 	bic.w	r2, r2, #1
 80078f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f952 	bl	8007b9c <UART_SetConfig>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e022      	b.n	8007948 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fb4c 	bl	8007fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800791e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800792e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fbd3 	bl	80080ec <UART_CheckIdleState>
 8007946:	4603      	mov	r3, r0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	; 0x28
 8007954:	af02      	add	r7, sp, #8
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	4613      	mov	r3, r2
 800795e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007966:	2b20      	cmp	r3, #32
 8007968:	f040 8083 	bne.w	8007a72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <HAL_UART_Transmit+0x28>
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e07b      	b.n	8007a74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_UART_Transmit+0x3a>
 8007986:	2302      	movs	r3, #2
 8007988:	e074      	b.n	8007a74 <HAL_UART_Transmit+0x124>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2221      	movs	r2, #33	; 0x21
 800799e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079a2:	f7fa fdc3 	bl	800252c <HAL_GetTick>
 80079a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	88fa      	ldrh	r2, [r7, #6]
 80079b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c0:	d108      	bne.n	80079d4 <HAL_UART_Transmit+0x84>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d104      	bne.n	80079d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	e003      	b.n	80079dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80079e4:	e02c      	b.n	8007a40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2200      	movs	r2, #0
 80079ee:	2180      	movs	r1, #128	; 0x80
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 fbc6 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e039      	b.n	8007a74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10b      	bne.n	8007a1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	3302      	adds	r3, #2
 8007a1a:	61bb      	str	r3, [r7, #24]
 8007a1c:	e007      	b.n	8007a2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	781a      	ldrb	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1cc      	bne.n	80079e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2200      	movs	r2, #0
 8007a54:	2140      	movs	r1, #64	; 0x40
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fb93 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e006      	b.n	8007a74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e000      	b.n	8007a74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007a72:	2302      	movs	r3, #2
  }
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3720      	adds	r7, #32
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b094      	sub	sp, #80	; 0x50
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8007aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e6      	bne.n	8007a84 <HAL_UART_AbortTransmit+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e5      	bne.n	8007ab6 <HAL_UART_AbortTransmit+0x3a>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af4:	2b80      	cmp	r3, #128	; 0x80
 8007af6:	d137      	bne.n	8007b68 <HAL_UART_AbortTransmit+0xec>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3308      	adds	r3, #8
 8007b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b18:	61ba      	str	r2, [r7, #24]
 8007b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6979      	ldr	r1, [r7, #20]
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	613b      	str	r3, [r7, #16]
   return(result);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e5      	bne.n	8007af8 <HAL_UART_AbortTransmit+0x7c>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d019      	beq.n	8007b68 <HAL_UART_AbortTransmit+0xec>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b38:	2200      	movs	r2, #0
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fa ff62 	bl	8002a0a <HAL_DMA_Abort>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00d      	beq.n	8007b68 <HAL_UART_AbortTransmit+0xec>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fb f868 	bl	8002c26 <HAL_DMA_GetError>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d105      	bne.n	8007b68 <HAL_UART_AbortTransmit+0xec>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e015      	b.n	8007b94 <HAL_UART_AbortTransmit+0x118>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b78:	d107      	bne.n	8007b8a <HAL_UART_AbortTransmit+0x10e>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699a      	ldr	r2, [r3, #24]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f042 0210 	orr.w	r2, r2, #16
 8007b88:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3750      	adds	r7, #80	; 0x50
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b9c:	b5b0      	push	{r4, r5, r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4ba3      	ldr	r3, [pc, #652]	; (8007e54 <UART_SetConfig+0x2b8>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	69f9      	ldr	r1, [r7, #28]
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a98      	ldr	r2, [pc, #608]	; (8007e58 <UART_SetConfig+0x2bc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d004      	beq.n	8007c04 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007c0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6812      	ldr	r2, [r2, #0]
 8007c16:	69f9      	ldr	r1, [r7, #28]
 8007c18:	430b      	orrs	r3, r1
 8007c1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	f023 010f 	bic.w	r1, r3, #15
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a89      	ldr	r2, [pc, #548]	; (8007e5c <UART_SetConfig+0x2c0>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d120      	bne.n	8007c7e <UART_SetConfig+0xe2>
 8007c3c:	2003      	movs	r0, #3
 8007c3e:	f7ff fe17 	bl	8007870 <LL_RCC_GetUSARTClockSource>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d817      	bhi.n	8007c78 <UART_SetConfig+0xdc>
 8007c48:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0xb4>)
 8007c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c61 	.word	0x08007c61
 8007c54:	08007c6d 	.word	0x08007c6d
 8007c58:	08007c67 	.word	0x08007c67
 8007c5c:	08007c73 	.word	0x08007c73
 8007c60:	2301      	movs	r3, #1
 8007c62:	76fb      	strb	r3, [r7, #27]
 8007c64:	e038      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007c66:	2302      	movs	r3, #2
 8007c68:	76fb      	strb	r3, [r7, #27]
 8007c6a:	e035      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007c6c:	2304      	movs	r3, #4
 8007c6e:	76fb      	strb	r3, [r7, #27]
 8007c70:	e032      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007c72:	2308      	movs	r3, #8
 8007c74:	76fb      	strb	r3, [r7, #27]
 8007c76:	e02f      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007c78:	2310      	movs	r3, #16
 8007c7a:	76fb      	strb	r3, [r7, #27]
 8007c7c:	e02c      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a75      	ldr	r2, [pc, #468]	; (8007e58 <UART_SetConfig+0x2bc>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d125      	bne.n	8007cd4 <UART_SetConfig+0x138>
 8007c88:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007c8c:	f7ff fe00 	bl	8007890 <LL_RCC_GetLPUARTClockSource>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c96:	d017      	beq.n	8007cc8 <UART_SetConfig+0x12c>
 8007c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c9c:	d817      	bhi.n	8007cce <UART_SetConfig+0x132>
 8007c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca2:	d00b      	beq.n	8007cbc <UART_SetConfig+0x120>
 8007ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca8:	d811      	bhi.n	8007cce <UART_SetConfig+0x132>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <UART_SetConfig+0x11a>
 8007cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb2:	d006      	beq.n	8007cc2 <UART_SetConfig+0x126>
 8007cb4:	e00b      	b.n	8007cce <UART_SetConfig+0x132>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	76fb      	strb	r3, [r7, #27]
 8007cba:	e00d      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	76fb      	strb	r3, [r7, #27]
 8007cc0:	e00a      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007cc2:	2304      	movs	r3, #4
 8007cc4:	76fb      	strb	r3, [r7, #27]
 8007cc6:	e007      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007cc8:	2308      	movs	r3, #8
 8007cca:	76fb      	strb	r3, [r7, #27]
 8007ccc:	e004      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007cce:	2310      	movs	r3, #16
 8007cd0:	76fb      	strb	r3, [r7, #27]
 8007cd2:	e001      	b.n	8007cd8 <UART_SetConfig+0x13c>
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5e      	ldr	r2, [pc, #376]	; (8007e58 <UART_SetConfig+0x2bc>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	f040 808b 	bne.w	8007dfa <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ce4:	7efb      	ldrb	r3, [r7, #27]
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d823      	bhi.n	8007d32 <UART_SetConfig+0x196>
 8007cea:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0x154>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d15 	.word	0x08007d15
 8007cf4:	08007d33 	.word	0x08007d33
 8007cf8:	08007d1d 	.word	0x08007d1d
 8007cfc:	08007d33 	.word	0x08007d33
 8007d00:	08007d23 	.word	0x08007d23
 8007d04:	08007d33 	.word	0x08007d33
 8007d08:	08007d33 	.word	0x08007d33
 8007d0c:	08007d33 	.word	0x08007d33
 8007d10:	08007d2b 	.word	0x08007d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d14:	f7fc fbe8 	bl	80044e8 <HAL_RCC_GetPCLK1Freq>
 8007d18:	6178      	str	r0, [r7, #20]
        break;
 8007d1a:	e00f      	b.n	8007d3c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d1c:	4b50      	ldr	r3, [pc, #320]	; (8007e60 <UART_SetConfig+0x2c4>)
 8007d1e:	617b      	str	r3, [r7, #20]
        break;
 8007d20:	e00c      	b.n	8007d3c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d22:	f7fc fb61 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8007d26:	6178      	str	r0, [r7, #20]
        break;
 8007d28:	e008      	b.n	8007d3c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d2e:	617b      	str	r3, [r7, #20]
        break;
 8007d30:	e004      	b.n	8007d3c <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	76bb      	strb	r3, [r7, #26]
        break;
 8007d3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 811a 	beq.w	8007f78 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	4a46      	ldr	r2, [pc, #280]	; (8007e64 <UART_SetConfig+0x2c8>)
 8007d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d56:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	4413      	add	r3, r2
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d305      	bcc.n	8007d74 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d902      	bls.n	8007d7a <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	76bb      	strb	r3, [r7, #26]
 8007d78:	e0fe      	b.n	8007f78 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f04f 0100 	mov.w	r1, #0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	4a37      	ldr	r2, [pc, #220]	; (8007e64 <UART_SetConfig+0x2c8>)
 8007d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	f7f8 fec3 	bl	8000b1c <__aeabi_uldivmod>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	f04f 0300 	mov.w	r3, #0
 8007da6:	020b      	lsls	r3, r1, #8
 8007da8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dac:	0202      	lsls	r2, r0, #8
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	6849      	ldr	r1, [r1, #4]
 8007db2:	0849      	lsrs	r1, r1, #1
 8007db4:	4608      	mov	r0, r1
 8007db6:	f04f 0100 	mov.w	r1, #0
 8007dba:	1814      	adds	r4, r2, r0
 8007dbc:	eb43 0501 	adc.w	r5, r3, r1
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f7f8 fea5 	bl	8000b1c <__aeabi_uldivmod>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de0:	d308      	bcc.n	8007df4 <UART_SetConfig+0x258>
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de8:	d204      	bcs.n	8007df4 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	60da      	str	r2, [r3, #12]
 8007df2:	e0c1      	b.n	8007f78 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	76bb      	strb	r3, [r7, #26]
 8007df8:	e0be      	b.n	8007f78 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e02:	d16a      	bne.n	8007eda <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007e04:	7efb      	ldrb	r3, [r7, #27]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2b07      	cmp	r3, #7
 8007e0a:	d82d      	bhi.n	8007e68 <UART_SetConfig+0x2cc>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0x278>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e35 	.word	0x08007e35
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e69 	.word	0x08007e69
 8007e20:	08007e43 	.word	0x08007e43
 8007e24:	08007e69 	.word	0x08007e69
 8007e28:	08007e69 	.word	0x08007e69
 8007e2c:	08007e69 	.word	0x08007e69
 8007e30:	08007e4b 	.word	0x08007e4b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e34:	f7fc fb6e 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8007e38:	6178      	str	r0, [r7, #20]
        break;
 8007e3a:	e01a      	b.n	8007e72 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e3c:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <UART_SetConfig+0x2c4>)
 8007e3e:	617b      	str	r3, [r7, #20]
        break;
 8007e40:	e017      	b.n	8007e72 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e42:	f7fc fad1 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8007e46:	6178      	str	r0, [r7, #20]
        break;
 8007e48:	e013      	b.n	8007e72 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4e:	617b      	str	r3, [r7, #20]
        break;
 8007e50:	e00f      	b.n	8007e72 <UART_SetConfig+0x2d6>
 8007e52:	bf00      	nop
 8007e54:	cfff69f3 	.word	0xcfff69f3
 8007e58:	40008000 	.word	0x40008000
 8007e5c:	40013800 	.word	0x40013800
 8007e60:	00f42400 	.word	0x00f42400
 8007e64:	0800a028 	.word	0x0800a028
      default:
        pclk = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	76bb      	strb	r3, [r7, #26]
        break;
 8007e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d07f      	beq.n	8007f78 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	4a48      	ldr	r2, [pc, #288]	; (8007fa0 <UART_SetConfig+0x404>)
 8007e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e82:	461a      	mov	r2, r3
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e8a:	005a      	lsls	r2, r3, #1
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	085b      	lsrs	r3, r3, #1
 8007e92:	441a      	add	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2b0f      	cmp	r3, #15
 8007ea4:	d916      	bls.n	8007ed4 <UART_SetConfig+0x338>
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eac:	d212      	bcs.n	8007ed4 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f023 030f 	bic.w	r3, r3, #15
 8007eb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	085b      	lsrs	r3, r3, #1
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	89fa      	ldrh	r2, [r7, #14]
 8007ed0:	60da      	str	r2, [r3, #12]
 8007ed2:	e051      	b.n	8007f78 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	76bb      	strb	r3, [r7, #26]
 8007ed8:	e04e      	b.n	8007f78 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eda:	7efb      	ldrb	r3, [r7, #27]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	2b07      	cmp	r3, #7
 8007ee0:	d821      	bhi.n	8007f26 <UART_SetConfig+0x38a>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <UART_SetConfig+0x34c>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f09 	.word	0x08007f09
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007f27 	.word	0x08007f27
 8007ef4:	08007f17 	.word	0x08007f17
 8007ef8:	08007f27 	.word	0x08007f27
 8007efc:	08007f27 	.word	0x08007f27
 8007f00:	08007f27 	.word	0x08007f27
 8007f04:	08007f1f 	.word	0x08007f1f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f08:	f7fc fb04 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8007f0c:	6178      	str	r0, [r7, #20]
        break;
 8007f0e:	e00f      	b.n	8007f30 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f10:	4b24      	ldr	r3, [pc, #144]	; (8007fa4 <UART_SetConfig+0x408>)
 8007f12:	617b      	str	r3, [r7, #20]
        break;
 8007f14:	e00c      	b.n	8007f30 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f16:	f7fc fa67 	bl	80043e8 <HAL_RCC_GetSysClockFreq>
 8007f1a:	6178      	str	r0, [r7, #20]
        break;
 8007f1c:	e008      	b.n	8007f30 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f22:	617b      	str	r3, [r7, #20]
        break;
 8007f24:	e004      	b.n	8007f30 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	76bb      	strb	r3, [r7, #26]
        break;
 8007f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d020      	beq.n	8007f78 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	4a19      	ldr	r2, [pc, #100]	; (8007fa0 <UART_SetConfig+0x404>)
 8007f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f40:	461a      	mov	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	441a      	add	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d908      	bls.n	8007f74 <UART_SetConfig+0x3d8>
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d204      	bcs.n	8007f74 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	e001      	b.n	8007f78 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f94:	7ebb      	ldrb	r3, [r7, #26]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3720      	adds	r7, #32
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	0800a028 	.word	0x0800a028
 8007fa4:	00f42400 	.word	0x00f42400

08007fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01a      	beq.n	80080be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a6:	d10a      	bne.n	80080be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080fc:	f7fa fa16 	bl	800252c <HAL_GetTick>
 8008100:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b08      	cmp	r3, #8
 800810e:	d10e      	bne.n	800812e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f82f 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e025      	b.n	800817a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b04      	cmp	r3, #4
 800813a:	d10e      	bne.n	800815a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800813c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f819 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e00f      	b.n	800817a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b09c      	sub	sp, #112	; 0x70
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	603b      	str	r3, [r7, #0]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008192:	e0a9      	b.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	f000 80a5 	beq.w	80082e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819e:	f7fa f9c5 	bl	800252c <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d302      	bcc.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80081ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d140      	bne.n	8008236 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081c8:	667b      	str	r3, [r7, #100]	; 0x64
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e6      	bne.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	663b      	str	r3, [r7, #96]	; 0x60
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3308      	adds	r3, #8
 8008204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008206:	64ba      	str	r2, [r7, #72]	; 0x48
 8008208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800820c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e5      	bne.n	80081e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e069      	b.n	800830a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d051      	beq.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800824e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008252:	d149      	bne.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800825c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
 800827e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e6      	bne.n	800825e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	613b      	str	r3, [r7, #16]
   return(result);
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3308      	adds	r3, #8
 80082ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082b0:	623a      	str	r2, [r7, #32]
 80082b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	69f9      	ldr	r1, [r7, #28]
 80082b6:	6a3a      	ldr	r2, [r7, #32]
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e5      	bne.n	8008290 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e010      	b.n	800830a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69da      	ldr	r2, [r3, #28]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4013      	ands	r3, r2
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	bf0c      	ite	eq
 80082f8:	2301      	moveq	r3, #1
 80082fa:	2300      	movne	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	429a      	cmp	r2, r3
 8008304:	f43f af46 	beq.w	8008194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3770      	adds	r7, #112	; 0x70
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_UARTEx_DisableFifoMode+0x16>
 8008324:	2302      	movs	r3, #2
 8008326:	e027      	b.n	8008378 <HAL_UARTEx_DisableFifoMode+0x66>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2224      	movs	r2, #36	; 0x24
 8008334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0201 	bic.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008356:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2220      	movs	r2, #32
 800836a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008398:	2302      	movs	r3, #2
 800839a:	e02d      	b.n	80083f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2224      	movs	r2, #36	; 0x24
 80083a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0201 	bic.w	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f84f 	bl	800847c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008414:	2302      	movs	r3, #2
 8008416:	e02d      	b.n	8008474 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2224      	movs	r2, #36	; 0x24
 8008424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0201 	bic.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f811 	bl	800847c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800849c:	e031      	b.n	8008502 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800849e:	2308      	movs	r3, #8
 80084a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084a2:	2308      	movs	r3, #8
 80084a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	0e5b      	lsrs	r3, r3, #25
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	0f5b      	lsrs	r3, r3, #29
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	7b3a      	ldrb	r2, [r7, #12]
 80084ca:	4911      	ldr	r1, [pc, #68]	; (8008510 <UARTEx_SetNbDataToProcess+0x94>)
 80084cc:	5c8a      	ldrb	r2, [r1, r2]
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084d2:	7b3a      	ldrb	r2, [r7, #12]
 80084d4:	490f      	ldr	r1, [pc, #60]	; (8008514 <UARTEx_SetNbDataToProcess+0x98>)
 80084d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084dc:	b29a      	uxth	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	7b7a      	ldrb	r2, [r7, #13]
 80084e8:	4909      	ldr	r1, [pc, #36]	; (8008510 <UARTEx_SetNbDataToProcess+0x94>)
 80084ea:	5c8a      	ldrb	r2, [r1, r2]
 80084ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084f0:	7b7a      	ldrb	r2, [r7, #13]
 80084f2:	4908      	ldr	r1, [pc, #32]	; (8008514 <UARTEx_SetNbDataToProcess+0x98>)
 80084f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008502:	bf00      	nop
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	0800a040 	.word	0x0800a040
 8008514:	0800a048 	.word	0x0800a048

08008518 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008520:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008524:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	b29b      	uxth	r3, r3
 8008532:	43db      	mvns	r3, r3
 8008534:	b29b      	uxth	r3, r3
 8008536:	4013      	ands	r3, r2
 8008538:	b29a      	uxth	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800854e:	b084      	sub	sp, #16
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	f107 0014 	add.w	r0, r7, #20
 800855c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	b004      	add	sp, #16
 800858e:	4770      	bx	lr

08008590 <__errno>:
 8008590:	4b01      	ldr	r3, [pc, #4]	; (8008598 <__errno+0x8>)
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000010 	.word	0x20000010

0800859c <__libc_init_array>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	4d0d      	ldr	r5, [pc, #52]	; (80085d4 <__libc_init_array+0x38>)
 80085a0:	4c0d      	ldr	r4, [pc, #52]	; (80085d8 <__libc_init_array+0x3c>)
 80085a2:	1b64      	subs	r4, r4, r5
 80085a4:	10a4      	asrs	r4, r4, #2
 80085a6:	2600      	movs	r6, #0
 80085a8:	42a6      	cmp	r6, r4
 80085aa:	d109      	bne.n	80085c0 <__libc_init_array+0x24>
 80085ac:	4d0b      	ldr	r5, [pc, #44]	; (80085dc <__libc_init_array+0x40>)
 80085ae:	4c0c      	ldr	r4, [pc, #48]	; (80085e0 <__libc_init_array+0x44>)
 80085b0:	f001 fc84 	bl	8009ebc <_init>
 80085b4:	1b64      	subs	r4, r4, r5
 80085b6:	10a4      	asrs	r4, r4, #2
 80085b8:	2600      	movs	r6, #0
 80085ba:	42a6      	cmp	r6, r4
 80085bc:	d105      	bne.n	80085ca <__libc_init_array+0x2e>
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c4:	4798      	blx	r3
 80085c6:	3601      	adds	r6, #1
 80085c8:	e7ee      	b.n	80085a8 <__libc_init_array+0xc>
 80085ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ce:	4798      	blx	r3
 80085d0:	3601      	adds	r6, #1
 80085d2:	e7f2      	b.n	80085ba <__libc_init_array+0x1e>
 80085d4:	0800a268 	.word	0x0800a268
 80085d8:	0800a268 	.word	0x0800a268
 80085dc:	0800a268 	.word	0x0800a268
 80085e0:	0800a26c 	.word	0x0800a26c

080085e4 <memset>:
 80085e4:	4402      	add	r2, r0
 80085e6:	4603      	mov	r3, r0
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d100      	bne.n	80085ee <memset+0xa>
 80085ec:	4770      	bx	lr
 80085ee:	f803 1b01 	strb.w	r1, [r3], #1
 80085f2:	e7f9      	b.n	80085e8 <memset+0x4>

080085f4 <siprintf>:
 80085f4:	b40e      	push	{r1, r2, r3}
 80085f6:	b500      	push	{lr}
 80085f8:	b09c      	sub	sp, #112	; 0x70
 80085fa:	ab1d      	add	r3, sp, #116	; 0x74
 80085fc:	9002      	str	r0, [sp, #8]
 80085fe:	9006      	str	r0, [sp, #24]
 8008600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008604:	4809      	ldr	r0, [pc, #36]	; (800862c <siprintf+0x38>)
 8008606:	9107      	str	r1, [sp, #28]
 8008608:	9104      	str	r1, [sp, #16]
 800860a:	4909      	ldr	r1, [pc, #36]	; (8008630 <siprintf+0x3c>)
 800860c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008610:	9105      	str	r1, [sp, #20]
 8008612:	6800      	ldr	r0, [r0, #0]
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	a902      	add	r1, sp, #8
 8008618:	f000 f868 	bl	80086ec <_svfiprintf_r>
 800861c:	9b02      	ldr	r3, [sp, #8]
 800861e:	2200      	movs	r2, #0
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	b01c      	add	sp, #112	; 0x70
 8008624:	f85d eb04 	ldr.w	lr, [sp], #4
 8008628:	b003      	add	sp, #12
 800862a:	4770      	bx	lr
 800862c:	20000010 	.word	0x20000010
 8008630:	ffff0208 	.word	0xffff0208

08008634 <__ssputs_r>:
 8008634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	688e      	ldr	r6, [r1, #8]
 800863a:	429e      	cmp	r6, r3
 800863c:	4682      	mov	sl, r0
 800863e:	460c      	mov	r4, r1
 8008640:	4690      	mov	r8, r2
 8008642:	461f      	mov	r7, r3
 8008644:	d838      	bhi.n	80086b8 <__ssputs_r+0x84>
 8008646:	898a      	ldrh	r2, [r1, #12]
 8008648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800864c:	d032      	beq.n	80086b4 <__ssputs_r+0x80>
 800864e:	6825      	ldr	r5, [r4, #0]
 8008650:	6909      	ldr	r1, [r1, #16]
 8008652:	eba5 0901 	sub.w	r9, r5, r1
 8008656:	6965      	ldr	r5, [r4, #20]
 8008658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800865c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008660:	3301      	adds	r3, #1
 8008662:	444b      	add	r3, r9
 8008664:	106d      	asrs	r5, r5, #1
 8008666:	429d      	cmp	r5, r3
 8008668:	bf38      	it	cc
 800866a:	461d      	movcc	r5, r3
 800866c:	0553      	lsls	r3, r2, #21
 800866e:	d531      	bpl.n	80086d4 <__ssputs_r+0xa0>
 8008670:	4629      	mov	r1, r5
 8008672:	f000 fb47 	bl	8008d04 <_malloc_r>
 8008676:	4606      	mov	r6, r0
 8008678:	b950      	cbnz	r0, 8008690 <__ssputs_r+0x5c>
 800867a:	230c      	movs	r3, #12
 800867c:	f8ca 3000 	str.w	r3, [sl]
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008690:	6921      	ldr	r1, [r4, #16]
 8008692:	464a      	mov	r2, r9
 8008694:	f000 fabe 	bl	8008c14 <memcpy>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a2:	81a3      	strh	r3, [r4, #12]
 80086a4:	6126      	str	r6, [r4, #16]
 80086a6:	6165      	str	r5, [r4, #20]
 80086a8:	444e      	add	r6, r9
 80086aa:	eba5 0509 	sub.w	r5, r5, r9
 80086ae:	6026      	str	r6, [r4, #0]
 80086b0:	60a5      	str	r5, [r4, #8]
 80086b2:	463e      	mov	r6, r7
 80086b4:	42be      	cmp	r6, r7
 80086b6:	d900      	bls.n	80086ba <__ssputs_r+0x86>
 80086b8:	463e      	mov	r6, r7
 80086ba:	4632      	mov	r2, r6
 80086bc:	6820      	ldr	r0, [r4, #0]
 80086be:	4641      	mov	r1, r8
 80086c0:	f000 fab6 	bl	8008c30 <memmove>
 80086c4:	68a3      	ldr	r3, [r4, #8]
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	1b9b      	subs	r3, r3, r6
 80086ca:	4432      	add	r2, r6
 80086cc:	60a3      	str	r3, [r4, #8]
 80086ce:	6022      	str	r2, [r4, #0]
 80086d0:	2000      	movs	r0, #0
 80086d2:	e7db      	b.n	800868c <__ssputs_r+0x58>
 80086d4:	462a      	mov	r2, r5
 80086d6:	f000 fb6f 	bl	8008db8 <_realloc_r>
 80086da:	4606      	mov	r6, r0
 80086dc:	2800      	cmp	r0, #0
 80086de:	d1e1      	bne.n	80086a4 <__ssputs_r+0x70>
 80086e0:	6921      	ldr	r1, [r4, #16]
 80086e2:	4650      	mov	r0, sl
 80086e4:	f000 fabe 	bl	8008c64 <_free_r>
 80086e8:	e7c7      	b.n	800867a <__ssputs_r+0x46>
	...

080086ec <_svfiprintf_r>:
 80086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	4698      	mov	r8, r3
 80086f2:	898b      	ldrh	r3, [r1, #12]
 80086f4:	061b      	lsls	r3, r3, #24
 80086f6:	b09d      	sub	sp, #116	; 0x74
 80086f8:	4607      	mov	r7, r0
 80086fa:	460d      	mov	r5, r1
 80086fc:	4614      	mov	r4, r2
 80086fe:	d50e      	bpl.n	800871e <_svfiprintf_r+0x32>
 8008700:	690b      	ldr	r3, [r1, #16]
 8008702:	b963      	cbnz	r3, 800871e <_svfiprintf_r+0x32>
 8008704:	2140      	movs	r1, #64	; 0x40
 8008706:	f000 fafd 	bl	8008d04 <_malloc_r>
 800870a:	6028      	str	r0, [r5, #0]
 800870c:	6128      	str	r0, [r5, #16]
 800870e:	b920      	cbnz	r0, 800871a <_svfiprintf_r+0x2e>
 8008710:	230c      	movs	r3, #12
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	e0d1      	b.n	80088be <_svfiprintf_r+0x1d2>
 800871a:	2340      	movs	r3, #64	; 0x40
 800871c:	616b      	str	r3, [r5, #20]
 800871e:	2300      	movs	r3, #0
 8008720:	9309      	str	r3, [sp, #36]	; 0x24
 8008722:	2320      	movs	r3, #32
 8008724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008728:	f8cd 800c 	str.w	r8, [sp, #12]
 800872c:	2330      	movs	r3, #48	; 0x30
 800872e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088d8 <_svfiprintf_r+0x1ec>
 8008732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008736:	f04f 0901 	mov.w	r9, #1
 800873a:	4623      	mov	r3, r4
 800873c:	469a      	mov	sl, r3
 800873e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008742:	b10a      	cbz	r2, 8008748 <_svfiprintf_r+0x5c>
 8008744:	2a25      	cmp	r2, #37	; 0x25
 8008746:	d1f9      	bne.n	800873c <_svfiprintf_r+0x50>
 8008748:	ebba 0b04 	subs.w	fp, sl, r4
 800874c:	d00b      	beq.n	8008766 <_svfiprintf_r+0x7a>
 800874e:	465b      	mov	r3, fp
 8008750:	4622      	mov	r2, r4
 8008752:	4629      	mov	r1, r5
 8008754:	4638      	mov	r0, r7
 8008756:	f7ff ff6d 	bl	8008634 <__ssputs_r>
 800875a:	3001      	adds	r0, #1
 800875c:	f000 80aa 	beq.w	80088b4 <_svfiprintf_r+0x1c8>
 8008760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008762:	445a      	add	r2, fp
 8008764:	9209      	str	r2, [sp, #36]	; 0x24
 8008766:	f89a 3000 	ldrb.w	r3, [sl]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 80a2 	beq.w	80088b4 <_svfiprintf_r+0x1c8>
 8008770:	2300      	movs	r3, #0
 8008772:	f04f 32ff 	mov.w	r2, #4294967295
 8008776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800877a:	f10a 0a01 	add.w	sl, sl, #1
 800877e:	9304      	str	r3, [sp, #16]
 8008780:	9307      	str	r3, [sp, #28]
 8008782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008786:	931a      	str	r3, [sp, #104]	; 0x68
 8008788:	4654      	mov	r4, sl
 800878a:	2205      	movs	r2, #5
 800878c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008790:	4851      	ldr	r0, [pc, #324]	; (80088d8 <_svfiprintf_r+0x1ec>)
 8008792:	f7f7 fcf5 	bl	8000180 <memchr>
 8008796:	9a04      	ldr	r2, [sp, #16]
 8008798:	b9d8      	cbnz	r0, 80087d2 <_svfiprintf_r+0xe6>
 800879a:	06d0      	lsls	r0, r2, #27
 800879c:	bf44      	itt	mi
 800879e:	2320      	movmi	r3, #32
 80087a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087a4:	0711      	lsls	r1, r2, #28
 80087a6:	bf44      	itt	mi
 80087a8:	232b      	movmi	r3, #43	; 0x2b
 80087aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ae:	f89a 3000 	ldrb.w	r3, [sl]
 80087b2:	2b2a      	cmp	r3, #42	; 0x2a
 80087b4:	d015      	beq.n	80087e2 <_svfiprintf_r+0xf6>
 80087b6:	9a07      	ldr	r2, [sp, #28]
 80087b8:	4654      	mov	r4, sl
 80087ba:	2000      	movs	r0, #0
 80087bc:	f04f 0c0a 	mov.w	ip, #10
 80087c0:	4621      	mov	r1, r4
 80087c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c6:	3b30      	subs	r3, #48	; 0x30
 80087c8:	2b09      	cmp	r3, #9
 80087ca:	d94e      	bls.n	800886a <_svfiprintf_r+0x17e>
 80087cc:	b1b0      	cbz	r0, 80087fc <_svfiprintf_r+0x110>
 80087ce:	9207      	str	r2, [sp, #28]
 80087d0:	e014      	b.n	80087fc <_svfiprintf_r+0x110>
 80087d2:	eba0 0308 	sub.w	r3, r0, r8
 80087d6:	fa09 f303 	lsl.w	r3, r9, r3
 80087da:	4313      	orrs	r3, r2
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	46a2      	mov	sl, r4
 80087e0:	e7d2      	b.n	8008788 <_svfiprintf_r+0x9c>
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	1d19      	adds	r1, r3, #4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	9103      	str	r1, [sp, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bfbb      	ittet	lt
 80087ee:	425b      	neglt	r3, r3
 80087f0:	f042 0202 	orrlt.w	r2, r2, #2
 80087f4:	9307      	strge	r3, [sp, #28]
 80087f6:	9307      	strlt	r3, [sp, #28]
 80087f8:	bfb8      	it	lt
 80087fa:	9204      	strlt	r2, [sp, #16]
 80087fc:	7823      	ldrb	r3, [r4, #0]
 80087fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008800:	d10c      	bne.n	800881c <_svfiprintf_r+0x130>
 8008802:	7863      	ldrb	r3, [r4, #1]
 8008804:	2b2a      	cmp	r3, #42	; 0x2a
 8008806:	d135      	bne.n	8008874 <_svfiprintf_r+0x188>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	1d1a      	adds	r2, r3, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	9203      	str	r2, [sp, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfb8      	it	lt
 8008814:	f04f 33ff 	movlt.w	r3, #4294967295
 8008818:	3402      	adds	r4, #2
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088e8 <_svfiprintf_r+0x1fc>
 8008820:	7821      	ldrb	r1, [r4, #0]
 8008822:	2203      	movs	r2, #3
 8008824:	4650      	mov	r0, sl
 8008826:	f7f7 fcab 	bl	8000180 <memchr>
 800882a:	b140      	cbz	r0, 800883e <_svfiprintf_r+0x152>
 800882c:	2340      	movs	r3, #64	; 0x40
 800882e:	eba0 000a 	sub.w	r0, r0, sl
 8008832:	fa03 f000 	lsl.w	r0, r3, r0
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	4303      	orrs	r3, r0
 800883a:	3401      	adds	r4, #1
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008842:	4826      	ldr	r0, [pc, #152]	; (80088dc <_svfiprintf_r+0x1f0>)
 8008844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008848:	2206      	movs	r2, #6
 800884a:	f7f7 fc99 	bl	8000180 <memchr>
 800884e:	2800      	cmp	r0, #0
 8008850:	d038      	beq.n	80088c4 <_svfiprintf_r+0x1d8>
 8008852:	4b23      	ldr	r3, [pc, #140]	; (80088e0 <_svfiprintf_r+0x1f4>)
 8008854:	bb1b      	cbnz	r3, 800889e <_svfiprintf_r+0x1b2>
 8008856:	9b03      	ldr	r3, [sp, #12]
 8008858:	3307      	adds	r3, #7
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	3308      	adds	r3, #8
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008864:	4433      	add	r3, r6
 8008866:	9309      	str	r3, [sp, #36]	; 0x24
 8008868:	e767      	b.n	800873a <_svfiprintf_r+0x4e>
 800886a:	fb0c 3202 	mla	r2, ip, r2, r3
 800886e:	460c      	mov	r4, r1
 8008870:	2001      	movs	r0, #1
 8008872:	e7a5      	b.n	80087c0 <_svfiprintf_r+0xd4>
 8008874:	2300      	movs	r3, #0
 8008876:	3401      	adds	r4, #1
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	4619      	mov	r1, r3
 800887c:	f04f 0c0a 	mov.w	ip, #10
 8008880:	4620      	mov	r0, r4
 8008882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008886:	3a30      	subs	r2, #48	; 0x30
 8008888:	2a09      	cmp	r2, #9
 800888a:	d903      	bls.n	8008894 <_svfiprintf_r+0x1a8>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0c5      	beq.n	800881c <_svfiprintf_r+0x130>
 8008890:	9105      	str	r1, [sp, #20]
 8008892:	e7c3      	b.n	800881c <_svfiprintf_r+0x130>
 8008894:	fb0c 2101 	mla	r1, ip, r1, r2
 8008898:	4604      	mov	r4, r0
 800889a:	2301      	movs	r3, #1
 800889c:	e7f0      	b.n	8008880 <_svfiprintf_r+0x194>
 800889e:	ab03      	add	r3, sp, #12
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	462a      	mov	r2, r5
 80088a4:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <_svfiprintf_r+0x1f8>)
 80088a6:	a904      	add	r1, sp, #16
 80088a8:	4638      	mov	r0, r7
 80088aa:	f3af 8000 	nop.w
 80088ae:	1c42      	adds	r2, r0, #1
 80088b0:	4606      	mov	r6, r0
 80088b2:	d1d6      	bne.n	8008862 <_svfiprintf_r+0x176>
 80088b4:	89ab      	ldrh	r3, [r5, #12]
 80088b6:	065b      	lsls	r3, r3, #25
 80088b8:	f53f af2c 	bmi.w	8008714 <_svfiprintf_r+0x28>
 80088bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088be:	b01d      	add	sp, #116	; 0x74
 80088c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	462a      	mov	r2, r5
 80088ca:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <_svfiprintf_r+0x1f8>)
 80088cc:	a904      	add	r1, sp, #16
 80088ce:	4638      	mov	r0, r7
 80088d0:	f000 f87a 	bl	80089c8 <_printf_i>
 80088d4:	e7eb      	b.n	80088ae <_svfiprintf_r+0x1c2>
 80088d6:	bf00      	nop
 80088d8:	0800a050 	.word	0x0800a050
 80088dc:	0800a05a 	.word	0x0800a05a
 80088e0:	00000000 	.word	0x00000000
 80088e4:	08008635 	.word	0x08008635
 80088e8:	0800a056 	.word	0x0800a056

080088ec <_printf_common>:
 80088ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	4616      	mov	r6, r2
 80088f2:	4699      	mov	r9, r3
 80088f4:	688a      	ldr	r2, [r1, #8]
 80088f6:	690b      	ldr	r3, [r1, #16]
 80088f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088fc:	4293      	cmp	r3, r2
 80088fe:	bfb8      	it	lt
 8008900:	4613      	movlt	r3, r2
 8008902:	6033      	str	r3, [r6, #0]
 8008904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008908:	4607      	mov	r7, r0
 800890a:	460c      	mov	r4, r1
 800890c:	b10a      	cbz	r2, 8008912 <_printf_common+0x26>
 800890e:	3301      	adds	r3, #1
 8008910:	6033      	str	r3, [r6, #0]
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	0699      	lsls	r1, r3, #26
 8008916:	bf42      	ittt	mi
 8008918:	6833      	ldrmi	r3, [r6, #0]
 800891a:	3302      	addmi	r3, #2
 800891c:	6033      	strmi	r3, [r6, #0]
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	f015 0506 	ands.w	r5, r5, #6
 8008924:	d106      	bne.n	8008934 <_printf_common+0x48>
 8008926:	f104 0a19 	add.w	sl, r4, #25
 800892a:	68e3      	ldr	r3, [r4, #12]
 800892c:	6832      	ldr	r2, [r6, #0]
 800892e:	1a9b      	subs	r3, r3, r2
 8008930:	42ab      	cmp	r3, r5
 8008932:	dc26      	bgt.n	8008982 <_printf_common+0x96>
 8008934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008938:	1e13      	subs	r3, r2, #0
 800893a:	6822      	ldr	r2, [r4, #0]
 800893c:	bf18      	it	ne
 800893e:	2301      	movne	r3, #1
 8008940:	0692      	lsls	r2, r2, #26
 8008942:	d42b      	bmi.n	800899c <_printf_common+0xb0>
 8008944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008948:	4649      	mov	r1, r9
 800894a:	4638      	mov	r0, r7
 800894c:	47c0      	blx	r8
 800894e:	3001      	adds	r0, #1
 8008950:	d01e      	beq.n	8008990 <_printf_common+0xa4>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	68e5      	ldr	r5, [r4, #12]
 8008956:	6832      	ldr	r2, [r6, #0]
 8008958:	f003 0306 	and.w	r3, r3, #6
 800895c:	2b04      	cmp	r3, #4
 800895e:	bf08      	it	eq
 8008960:	1aad      	subeq	r5, r5, r2
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	6922      	ldr	r2, [r4, #16]
 8008966:	bf0c      	ite	eq
 8008968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800896c:	2500      	movne	r5, #0
 800896e:	4293      	cmp	r3, r2
 8008970:	bfc4      	itt	gt
 8008972:	1a9b      	subgt	r3, r3, r2
 8008974:	18ed      	addgt	r5, r5, r3
 8008976:	2600      	movs	r6, #0
 8008978:	341a      	adds	r4, #26
 800897a:	42b5      	cmp	r5, r6
 800897c:	d11a      	bne.n	80089b4 <_printf_common+0xc8>
 800897e:	2000      	movs	r0, #0
 8008980:	e008      	b.n	8008994 <_printf_common+0xa8>
 8008982:	2301      	movs	r3, #1
 8008984:	4652      	mov	r2, sl
 8008986:	4649      	mov	r1, r9
 8008988:	4638      	mov	r0, r7
 800898a:	47c0      	blx	r8
 800898c:	3001      	adds	r0, #1
 800898e:	d103      	bne.n	8008998 <_printf_common+0xac>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008998:	3501      	adds	r5, #1
 800899a:	e7c6      	b.n	800892a <_printf_common+0x3e>
 800899c:	18e1      	adds	r1, r4, r3
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	2030      	movs	r0, #48	; 0x30
 80089a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089a6:	4422      	add	r2, r4
 80089a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089b0:	3302      	adds	r3, #2
 80089b2:	e7c7      	b.n	8008944 <_printf_common+0x58>
 80089b4:	2301      	movs	r3, #1
 80089b6:	4622      	mov	r2, r4
 80089b8:	4649      	mov	r1, r9
 80089ba:	4638      	mov	r0, r7
 80089bc:	47c0      	blx	r8
 80089be:	3001      	adds	r0, #1
 80089c0:	d0e6      	beq.n	8008990 <_printf_common+0xa4>
 80089c2:	3601      	adds	r6, #1
 80089c4:	e7d9      	b.n	800897a <_printf_common+0x8e>
	...

080089c8 <_printf_i>:
 80089c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	460c      	mov	r4, r1
 80089ce:	4691      	mov	r9, r2
 80089d0:	7e27      	ldrb	r7, [r4, #24]
 80089d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80089d4:	2f78      	cmp	r7, #120	; 0x78
 80089d6:	4680      	mov	r8, r0
 80089d8:	469a      	mov	sl, r3
 80089da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089de:	d807      	bhi.n	80089f0 <_printf_i+0x28>
 80089e0:	2f62      	cmp	r7, #98	; 0x62
 80089e2:	d80a      	bhi.n	80089fa <_printf_i+0x32>
 80089e4:	2f00      	cmp	r7, #0
 80089e6:	f000 80d8 	beq.w	8008b9a <_printf_i+0x1d2>
 80089ea:	2f58      	cmp	r7, #88	; 0x58
 80089ec:	f000 80a3 	beq.w	8008b36 <_printf_i+0x16e>
 80089f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089f8:	e03a      	b.n	8008a70 <_printf_i+0xa8>
 80089fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089fe:	2b15      	cmp	r3, #21
 8008a00:	d8f6      	bhi.n	80089f0 <_printf_i+0x28>
 8008a02:	a001      	add	r0, pc, #4	; (adr r0, 8008a08 <_printf_i+0x40>)
 8008a04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a08:	08008a61 	.word	0x08008a61
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	080089f1 	.word	0x080089f1
 8008a14:	080089f1 	.word	0x080089f1
 8008a18:	080089f1 	.word	0x080089f1
 8008a1c:	080089f1 	.word	0x080089f1
 8008a20:	08008a75 	.word	0x08008a75
 8008a24:	080089f1 	.word	0x080089f1
 8008a28:	080089f1 	.word	0x080089f1
 8008a2c:	080089f1 	.word	0x080089f1
 8008a30:	080089f1 	.word	0x080089f1
 8008a34:	08008b81 	.word	0x08008b81
 8008a38:	08008aa5 	.word	0x08008aa5
 8008a3c:	08008b63 	.word	0x08008b63
 8008a40:	080089f1 	.word	0x080089f1
 8008a44:	080089f1 	.word	0x080089f1
 8008a48:	08008ba3 	.word	0x08008ba3
 8008a4c:	080089f1 	.word	0x080089f1
 8008a50:	08008aa5 	.word	0x08008aa5
 8008a54:	080089f1 	.word	0x080089f1
 8008a58:	080089f1 	.word	0x080089f1
 8008a5c:	08008b6b 	.word	0x08008b6b
 8008a60:	680b      	ldr	r3, [r1, #0]
 8008a62:	1d1a      	adds	r2, r3, #4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	600a      	str	r2, [r1, #0]
 8008a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0a3      	b.n	8008bbc <_printf_i+0x1f4>
 8008a74:	6825      	ldr	r5, [r4, #0]
 8008a76:	6808      	ldr	r0, [r1, #0]
 8008a78:	062e      	lsls	r6, r5, #24
 8008a7a:	f100 0304 	add.w	r3, r0, #4
 8008a7e:	d50a      	bpl.n	8008a96 <_printf_i+0xce>
 8008a80:	6805      	ldr	r5, [r0, #0]
 8008a82:	600b      	str	r3, [r1, #0]
 8008a84:	2d00      	cmp	r5, #0
 8008a86:	da03      	bge.n	8008a90 <_printf_i+0xc8>
 8008a88:	232d      	movs	r3, #45	; 0x2d
 8008a8a:	426d      	negs	r5, r5
 8008a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a90:	485e      	ldr	r0, [pc, #376]	; (8008c0c <_printf_i+0x244>)
 8008a92:	230a      	movs	r3, #10
 8008a94:	e019      	b.n	8008aca <_printf_i+0x102>
 8008a96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a9a:	6805      	ldr	r5, [r0, #0]
 8008a9c:	600b      	str	r3, [r1, #0]
 8008a9e:	bf18      	it	ne
 8008aa0:	b22d      	sxthne	r5, r5
 8008aa2:	e7ef      	b.n	8008a84 <_printf_i+0xbc>
 8008aa4:	680b      	ldr	r3, [r1, #0]
 8008aa6:	6825      	ldr	r5, [r4, #0]
 8008aa8:	1d18      	adds	r0, r3, #4
 8008aaa:	6008      	str	r0, [r1, #0]
 8008aac:	0628      	lsls	r0, r5, #24
 8008aae:	d501      	bpl.n	8008ab4 <_printf_i+0xec>
 8008ab0:	681d      	ldr	r5, [r3, #0]
 8008ab2:	e002      	b.n	8008aba <_printf_i+0xf2>
 8008ab4:	0669      	lsls	r1, r5, #25
 8008ab6:	d5fb      	bpl.n	8008ab0 <_printf_i+0xe8>
 8008ab8:	881d      	ldrh	r5, [r3, #0]
 8008aba:	4854      	ldr	r0, [pc, #336]	; (8008c0c <_printf_i+0x244>)
 8008abc:	2f6f      	cmp	r7, #111	; 0x6f
 8008abe:	bf0c      	ite	eq
 8008ac0:	2308      	moveq	r3, #8
 8008ac2:	230a      	movne	r3, #10
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aca:	6866      	ldr	r6, [r4, #4]
 8008acc:	60a6      	str	r6, [r4, #8]
 8008ace:	2e00      	cmp	r6, #0
 8008ad0:	bfa2      	ittt	ge
 8008ad2:	6821      	ldrge	r1, [r4, #0]
 8008ad4:	f021 0104 	bicge.w	r1, r1, #4
 8008ad8:	6021      	strge	r1, [r4, #0]
 8008ada:	b90d      	cbnz	r5, 8008ae0 <_printf_i+0x118>
 8008adc:	2e00      	cmp	r6, #0
 8008ade:	d04d      	beq.n	8008b7c <_printf_i+0x1b4>
 8008ae0:	4616      	mov	r6, r2
 8008ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8008aea:	5dc7      	ldrb	r7, [r0, r7]
 8008aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008af0:	462f      	mov	r7, r5
 8008af2:	42bb      	cmp	r3, r7
 8008af4:	460d      	mov	r5, r1
 8008af6:	d9f4      	bls.n	8008ae2 <_printf_i+0x11a>
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d10b      	bne.n	8008b14 <_printf_i+0x14c>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	07df      	lsls	r7, r3, #31
 8008b00:	d508      	bpl.n	8008b14 <_printf_i+0x14c>
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	6861      	ldr	r1, [r4, #4]
 8008b06:	4299      	cmp	r1, r3
 8008b08:	bfde      	ittt	le
 8008b0a:	2330      	movle	r3, #48	; 0x30
 8008b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b14:	1b92      	subs	r2, r2, r6
 8008b16:	6122      	str	r2, [r4, #16]
 8008b18:	f8cd a000 	str.w	sl, [sp]
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	aa03      	add	r2, sp, #12
 8008b20:	4621      	mov	r1, r4
 8008b22:	4640      	mov	r0, r8
 8008b24:	f7ff fee2 	bl	80088ec <_printf_common>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d14c      	bne.n	8008bc6 <_printf_i+0x1fe>
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b30:	b004      	add	sp, #16
 8008b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b36:	4835      	ldr	r0, [pc, #212]	; (8008c0c <_printf_i+0x244>)
 8008b38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	680e      	ldr	r6, [r1, #0]
 8008b40:	061f      	lsls	r7, r3, #24
 8008b42:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b46:	600e      	str	r6, [r1, #0]
 8008b48:	d514      	bpl.n	8008b74 <_printf_i+0x1ac>
 8008b4a:	07d9      	lsls	r1, r3, #31
 8008b4c:	bf44      	itt	mi
 8008b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8008b52:	6023      	strmi	r3, [r4, #0]
 8008b54:	b91d      	cbnz	r5, 8008b5e <_printf_i+0x196>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	f023 0320 	bic.w	r3, r3, #32
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	2310      	movs	r3, #16
 8008b60:	e7b0      	b.n	8008ac4 <_printf_i+0xfc>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	f043 0320 	orr.w	r3, r3, #32
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	2378      	movs	r3, #120	; 0x78
 8008b6c:	4828      	ldr	r0, [pc, #160]	; (8008c10 <_printf_i+0x248>)
 8008b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b72:	e7e3      	b.n	8008b3c <_printf_i+0x174>
 8008b74:	065e      	lsls	r6, r3, #25
 8008b76:	bf48      	it	mi
 8008b78:	b2ad      	uxthmi	r5, r5
 8008b7a:	e7e6      	b.n	8008b4a <_printf_i+0x182>
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	e7bb      	b.n	8008af8 <_printf_i+0x130>
 8008b80:	680b      	ldr	r3, [r1, #0]
 8008b82:	6826      	ldr	r6, [r4, #0]
 8008b84:	6960      	ldr	r0, [r4, #20]
 8008b86:	1d1d      	adds	r5, r3, #4
 8008b88:	600d      	str	r5, [r1, #0]
 8008b8a:	0635      	lsls	r5, r6, #24
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	d501      	bpl.n	8008b94 <_printf_i+0x1cc>
 8008b90:	6018      	str	r0, [r3, #0]
 8008b92:	e002      	b.n	8008b9a <_printf_i+0x1d2>
 8008b94:	0671      	lsls	r1, r6, #25
 8008b96:	d5fb      	bpl.n	8008b90 <_printf_i+0x1c8>
 8008b98:	8018      	strh	r0, [r3, #0]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	4616      	mov	r6, r2
 8008ba0:	e7ba      	b.n	8008b18 <_printf_i+0x150>
 8008ba2:	680b      	ldr	r3, [r1, #0]
 8008ba4:	1d1a      	adds	r2, r3, #4
 8008ba6:	600a      	str	r2, [r1, #0]
 8008ba8:	681e      	ldr	r6, [r3, #0]
 8008baa:	6862      	ldr	r2, [r4, #4]
 8008bac:	2100      	movs	r1, #0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f7f7 fae6 	bl	8000180 <memchr>
 8008bb4:	b108      	cbz	r0, 8008bba <_printf_i+0x1f2>
 8008bb6:	1b80      	subs	r0, r0, r6
 8008bb8:	6060      	str	r0, [r4, #4]
 8008bba:	6863      	ldr	r3, [r4, #4]
 8008bbc:	6123      	str	r3, [r4, #16]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc4:	e7a8      	b.n	8008b18 <_printf_i+0x150>
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4640      	mov	r0, r8
 8008bce:	47d0      	blx	sl
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d0ab      	beq.n	8008b2c <_printf_i+0x164>
 8008bd4:	6823      	ldr	r3, [r4, #0]
 8008bd6:	079b      	lsls	r3, r3, #30
 8008bd8:	d413      	bmi.n	8008c02 <_printf_i+0x23a>
 8008bda:	68e0      	ldr	r0, [r4, #12]
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	4298      	cmp	r0, r3
 8008be0:	bfb8      	it	lt
 8008be2:	4618      	movlt	r0, r3
 8008be4:	e7a4      	b.n	8008b30 <_printf_i+0x168>
 8008be6:	2301      	movs	r3, #1
 8008be8:	4632      	mov	r2, r6
 8008bea:	4649      	mov	r1, r9
 8008bec:	4640      	mov	r0, r8
 8008bee:	47d0      	blx	sl
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d09b      	beq.n	8008b2c <_printf_i+0x164>
 8008bf4:	3501      	adds	r5, #1
 8008bf6:	68e3      	ldr	r3, [r4, #12]
 8008bf8:	9903      	ldr	r1, [sp, #12]
 8008bfa:	1a5b      	subs	r3, r3, r1
 8008bfc:	42ab      	cmp	r3, r5
 8008bfe:	dcf2      	bgt.n	8008be6 <_printf_i+0x21e>
 8008c00:	e7eb      	b.n	8008bda <_printf_i+0x212>
 8008c02:	2500      	movs	r5, #0
 8008c04:	f104 0619 	add.w	r6, r4, #25
 8008c08:	e7f5      	b.n	8008bf6 <_printf_i+0x22e>
 8008c0a:	bf00      	nop
 8008c0c:	0800a061 	.word	0x0800a061
 8008c10:	0800a072 	.word	0x0800a072

08008c14 <memcpy>:
 8008c14:	440a      	add	r2, r1
 8008c16:	4291      	cmp	r1, r2
 8008c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c1c:	d100      	bne.n	8008c20 <memcpy+0xc>
 8008c1e:	4770      	bx	lr
 8008c20:	b510      	push	{r4, lr}
 8008c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c2a:	4291      	cmp	r1, r2
 8008c2c:	d1f9      	bne.n	8008c22 <memcpy+0xe>
 8008c2e:	bd10      	pop	{r4, pc}

08008c30 <memmove>:
 8008c30:	4288      	cmp	r0, r1
 8008c32:	b510      	push	{r4, lr}
 8008c34:	eb01 0402 	add.w	r4, r1, r2
 8008c38:	d902      	bls.n	8008c40 <memmove+0x10>
 8008c3a:	4284      	cmp	r4, r0
 8008c3c:	4623      	mov	r3, r4
 8008c3e:	d807      	bhi.n	8008c50 <memmove+0x20>
 8008c40:	1e43      	subs	r3, r0, #1
 8008c42:	42a1      	cmp	r1, r4
 8008c44:	d008      	beq.n	8008c58 <memmove+0x28>
 8008c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c4e:	e7f8      	b.n	8008c42 <memmove+0x12>
 8008c50:	4402      	add	r2, r0
 8008c52:	4601      	mov	r1, r0
 8008c54:	428a      	cmp	r2, r1
 8008c56:	d100      	bne.n	8008c5a <memmove+0x2a>
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c62:	e7f7      	b.n	8008c54 <memmove+0x24>

08008c64 <_free_r>:
 8008c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c66:	2900      	cmp	r1, #0
 8008c68:	d048      	beq.n	8008cfc <_free_r+0x98>
 8008c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6e:	9001      	str	r0, [sp, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f1a1 0404 	sub.w	r4, r1, #4
 8008c76:	bfb8      	it	lt
 8008c78:	18e4      	addlt	r4, r4, r3
 8008c7a:	f000 f8d3 	bl	8008e24 <__malloc_lock>
 8008c7e:	4a20      	ldr	r2, [pc, #128]	; (8008d00 <_free_r+0x9c>)
 8008c80:	9801      	ldr	r0, [sp, #4]
 8008c82:	6813      	ldr	r3, [r2, #0]
 8008c84:	4615      	mov	r5, r2
 8008c86:	b933      	cbnz	r3, 8008c96 <_free_r+0x32>
 8008c88:	6063      	str	r3, [r4, #4]
 8008c8a:	6014      	str	r4, [r2, #0]
 8008c8c:	b003      	add	sp, #12
 8008c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c92:	f000 b8cd 	b.w	8008e30 <__malloc_unlock>
 8008c96:	42a3      	cmp	r3, r4
 8008c98:	d90b      	bls.n	8008cb2 <_free_r+0x4e>
 8008c9a:	6821      	ldr	r1, [r4, #0]
 8008c9c:	1862      	adds	r2, r4, r1
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	bf04      	itt	eq
 8008ca2:	681a      	ldreq	r2, [r3, #0]
 8008ca4:	685b      	ldreq	r3, [r3, #4]
 8008ca6:	6063      	str	r3, [r4, #4]
 8008ca8:	bf04      	itt	eq
 8008caa:	1852      	addeq	r2, r2, r1
 8008cac:	6022      	streq	r2, [r4, #0]
 8008cae:	602c      	str	r4, [r5, #0]
 8008cb0:	e7ec      	b.n	8008c8c <_free_r+0x28>
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	b10b      	cbz	r3, 8008cbc <_free_r+0x58>
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d9fa      	bls.n	8008cb2 <_free_r+0x4e>
 8008cbc:	6811      	ldr	r1, [r2, #0]
 8008cbe:	1855      	adds	r5, r2, r1
 8008cc0:	42a5      	cmp	r5, r4
 8008cc2:	d10b      	bne.n	8008cdc <_free_r+0x78>
 8008cc4:	6824      	ldr	r4, [r4, #0]
 8008cc6:	4421      	add	r1, r4
 8008cc8:	1854      	adds	r4, r2, r1
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	6011      	str	r1, [r2, #0]
 8008cce:	d1dd      	bne.n	8008c8c <_free_r+0x28>
 8008cd0:	681c      	ldr	r4, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	6053      	str	r3, [r2, #4]
 8008cd6:	4421      	add	r1, r4
 8008cd8:	6011      	str	r1, [r2, #0]
 8008cda:	e7d7      	b.n	8008c8c <_free_r+0x28>
 8008cdc:	d902      	bls.n	8008ce4 <_free_r+0x80>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	6003      	str	r3, [r0, #0]
 8008ce2:	e7d3      	b.n	8008c8c <_free_r+0x28>
 8008ce4:	6825      	ldr	r5, [r4, #0]
 8008ce6:	1961      	adds	r1, r4, r5
 8008ce8:	428b      	cmp	r3, r1
 8008cea:	bf04      	itt	eq
 8008cec:	6819      	ldreq	r1, [r3, #0]
 8008cee:	685b      	ldreq	r3, [r3, #4]
 8008cf0:	6063      	str	r3, [r4, #4]
 8008cf2:	bf04      	itt	eq
 8008cf4:	1949      	addeq	r1, r1, r5
 8008cf6:	6021      	streq	r1, [r4, #0]
 8008cf8:	6054      	str	r4, [r2, #4]
 8008cfa:	e7c7      	b.n	8008c8c <_free_r+0x28>
 8008cfc:	b003      	add	sp, #12
 8008cfe:	bd30      	pop	{r4, r5, pc}
 8008d00:	20000098 	.word	0x20000098

08008d04 <_malloc_r>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	1ccd      	adds	r5, r1, #3
 8008d08:	f025 0503 	bic.w	r5, r5, #3
 8008d0c:	3508      	adds	r5, #8
 8008d0e:	2d0c      	cmp	r5, #12
 8008d10:	bf38      	it	cc
 8008d12:	250c      	movcc	r5, #12
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	4606      	mov	r6, r0
 8008d18:	db01      	blt.n	8008d1e <_malloc_r+0x1a>
 8008d1a:	42a9      	cmp	r1, r5
 8008d1c:	d903      	bls.n	8008d26 <_malloc_r+0x22>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	6033      	str	r3, [r6, #0]
 8008d22:	2000      	movs	r0, #0
 8008d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d26:	f000 f87d 	bl	8008e24 <__malloc_lock>
 8008d2a:	4921      	ldr	r1, [pc, #132]	; (8008db0 <_malloc_r+0xac>)
 8008d2c:	680a      	ldr	r2, [r1, #0]
 8008d2e:	4614      	mov	r4, r2
 8008d30:	b99c      	cbnz	r4, 8008d5a <_malloc_r+0x56>
 8008d32:	4f20      	ldr	r7, [pc, #128]	; (8008db4 <_malloc_r+0xb0>)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	b923      	cbnz	r3, 8008d42 <_malloc_r+0x3e>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f000 f862 	bl	8008e04 <_sbrk_r>
 8008d40:	6038      	str	r0, [r7, #0]
 8008d42:	4629      	mov	r1, r5
 8008d44:	4630      	mov	r0, r6
 8008d46:	f000 f85d 	bl	8008e04 <_sbrk_r>
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	d123      	bne.n	8008d96 <_malloc_r+0x92>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	6033      	str	r3, [r6, #0]
 8008d52:	4630      	mov	r0, r6
 8008d54:	f000 f86c 	bl	8008e30 <__malloc_unlock>
 8008d58:	e7e3      	b.n	8008d22 <_malloc_r+0x1e>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	1b5b      	subs	r3, r3, r5
 8008d5e:	d417      	bmi.n	8008d90 <_malloc_r+0x8c>
 8008d60:	2b0b      	cmp	r3, #11
 8008d62:	d903      	bls.n	8008d6c <_malloc_r+0x68>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	441c      	add	r4, r3
 8008d68:	6025      	str	r5, [r4, #0]
 8008d6a:	e004      	b.n	8008d76 <_malloc_r+0x72>
 8008d6c:	6863      	ldr	r3, [r4, #4]
 8008d6e:	42a2      	cmp	r2, r4
 8008d70:	bf0c      	ite	eq
 8008d72:	600b      	streq	r3, [r1, #0]
 8008d74:	6053      	strne	r3, [r2, #4]
 8008d76:	4630      	mov	r0, r6
 8008d78:	f000 f85a 	bl	8008e30 <__malloc_unlock>
 8008d7c:	f104 000b 	add.w	r0, r4, #11
 8008d80:	1d23      	adds	r3, r4, #4
 8008d82:	f020 0007 	bic.w	r0, r0, #7
 8008d86:	1ac2      	subs	r2, r0, r3
 8008d88:	d0cc      	beq.n	8008d24 <_malloc_r+0x20>
 8008d8a:	1a1b      	subs	r3, r3, r0
 8008d8c:	50a3      	str	r3, [r4, r2]
 8008d8e:	e7c9      	b.n	8008d24 <_malloc_r+0x20>
 8008d90:	4622      	mov	r2, r4
 8008d92:	6864      	ldr	r4, [r4, #4]
 8008d94:	e7cc      	b.n	8008d30 <_malloc_r+0x2c>
 8008d96:	1cc4      	adds	r4, r0, #3
 8008d98:	f024 0403 	bic.w	r4, r4, #3
 8008d9c:	42a0      	cmp	r0, r4
 8008d9e:	d0e3      	beq.n	8008d68 <_malloc_r+0x64>
 8008da0:	1a21      	subs	r1, r4, r0
 8008da2:	4630      	mov	r0, r6
 8008da4:	f000 f82e 	bl	8008e04 <_sbrk_r>
 8008da8:	3001      	adds	r0, #1
 8008daa:	d1dd      	bne.n	8008d68 <_malloc_r+0x64>
 8008dac:	e7cf      	b.n	8008d4e <_malloc_r+0x4a>
 8008dae:	bf00      	nop
 8008db0:	20000098 	.word	0x20000098
 8008db4:	2000009c 	.word	0x2000009c

08008db8 <_realloc_r>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	4607      	mov	r7, r0
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	460e      	mov	r6, r1
 8008dc0:	b921      	cbnz	r1, 8008dcc <_realloc_r+0x14>
 8008dc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	f7ff bf9c 	b.w	8008d04 <_malloc_r>
 8008dcc:	b922      	cbnz	r2, 8008dd8 <_realloc_r+0x20>
 8008dce:	f7ff ff49 	bl	8008c64 <_free_r>
 8008dd2:	4625      	mov	r5, r4
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd8:	f000 f830 	bl	8008e3c <_malloc_usable_size_r>
 8008ddc:	42a0      	cmp	r0, r4
 8008dde:	d20f      	bcs.n	8008e00 <_realloc_r+0x48>
 8008de0:	4621      	mov	r1, r4
 8008de2:	4638      	mov	r0, r7
 8008de4:	f7ff ff8e 	bl	8008d04 <_malloc_r>
 8008de8:	4605      	mov	r5, r0
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d0f2      	beq.n	8008dd4 <_realloc_r+0x1c>
 8008dee:	4631      	mov	r1, r6
 8008df0:	4622      	mov	r2, r4
 8008df2:	f7ff ff0f 	bl	8008c14 <memcpy>
 8008df6:	4631      	mov	r1, r6
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff ff33 	bl	8008c64 <_free_r>
 8008dfe:	e7e9      	b.n	8008dd4 <_realloc_r+0x1c>
 8008e00:	4635      	mov	r5, r6
 8008e02:	e7e7      	b.n	8008dd4 <_realloc_r+0x1c>

08008e04 <_sbrk_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d06      	ldr	r5, [pc, #24]	; (8008e20 <_sbrk_r+0x1c>)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	f7f9 f85e 	bl	8001ed0 <_sbrk>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_sbrk_r+0x1a>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_sbrk_r+0x1a>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	200005a4 	.word	0x200005a4

08008e24 <__malloc_lock>:
 8008e24:	4801      	ldr	r0, [pc, #4]	; (8008e2c <__malloc_lock+0x8>)
 8008e26:	f000 b811 	b.w	8008e4c <__retarget_lock_acquire_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	200005ac 	.word	0x200005ac

08008e30 <__malloc_unlock>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__malloc_unlock+0x8>)
 8008e32:	f000 b80c 	b.w	8008e4e <__retarget_lock_release_recursive>
 8008e36:	bf00      	nop
 8008e38:	200005ac 	.word	0x200005ac

08008e3c <_malloc_usable_size_r>:
 8008e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e40:	1f18      	subs	r0, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfbc      	itt	lt
 8008e46:	580b      	ldrlt	r3, [r1, r0]
 8008e48:	18c0      	addlt	r0, r0, r3
 8008e4a:	4770      	bx	lr

08008e4c <__retarget_lock_acquire_recursive>:
 8008e4c:	4770      	bx	lr

08008e4e <__retarget_lock_release_recursive>:
 8008e4e:	4770      	bx	lr

08008e50 <sin>:
 8008e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e52:	ec53 2b10 	vmov	r2, r3, d0
 8008e56:	4826      	ldr	r0, [pc, #152]	; (8008ef0 <sin+0xa0>)
 8008e58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008e5c:	4281      	cmp	r1, r0
 8008e5e:	dc07      	bgt.n	8008e70 <sin+0x20>
 8008e60:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008ee8 <sin+0x98>
 8008e64:	2000      	movs	r0, #0
 8008e66:	f000 fe5b 	bl	8009b20 <__kernel_sin>
 8008e6a:	ec51 0b10 	vmov	r0, r1, d0
 8008e6e:	e007      	b.n	8008e80 <sin+0x30>
 8008e70:	4820      	ldr	r0, [pc, #128]	; (8008ef4 <sin+0xa4>)
 8008e72:	4281      	cmp	r1, r0
 8008e74:	dd09      	ble.n	8008e8a <sin+0x3a>
 8008e76:	ee10 0a10 	vmov	r0, s0
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f7f7 f9d4 	bl	8000228 <__aeabi_dsub>
 8008e80:	ec41 0b10 	vmov	d0, r0, r1
 8008e84:	b005      	add	sp, #20
 8008e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e8a:	4668      	mov	r0, sp
 8008e8c:	f000 f834 	bl	8008ef8 <__ieee754_rem_pio2>
 8008e90:	f000 0003 	and.w	r0, r0, #3
 8008e94:	2801      	cmp	r0, #1
 8008e96:	d008      	beq.n	8008eaa <sin+0x5a>
 8008e98:	2802      	cmp	r0, #2
 8008e9a:	d00d      	beq.n	8008eb8 <sin+0x68>
 8008e9c:	b9d0      	cbnz	r0, 8008ed4 <sin+0x84>
 8008e9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ea2:	ed9d 0b00 	vldr	d0, [sp]
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	e7dd      	b.n	8008e66 <sin+0x16>
 8008eaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008eae:	ed9d 0b00 	vldr	d0, [sp]
 8008eb2:	f000 fa2d 	bl	8009310 <__kernel_cos>
 8008eb6:	e7d8      	b.n	8008e6a <sin+0x1a>
 8008eb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ebc:	ed9d 0b00 	vldr	d0, [sp]
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	f000 fe2d 	bl	8009b20 <__kernel_sin>
 8008ec6:	ec53 2b10 	vmov	r2, r3, d0
 8008eca:	ee10 0a10 	vmov	r0, s0
 8008ece:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ed2:	e7d5      	b.n	8008e80 <sin+0x30>
 8008ed4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ed8:	ed9d 0b00 	vldr	d0, [sp]
 8008edc:	f000 fa18 	bl	8009310 <__kernel_cos>
 8008ee0:	e7f1      	b.n	8008ec6 <sin+0x76>
 8008ee2:	bf00      	nop
 8008ee4:	f3af 8000 	nop.w
	...
 8008ef0:	3fe921fb 	.word	0x3fe921fb
 8008ef4:	7fefffff 	.word	0x7fefffff

08008ef8 <__ieee754_rem_pio2>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	ed2d 8b02 	vpush	{d8}
 8008f00:	ec55 4b10 	vmov	r4, r5, d0
 8008f04:	4bca      	ldr	r3, [pc, #808]	; (8009230 <__ieee754_rem_pio2+0x338>)
 8008f06:	b08b      	sub	sp, #44	; 0x2c
 8008f08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008f0c:	4598      	cmp	r8, r3
 8008f0e:	4682      	mov	sl, r0
 8008f10:	9502      	str	r5, [sp, #8]
 8008f12:	dc08      	bgt.n	8008f26 <__ieee754_rem_pio2+0x2e>
 8008f14:	2200      	movs	r2, #0
 8008f16:	2300      	movs	r3, #0
 8008f18:	ed80 0b00 	vstr	d0, [r0]
 8008f1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008f20:	f04f 0b00 	mov.w	fp, #0
 8008f24:	e028      	b.n	8008f78 <__ieee754_rem_pio2+0x80>
 8008f26:	4bc3      	ldr	r3, [pc, #780]	; (8009234 <__ieee754_rem_pio2+0x33c>)
 8008f28:	4598      	cmp	r8, r3
 8008f2a:	dc78      	bgt.n	800901e <__ieee754_rem_pio2+0x126>
 8008f2c:	9b02      	ldr	r3, [sp, #8]
 8008f2e:	4ec2      	ldr	r6, [pc, #776]	; (8009238 <__ieee754_rem_pio2+0x340>)
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	ee10 0a10 	vmov	r0, s0
 8008f36:	a3b0      	add	r3, pc, #704	; (adr r3, 80091f8 <__ieee754_rem_pio2+0x300>)
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	dd39      	ble.n	8008fb4 <__ieee754_rem_pio2+0xbc>
 8008f40:	f7f7 f972 	bl	8000228 <__aeabi_dsub>
 8008f44:	45b0      	cmp	r8, r6
 8008f46:	4604      	mov	r4, r0
 8008f48:	460d      	mov	r5, r1
 8008f4a:	d01b      	beq.n	8008f84 <__ieee754_rem_pio2+0x8c>
 8008f4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009200 <__ieee754_rem_pio2+0x308>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f7f7 f969 	bl	8000228 <__aeabi_dsub>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	e9ca 2300 	strd	r2, r3, [sl]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7f7 f961 	bl	8000228 <__aeabi_dsub>
 8008f66:	a3a6      	add	r3, pc, #664	; (adr r3, 8009200 <__ieee754_rem_pio2+0x308>)
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	f7f7 f95c 	bl	8000228 <__aeabi_dsub>
 8008f70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f74:	f04f 0b01 	mov.w	fp, #1
 8008f78:	4658      	mov	r0, fp
 8008f7a:	b00b      	add	sp, #44	; 0x2c
 8008f7c:	ecbd 8b02 	vpop	{d8}
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	a3a0      	add	r3, pc, #640	; (adr r3, 8009208 <__ieee754_rem_pio2+0x310>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f94d 	bl	8000228 <__aeabi_dsub>
 8008f8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009210 <__ieee754_rem_pio2+0x318>)
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	4604      	mov	r4, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	f7f7 f946 	bl	8000228 <__aeabi_dsub>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	e9ca 2300 	strd	r2, r3, [sl]
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	f7f7 f93e 	bl	8000228 <__aeabi_dsub>
 8008fac:	a398      	add	r3, pc, #608	; (adr r3, 8009210 <__ieee754_rem_pio2+0x318>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	e7db      	b.n	8008f6c <__ieee754_rem_pio2+0x74>
 8008fb4:	f7f7 f93a 	bl	800022c <__adddf3>
 8008fb8:	45b0      	cmp	r8, r6
 8008fba:	4604      	mov	r4, r0
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	d016      	beq.n	8008fee <__ieee754_rem_pio2+0xf6>
 8008fc0:	a38f      	add	r3, pc, #572	; (adr r3, 8009200 <__ieee754_rem_pio2+0x308>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 f931 	bl	800022c <__adddf3>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	e9ca 2300 	strd	r2, r3, [sl]
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f7f7 f927 	bl	8000228 <__aeabi_dsub>
 8008fda:	a389      	add	r3, pc, #548	; (adr r3, 8009200 <__ieee754_rem_pio2+0x308>)
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f7f7 f924 	bl	800022c <__adddf3>
 8008fe4:	f04f 3bff 	mov.w	fp, #4294967295
 8008fe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008fec:	e7c4      	b.n	8008f78 <__ieee754_rem_pio2+0x80>
 8008fee:	a386      	add	r3, pc, #536	; (adr r3, 8009208 <__ieee754_rem_pio2+0x310>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f7f7 f91a 	bl	800022c <__adddf3>
 8008ff8:	a385      	add	r3, pc, #532	; (adr r3, 8009210 <__ieee754_rem_pio2+0x318>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	4604      	mov	r4, r0
 8009000:	460d      	mov	r5, r1
 8009002:	f7f7 f913 	bl	800022c <__adddf3>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	e9ca 2300 	strd	r2, r3, [sl]
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 f909 	bl	8000228 <__aeabi_dsub>
 8009016:	a37e      	add	r3, pc, #504	; (adr r3, 8009210 <__ieee754_rem_pio2+0x318>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	e7e0      	b.n	8008fe0 <__ieee754_rem_pio2+0xe8>
 800901e:	4b87      	ldr	r3, [pc, #540]	; (800923c <__ieee754_rem_pio2+0x344>)
 8009020:	4598      	cmp	r8, r3
 8009022:	f300 80d9 	bgt.w	80091d8 <__ieee754_rem_pio2+0x2e0>
 8009026:	f000 fe39 	bl	8009c9c <fabs>
 800902a:	ec55 4b10 	vmov	r4, r5, d0
 800902e:	ee10 0a10 	vmov	r0, s0
 8009032:	a379      	add	r3, pc, #484	; (adr r3, 8009218 <__ieee754_rem_pio2+0x320>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	4629      	mov	r1, r5
 800903a:	f7f7 faad 	bl	8000598 <__aeabi_dmul>
 800903e:	4b80      	ldr	r3, [pc, #512]	; (8009240 <__ieee754_rem_pio2+0x348>)
 8009040:	2200      	movs	r2, #0
 8009042:	f7f7 f8f3 	bl	800022c <__adddf3>
 8009046:	f7f7 fd41 	bl	8000acc <__aeabi_d2iz>
 800904a:	4683      	mov	fp, r0
 800904c:	f7f7 fa3a 	bl	80004c4 <__aeabi_i2d>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	ec43 2b18 	vmov	d8, r2, r3
 8009058:	a367      	add	r3, pc, #412	; (adr r3, 80091f8 <__ieee754_rem_pio2+0x300>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f7f7 fa9b 	bl	8000598 <__aeabi_dmul>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4620      	mov	r0, r4
 8009068:	4629      	mov	r1, r5
 800906a:	f7f7 f8dd 	bl	8000228 <__aeabi_dsub>
 800906e:	a364      	add	r3, pc, #400	; (adr r3, 8009200 <__ieee754_rem_pio2+0x308>)
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	ec51 0b18 	vmov	r0, r1, d8
 800907c:	f7f7 fa8c 	bl	8000598 <__aeabi_dmul>
 8009080:	f1bb 0f1f 	cmp.w	fp, #31
 8009084:	4604      	mov	r4, r0
 8009086:	460d      	mov	r5, r1
 8009088:	dc0d      	bgt.n	80090a6 <__ieee754_rem_pio2+0x1ae>
 800908a:	4b6e      	ldr	r3, [pc, #440]	; (8009244 <__ieee754_rem_pio2+0x34c>)
 800908c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009094:	4543      	cmp	r3, r8
 8009096:	d006      	beq.n	80090a6 <__ieee754_rem_pio2+0x1ae>
 8009098:	4622      	mov	r2, r4
 800909a:	462b      	mov	r3, r5
 800909c:	4630      	mov	r0, r6
 800909e:	4639      	mov	r1, r7
 80090a0:	f7f7 f8c2 	bl	8000228 <__aeabi_dsub>
 80090a4:	e00f      	b.n	80090c6 <__ieee754_rem_pio2+0x1ce>
 80090a6:	462b      	mov	r3, r5
 80090a8:	4622      	mov	r2, r4
 80090aa:	4630      	mov	r0, r6
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 f8bb 	bl	8000228 <__aeabi_dsub>
 80090b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80090bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80090c0:	f1b8 0f10 	cmp.w	r8, #16
 80090c4:	dc02      	bgt.n	80090cc <__ieee754_rem_pio2+0x1d4>
 80090c6:	e9ca 0100 	strd	r0, r1, [sl]
 80090ca:	e039      	b.n	8009140 <__ieee754_rem_pio2+0x248>
 80090cc:	a34e      	add	r3, pc, #312	; (adr r3, 8009208 <__ieee754_rem_pio2+0x310>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	ec51 0b18 	vmov	r0, r1, d8
 80090d6:	f7f7 fa5f 	bl	8000598 <__aeabi_dmul>
 80090da:	4604      	mov	r4, r0
 80090dc:	460d      	mov	r5, r1
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4630      	mov	r0, r6
 80090e4:	4639      	mov	r1, r7
 80090e6:	f7f7 f89f 	bl	8000228 <__aeabi_dsub>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4680      	mov	r8, r0
 80090f0:	4689      	mov	r9, r1
 80090f2:	4630      	mov	r0, r6
 80090f4:	4639      	mov	r1, r7
 80090f6:	f7f7 f897 	bl	8000228 <__aeabi_dsub>
 80090fa:	4622      	mov	r2, r4
 80090fc:	462b      	mov	r3, r5
 80090fe:	f7f7 f893 	bl	8000228 <__aeabi_dsub>
 8009102:	a343      	add	r3, pc, #268	; (adr r3, 8009210 <__ieee754_rem_pio2+0x318>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	4604      	mov	r4, r0
 800910a:	460d      	mov	r5, r1
 800910c:	ec51 0b18 	vmov	r0, r1, d8
 8009110:	f7f7 fa42 	bl	8000598 <__aeabi_dmul>
 8009114:	4622      	mov	r2, r4
 8009116:	462b      	mov	r3, r5
 8009118:	f7f7 f886 	bl	8000228 <__aeabi_dsub>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4604      	mov	r4, r0
 8009122:	460d      	mov	r5, r1
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 f87e 	bl	8000228 <__aeabi_dsub>
 800912c:	9a03      	ldr	r2, [sp, #12]
 800912e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b31      	cmp	r3, #49	; 0x31
 8009136:	dc24      	bgt.n	8009182 <__ieee754_rem_pio2+0x28a>
 8009138:	e9ca 0100 	strd	r0, r1, [sl]
 800913c:	4646      	mov	r6, r8
 800913e:	464f      	mov	r7, r9
 8009140:	e9da 8900 	ldrd	r8, r9, [sl]
 8009144:	4630      	mov	r0, r6
 8009146:	4642      	mov	r2, r8
 8009148:	464b      	mov	r3, r9
 800914a:	4639      	mov	r1, r7
 800914c:	f7f7 f86c 	bl	8000228 <__aeabi_dsub>
 8009150:	462b      	mov	r3, r5
 8009152:	4622      	mov	r2, r4
 8009154:	f7f7 f868 	bl	8000228 <__aeabi_dsub>
 8009158:	9b02      	ldr	r3, [sp, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009160:	f6bf af0a 	bge.w	8008f78 <__ieee754_rem_pio2+0x80>
 8009164:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009168:	f8ca 3004 	str.w	r3, [sl, #4]
 800916c:	f8ca 8000 	str.w	r8, [sl]
 8009170:	f8ca 0008 	str.w	r0, [sl, #8]
 8009174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009178:	f8ca 300c 	str.w	r3, [sl, #12]
 800917c:	f1cb 0b00 	rsb	fp, fp, #0
 8009180:	e6fa      	b.n	8008f78 <__ieee754_rem_pio2+0x80>
 8009182:	a327      	add	r3, pc, #156	; (adr r3, 8009220 <__ieee754_rem_pio2+0x328>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	ec51 0b18 	vmov	r0, r1, d8
 800918c:	f7f7 fa04 	bl	8000598 <__aeabi_dmul>
 8009190:	4604      	mov	r4, r0
 8009192:	460d      	mov	r5, r1
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4640      	mov	r0, r8
 800919a:	4649      	mov	r1, r9
 800919c:	f7f7 f844 	bl	8000228 <__aeabi_dsub>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	4640      	mov	r0, r8
 80091aa:	4649      	mov	r1, r9
 80091ac:	f7f7 f83c 	bl	8000228 <__aeabi_dsub>
 80091b0:	4622      	mov	r2, r4
 80091b2:	462b      	mov	r3, r5
 80091b4:	f7f7 f838 	bl	8000228 <__aeabi_dsub>
 80091b8:	a31b      	add	r3, pc, #108	; (adr r3, 8009228 <__ieee754_rem_pio2+0x330>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	4604      	mov	r4, r0
 80091c0:	460d      	mov	r5, r1
 80091c2:	ec51 0b18 	vmov	r0, r1, d8
 80091c6:	f7f7 f9e7 	bl	8000598 <__aeabi_dmul>
 80091ca:	4622      	mov	r2, r4
 80091cc:	462b      	mov	r3, r5
 80091ce:	f7f7 f82b 	bl	8000228 <__aeabi_dsub>
 80091d2:	4604      	mov	r4, r0
 80091d4:	460d      	mov	r5, r1
 80091d6:	e75f      	b.n	8009098 <__ieee754_rem_pio2+0x1a0>
 80091d8:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <__ieee754_rem_pio2+0x350>)
 80091da:	4598      	cmp	r8, r3
 80091dc:	dd36      	ble.n	800924c <__ieee754_rem_pio2+0x354>
 80091de:	ee10 2a10 	vmov	r2, s0
 80091e2:	462b      	mov	r3, r5
 80091e4:	4620      	mov	r0, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	f7f7 f81e 	bl	8000228 <__aeabi_dsub>
 80091ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091f0:	e9ca 0100 	strd	r0, r1, [sl]
 80091f4:	e694      	b.n	8008f20 <__ieee754_rem_pio2+0x28>
 80091f6:	bf00      	nop
 80091f8:	54400000 	.word	0x54400000
 80091fc:	3ff921fb 	.word	0x3ff921fb
 8009200:	1a626331 	.word	0x1a626331
 8009204:	3dd0b461 	.word	0x3dd0b461
 8009208:	1a600000 	.word	0x1a600000
 800920c:	3dd0b461 	.word	0x3dd0b461
 8009210:	2e037073 	.word	0x2e037073
 8009214:	3ba3198a 	.word	0x3ba3198a
 8009218:	6dc9c883 	.word	0x6dc9c883
 800921c:	3fe45f30 	.word	0x3fe45f30
 8009220:	2e000000 	.word	0x2e000000
 8009224:	3ba3198a 	.word	0x3ba3198a
 8009228:	252049c1 	.word	0x252049c1
 800922c:	397b839a 	.word	0x397b839a
 8009230:	3fe921fb 	.word	0x3fe921fb
 8009234:	4002d97b 	.word	0x4002d97b
 8009238:	3ff921fb 	.word	0x3ff921fb
 800923c:	413921fb 	.word	0x413921fb
 8009240:	3fe00000 	.word	0x3fe00000
 8009244:	0800a084 	.word	0x0800a084
 8009248:	7fefffff 	.word	0x7fefffff
 800924c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009250:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009254:	ee10 0a10 	vmov	r0, s0
 8009258:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800925c:	ee10 6a10 	vmov	r6, s0
 8009260:	460f      	mov	r7, r1
 8009262:	f7f7 fc33 	bl	8000acc <__aeabi_d2iz>
 8009266:	f7f7 f92d 	bl	80004c4 <__aeabi_i2d>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4630      	mov	r0, r6
 8009270:	4639      	mov	r1, r7
 8009272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009276:	f7f6 ffd7 	bl	8000228 <__aeabi_dsub>
 800927a:	4b22      	ldr	r3, [pc, #136]	; (8009304 <__ieee754_rem_pio2+0x40c>)
 800927c:	2200      	movs	r2, #0
 800927e:	f7f7 f98b 	bl	8000598 <__aeabi_dmul>
 8009282:	460f      	mov	r7, r1
 8009284:	4606      	mov	r6, r0
 8009286:	f7f7 fc21 	bl	8000acc <__aeabi_d2iz>
 800928a:	f7f7 f91b 	bl	80004c4 <__aeabi_i2d>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4630      	mov	r0, r6
 8009294:	4639      	mov	r1, r7
 8009296:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800929a:	f7f6 ffc5 	bl	8000228 <__aeabi_dsub>
 800929e:	4b19      	ldr	r3, [pc, #100]	; (8009304 <__ieee754_rem_pio2+0x40c>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	f7f7 f979 	bl	8000598 <__aeabi_dmul>
 80092a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092aa:	ad04      	add	r5, sp, #16
 80092ac:	f04f 0803 	mov.w	r8, #3
 80092b0:	46a9      	mov	r9, r5
 80092b2:	2600      	movs	r6, #0
 80092b4:	2700      	movs	r7, #0
 80092b6:	4632      	mov	r2, r6
 80092b8:	463b      	mov	r3, r7
 80092ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80092be:	46c3      	mov	fp, r8
 80092c0:	3d08      	subs	r5, #8
 80092c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80092c6:	f7f7 fbcf 	bl	8000a68 <__aeabi_dcmpeq>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d1f3      	bne.n	80092b6 <__ieee754_rem_pio2+0x3be>
 80092ce:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <__ieee754_rem_pio2+0x410>)
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	2302      	movs	r3, #2
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	4622      	mov	r2, r4
 80092d8:	465b      	mov	r3, fp
 80092da:	4651      	mov	r1, sl
 80092dc:	4648      	mov	r0, r9
 80092de:	f000 f8df 	bl	80094a0 <__kernel_rem_pio2>
 80092e2:	9b02      	ldr	r3, [sp, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	4683      	mov	fp, r0
 80092e8:	f6bf ae46 	bge.w	8008f78 <__ieee754_rem_pio2+0x80>
 80092ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 80092f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092f4:	f8ca 3004 	str.w	r3, [sl, #4]
 80092f8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80092fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009300:	e73a      	b.n	8009178 <__ieee754_rem_pio2+0x280>
 8009302:	bf00      	nop
 8009304:	41700000 	.word	0x41700000
 8009308:	0800a104 	.word	0x0800a104
 800930c:	00000000 	.word	0x00000000

08009310 <__kernel_cos>:
 8009310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	ec57 6b10 	vmov	r6, r7, d0
 8009318:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800931c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009320:	ed8d 1b00 	vstr	d1, [sp]
 8009324:	da07      	bge.n	8009336 <__kernel_cos+0x26>
 8009326:	ee10 0a10 	vmov	r0, s0
 800932a:	4639      	mov	r1, r7
 800932c:	f7f7 fbce 	bl	8000acc <__aeabi_d2iz>
 8009330:	2800      	cmp	r0, #0
 8009332:	f000 8088 	beq.w	8009446 <__kernel_cos+0x136>
 8009336:	4632      	mov	r2, r6
 8009338:	463b      	mov	r3, r7
 800933a:	4630      	mov	r0, r6
 800933c:	4639      	mov	r1, r7
 800933e:	f7f7 f92b 	bl	8000598 <__aeabi_dmul>
 8009342:	4b51      	ldr	r3, [pc, #324]	; (8009488 <__kernel_cos+0x178>)
 8009344:	2200      	movs	r2, #0
 8009346:	4604      	mov	r4, r0
 8009348:	460d      	mov	r5, r1
 800934a:	f7f7 f925 	bl	8000598 <__aeabi_dmul>
 800934e:	a340      	add	r3, pc, #256	; (adr r3, 8009450 <__kernel_cos+0x140>)
 8009350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009354:	4682      	mov	sl, r0
 8009356:	468b      	mov	fp, r1
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f7f7 f91c 	bl	8000598 <__aeabi_dmul>
 8009360:	a33d      	add	r3, pc, #244	; (adr r3, 8009458 <__kernel_cos+0x148>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	f7f6 ff61 	bl	800022c <__adddf3>
 800936a:	4622      	mov	r2, r4
 800936c:	462b      	mov	r3, r5
 800936e:	f7f7 f913 	bl	8000598 <__aeabi_dmul>
 8009372:	a33b      	add	r3, pc, #236	; (adr r3, 8009460 <__kernel_cos+0x150>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f6 ff56 	bl	8000228 <__aeabi_dsub>
 800937c:	4622      	mov	r2, r4
 800937e:	462b      	mov	r3, r5
 8009380:	f7f7 f90a 	bl	8000598 <__aeabi_dmul>
 8009384:	a338      	add	r3, pc, #224	; (adr r3, 8009468 <__kernel_cos+0x158>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f6 ff4f 	bl	800022c <__adddf3>
 800938e:	4622      	mov	r2, r4
 8009390:	462b      	mov	r3, r5
 8009392:	f7f7 f901 	bl	8000598 <__aeabi_dmul>
 8009396:	a336      	add	r3, pc, #216	; (adr r3, 8009470 <__kernel_cos+0x160>)
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f7f6 ff44 	bl	8000228 <__aeabi_dsub>
 80093a0:	4622      	mov	r2, r4
 80093a2:	462b      	mov	r3, r5
 80093a4:	f7f7 f8f8 	bl	8000598 <__aeabi_dmul>
 80093a8:	a333      	add	r3, pc, #204	; (adr r3, 8009478 <__kernel_cos+0x168>)
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	f7f6 ff3d 	bl	800022c <__adddf3>
 80093b2:	4622      	mov	r2, r4
 80093b4:	462b      	mov	r3, r5
 80093b6:	f7f7 f8ef 	bl	8000598 <__aeabi_dmul>
 80093ba:	4622      	mov	r2, r4
 80093bc:	462b      	mov	r3, r5
 80093be:	f7f7 f8eb 	bl	8000598 <__aeabi_dmul>
 80093c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	f7f7 f8e3 	bl	8000598 <__aeabi_dmul>
 80093d2:	460b      	mov	r3, r1
 80093d4:	4602      	mov	r2, r0
 80093d6:	4629      	mov	r1, r5
 80093d8:	4620      	mov	r0, r4
 80093da:	f7f6 ff25 	bl	8000228 <__aeabi_dsub>
 80093de:	4b2b      	ldr	r3, [pc, #172]	; (800948c <__kernel_cos+0x17c>)
 80093e0:	4598      	cmp	r8, r3
 80093e2:	4606      	mov	r6, r0
 80093e4:	460f      	mov	r7, r1
 80093e6:	dc10      	bgt.n	800940a <__kernel_cos+0xfa>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4650      	mov	r0, sl
 80093ee:	4659      	mov	r1, fp
 80093f0:	f7f6 ff1a 	bl	8000228 <__aeabi_dsub>
 80093f4:	460b      	mov	r3, r1
 80093f6:	4926      	ldr	r1, [pc, #152]	; (8009490 <__kernel_cos+0x180>)
 80093f8:	4602      	mov	r2, r0
 80093fa:	2000      	movs	r0, #0
 80093fc:	f7f6 ff14 	bl	8000228 <__aeabi_dsub>
 8009400:	ec41 0b10 	vmov	d0, r0, r1
 8009404:	b003      	add	sp, #12
 8009406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940a:	4b22      	ldr	r3, [pc, #136]	; (8009494 <__kernel_cos+0x184>)
 800940c:	4920      	ldr	r1, [pc, #128]	; (8009490 <__kernel_cos+0x180>)
 800940e:	4598      	cmp	r8, r3
 8009410:	bfcc      	ite	gt
 8009412:	4d21      	ldrgt	r5, [pc, #132]	; (8009498 <__kernel_cos+0x188>)
 8009414:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009418:	2400      	movs	r4, #0
 800941a:	4622      	mov	r2, r4
 800941c:	462b      	mov	r3, r5
 800941e:	2000      	movs	r0, #0
 8009420:	f7f6 ff02 	bl	8000228 <__aeabi_dsub>
 8009424:	4622      	mov	r2, r4
 8009426:	4680      	mov	r8, r0
 8009428:	4689      	mov	r9, r1
 800942a:	462b      	mov	r3, r5
 800942c:	4650      	mov	r0, sl
 800942e:	4659      	mov	r1, fp
 8009430:	f7f6 fefa 	bl	8000228 <__aeabi_dsub>
 8009434:	4632      	mov	r2, r6
 8009436:	463b      	mov	r3, r7
 8009438:	f7f6 fef6 	bl	8000228 <__aeabi_dsub>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4640      	mov	r0, r8
 8009442:	4649      	mov	r1, r9
 8009444:	e7da      	b.n	80093fc <__kernel_cos+0xec>
 8009446:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009480 <__kernel_cos+0x170>
 800944a:	e7db      	b.n	8009404 <__kernel_cos+0xf4>
 800944c:	f3af 8000 	nop.w
 8009450:	be8838d4 	.word	0xbe8838d4
 8009454:	bda8fae9 	.word	0xbda8fae9
 8009458:	bdb4b1c4 	.word	0xbdb4b1c4
 800945c:	3e21ee9e 	.word	0x3e21ee9e
 8009460:	809c52ad 	.word	0x809c52ad
 8009464:	3e927e4f 	.word	0x3e927e4f
 8009468:	19cb1590 	.word	0x19cb1590
 800946c:	3efa01a0 	.word	0x3efa01a0
 8009470:	16c15177 	.word	0x16c15177
 8009474:	3f56c16c 	.word	0x3f56c16c
 8009478:	5555554c 	.word	0x5555554c
 800947c:	3fa55555 	.word	0x3fa55555
 8009480:	00000000 	.word	0x00000000
 8009484:	3ff00000 	.word	0x3ff00000
 8009488:	3fe00000 	.word	0x3fe00000
 800948c:	3fd33332 	.word	0x3fd33332
 8009490:	3ff00000 	.word	0x3ff00000
 8009494:	3fe90000 	.word	0x3fe90000
 8009498:	3fd20000 	.word	0x3fd20000
 800949c:	00000000 	.word	0x00000000

080094a0 <__kernel_rem_pio2>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	ed2d 8b02 	vpush	{d8}
 80094a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80094ac:	f112 0f14 	cmn.w	r2, #20
 80094b0:	9308      	str	r3, [sp, #32]
 80094b2:	9101      	str	r1, [sp, #4]
 80094b4:	4bc6      	ldr	r3, [pc, #792]	; (80097d0 <__kernel_rem_pio2+0x330>)
 80094b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80094b8:	9009      	str	r0, [sp, #36]	; 0x24
 80094ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094be:	9304      	str	r3, [sp, #16]
 80094c0:	9b08      	ldr	r3, [sp, #32]
 80094c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80094c6:	bfa8      	it	ge
 80094c8:	1ed4      	subge	r4, r2, #3
 80094ca:	9306      	str	r3, [sp, #24]
 80094cc:	bfb2      	itee	lt
 80094ce:	2400      	movlt	r4, #0
 80094d0:	2318      	movge	r3, #24
 80094d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80094d6:	f06f 0317 	mvn.w	r3, #23
 80094da:	fb04 3303 	mla	r3, r4, r3, r3
 80094de:	eb03 0a02 	add.w	sl, r3, r2
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	9a06      	ldr	r2, [sp, #24]
 80094e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80097c0 <__kernel_rem_pio2+0x320>
 80094ea:	eb03 0802 	add.w	r8, r3, r2
 80094ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80094f0:	1aa7      	subs	r7, r4, r2
 80094f2:	ae20      	add	r6, sp, #128	; 0x80
 80094f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80094f8:	2500      	movs	r5, #0
 80094fa:	4545      	cmp	r5, r8
 80094fc:	dd18      	ble.n	8009530 <__kernel_rem_pio2+0x90>
 80094fe:	9b08      	ldr	r3, [sp, #32]
 8009500:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009504:	aa20      	add	r2, sp, #128	; 0x80
 8009506:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80097c0 <__kernel_rem_pio2+0x320>
 800950a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800950e:	f1c3 0301 	rsb	r3, r3, #1
 8009512:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009516:	9307      	str	r3, [sp, #28]
 8009518:	9b07      	ldr	r3, [sp, #28]
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	4443      	add	r3, r8
 800951e:	429a      	cmp	r2, r3
 8009520:	db2f      	blt.n	8009582 <__kernel_rem_pio2+0xe2>
 8009522:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009526:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800952a:	462f      	mov	r7, r5
 800952c:	2600      	movs	r6, #0
 800952e:	e01b      	b.n	8009568 <__kernel_rem_pio2+0xc8>
 8009530:	42ef      	cmn	r7, r5
 8009532:	d407      	bmi.n	8009544 <__kernel_rem_pio2+0xa4>
 8009534:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009538:	f7f6 ffc4 	bl	80004c4 <__aeabi_i2d>
 800953c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009540:	3501      	adds	r5, #1
 8009542:	e7da      	b.n	80094fa <__kernel_rem_pio2+0x5a>
 8009544:	ec51 0b18 	vmov	r0, r1, d8
 8009548:	e7f8      	b.n	800953c <__kernel_rem_pio2+0x9c>
 800954a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009552:	f7f7 f821 	bl	8000598 <__aeabi_dmul>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800955e:	f7f6 fe65 	bl	800022c <__adddf3>
 8009562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009566:	3601      	adds	r6, #1
 8009568:	9b06      	ldr	r3, [sp, #24]
 800956a:	429e      	cmp	r6, r3
 800956c:	f1a7 0708 	sub.w	r7, r7, #8
 8009570:	ddeb      	ble.n	800954a <__kernel_rem_pio2+0xaa>
 8009572:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009576:	3508      	adds	r5, #8
 8009578:	ecab 7b02 	vstmia	fp!, {d7}
 800957c:	f108 0801 	add.w	r8, r8, #1
 8009580:	e7ca      	b.n	8009518 <__kernel_rem_pio2+0x78>
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	aa0c      	add	r2, sp, #48	; 0x30
 8009586:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800958a:	930b      	str	r3, [sp, #44]	; 0x2c
 800958c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800958e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009592:	9c04      	ldr	r4, [sp, #16]
 8009594:	930a      	str	r3, [sp, #40]	; 0x28
 8009596:	ab98      	add	r3, sp, #608	; 0x260
 8009598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800959c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80095a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80095a4:	f8cd b008 	str.w	fp, [sp, #8]
 80095a8:	4625      	mov	r5, r4
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	dc78      	bgt.n	80096a0 <__kernel_rem_pio2+0x200>
 80095ae:	ec47 6b10 	vmov	d0, r6, r7
 80095b2:	4650      	mov	r0, sl
 80095b4:	f000 fbfc 	bl	8009db0 <scalbn>
 80095b8:	ec57 6b10 	vmov	r6, r7, d0
 80095bc:	2200      	movs	r2, #0
 80095be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80095c2:	ee10 0a10 	vmov	r0, s0
 80095c6:	4639      	mov	r1, r7
 80095c8:	f7f6 ffe6 	bl	8000598 <__aeabi_dmul>
 80095cc:	ec41 0b10 	vmov	d0, r0, r1
 80095d0:	f000 fb6e 	bl	8009cb0 <floor>
 80095d4:	4b7f      	ldr	r3, [pc, #508]	; (80097d4 <__kernel_rem_pio2+0x334>)
 80095d6:	ec51 0b10 	vmov	r0, r1, d0
 80095da:	2200      	movs	r2, #0
 80095dc:	f7f6 ffdc 	bl	8000598 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f6 fe1e 	bl	8000228 <__aeabi_dsub>
 80095ec:	460f      	mov	r7, r1
 80095ee:	4606      	mov	r6, r0
 80095f0:	f7f7 fa6c 	bl	8000acc <__aeabi_d2iz>
 80095f4:	9007      	str	r0, [sp, #28]
 80095f6:	f7f6 ff65 	bl	80004c4 <__aeabi_i2d>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4630      	mov	r0, r6
 8009600:	4639      	mov	r1, r7
 8009602:	f7f6 fe11 	bl	8000228 <__aeabi_dsub>
 8009606:	f1ba 0f00 	cmp.w	sl, #0
 800960a:	4606      	mov	r6, r0
 800960c:	460f      	mov	r7, r1
 800960e:	dd70      	ble.n	80096f2 <__kernel_rem_pio2+0x252>
 8009610:	1e62      	subs	r2, r4, #1
 8009612:	ab0c      	add	r3, sp, #48	; 0x30
 8009614:	9d07      	ldr	r5, [sp, #28]
 8009616:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800961a:	f1ca 0118 	rsb	r1, sl, #24
 800961e:	fa40 f301 	asr.w	r3, r0, r1
 8009622:	441d      	add	r5, r3
 8009624:	408b      	lsls	r3, r1
 8009626:	1ac0      	subs	r0, r0, r3
 8009628:	ab0c      	add	r3, sp, #48	; 0x30
 800962a:	9507      	str	r5, [sp, #28]
 800962c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009630:	f1ca 0317 	rsb	r3, sl, #23
 8009634:	fa40 f303 	asr.w	r3, r0, r3
 8009638:	9302      	str	r3, [sp, #8]
 800963a:	9b02      	ldr	r3, [sp, #8]
 800963c:	2b00      	cmp	r3, #0
 800963e:	dd66      	ble.n	800970e <__kernel_rem_pio2+0x26e>
 8009640:	9b07      	ldr	r3, [sp, #28]
 8009642:	2200      	movs	r2, #0
 8009644:	3301      	adds	r3, #1
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	4615      	mov	r5, r2
 800964a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800964e:	4294      	cmp	r4, r2
 8009650:	f300 8099 	bgt.w	8009786 <__kernel_rem_pio2+0x2e6>
 8009654:	f1ba 0f00 	cmp.w	sl, #0
 8009658:	dd07      	ble.n	800966a <__kernel_rem_pio2+0x1ca>
 800965a:	f1ba 0f01 	cmp.w	sl, #1
 800965e:	f000 80a5 	beq.w	80097ac <__kernel_rem_pio2+0x30c>
 8009662:	f1ba 0f02 	cmp.w	sl, #2
 8009666:	f000 80c1 	beq.w	80097ec <__kernel_rem_pio2+0x34c>
 800966a:	9b02      	ldr	r3, [sp, #8]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d14e      	bne.n	800970e <__kernel_rem_pio2+0x26e>
 8009670:	4632      	mov	r2, r6
 8009672:	463b      	mov	r3, r7
 8009674:	4958      	ldr	r1, [pc, #352]	; (80097d8 <__kernel_rem_pio2+0x338>)
 8009676:	2000      	movs	r0, #0
 8009678:	f7f6 fdd6 	bl	8000228 <__aeabi_dsub>
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	2d00      	cmp	r5, #0
 8009682:	d044      	beq.n	800970e <__kernel_rem_pio2+0x26e>
 8009684:	4650      	mov	r0, sl
 8009686:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80097c8 <__kernel_rem_pio2+0x328>
 800968a:	f000 fb91 	bl	8009db0 <scalbn>
 800968e:	4630      	mov	r0, r6
 8009690:	4639      	mov	r1, r7
 8009692:	ec53 2b10 	vmov	r2, r3, d0
 8009696:	f7f6 fdc7 	bl	8000228 <__aeabi_dsub>
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	e036      	b.n	800970e <__kernel_rem_pio2+0x26e>
 80096a0:	4b4e      	ldr	r3, [pc, #312]	; (80097dc <__kernel_rem_pio2+0x33c>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	4630      	mov	r0, r6
 80096a6:	4639      	mov	r1, r7
 80096a8:	f7f6 ff76 	bl	8000598 <__aeabi_dmul>
 80096ac:	f7f7 fa0e 	bl	8000acc <__aeabi_d2iz>
 80096b0:	f7f6 ff08 	bl	80004c4 <__aeabi_i2d>
 80096b4:	4b4a      	ldr	r3, [pc, #296]	; (80097e0 <__kernel_rem_pio2+0x340>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	4680      	mov	r8, r0
 80096ba:	4689      	mov	r9, r1
 80096bc:	f7f6 ff6c 	bl	8000598 <__aeabi_dmul>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4630      	mov	r0, r6
 80096c6:	4639      	mov	r1, r7
 80096c8:	f7f6 fdae 	bl	8000228 <__aeabi_dsub>
 80096cc:	f7f7 f9fe 	bl	8000acc <__aeabi_d2iz>
 80096d0:	9b02      	ldr	r3, [sp, #8]
 80096d2:	f843 0b04 	str.w	r0, [r3], #4
 80096d6:	3d01      	subs	r5, #1
 80096d8:	9302      	str	r3, [sp, #8]
 80096da:	ab70      	add	r3, sp, #448	; 0x1c0
 80096dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	4640      	mov	r0, r8
 80096e6:	4649      	mov	r1, r9
 80096e8:	f7f6 fda0 	bl	800022c <__adddf3>
 80096ec:	4606      	mov	r6, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	e75b      	b.n	80095aa <__kernel_rem_pio2+0x10a>
 80096f2:	d105      	bne.n	8009700 <__kernel_rem_pio2+0x260>
 80096f4:	1e63      	subs	r3, r4, #1
 80096f6:	aa0c      	add	r2, sp, #48	; 0x30
 80096f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80096fc:	15c3      	asrs	r3, r0, #23
 80096fe:	e79b      	b.n	8009638 <__kernel_rem_pio2+0x198>
 8009700:	4b38      	ldr	r3, [pc, #224]	; (80097e4 <__kernel_rem_pio2+0x344>)
 8009702:	2200      	movs	r2, #0
 8009704:	f7f7 f9ce 	bl	8000aa4 <__aeabi_dcmpge>
 8009708:	2800      	cmp	r0, #0
 800970a:	d139      	bne.n	8009780 <__kernel_rem_pio2+0x2e0>
 800970c:	9002      	str	r0, [sp, #8]
 800970e:	2200      	movs	r2, #0
 8009710:	2300      	movs	r3, #0
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	f7f7 f9a7 	bl	8000a68 <__aeabi_dcmpeq>
 800971a:	2800      	cmp	r0, #0
 800971c:	f000 80b4 	beq.w	8009888 <__kernel_rem_pio2+0x3e8>
 8009720:	f104 3bff 	add.w	fp, r4, #4294967295
 8009724:	465b      	mov	r3, fp
 8009726:	2200      	movs	r2, #0
 8009728:	9904      	ldr	r1, [sp, #16]
 800972a:	428b      	cmp	r3, r1
 800972c:	da65      	bge.n	80097fa <__kernel_rem_pio2+0x35a>
 800972e:	2a00      	cmp	r2, #0
 8009730:	d07b      	beq.n	800982a <__kernel_rem_pio2+0x38a>
 8009732:	ab0c      	add	r3, sp, #48	; 0x30
 8009734:	f1aa 0a18 	sub.w	sl, sl, #24
 8009738:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 80a0 	beq.w	8009882 <__kernel_rem_pio2+0x3e2>
 8009742:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80097c8 <__kernel_rem_pio2+0x328>
 8009746:	4650      	mov	r0, sl
 8009748:	f000 fb32 	bl	8009db0 <scalbn>
 800974c:	4f23      	ldr	r7, [pc, #140]	; (80097dc <__kernel_rem_pio2+0x33c>)
 800974e:	ec55 4b10 	vmov	r4, r5, d0
 8009752:	46d8      	mov	r8, fp
 8009754:	2600      	movs	r6, #0
 8009756:	f1b8 0f00 	cmp.w	r8, #0
 800975a:	f280 80cf 	bge.w	80098fc <__kernel_rem_pio2+0x45c>
 800975e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80097c0 <__kernel_rem_pio2+0x320>
 8009762:	465f      	mov	r7, fp
 8009764:	f04f 0800 	mov.w	r8, #0
 8009768:	2f00      	cmp	r7, #0
 800976a:	f2c0 80fd 	blt.w	8009968 <__kernel_rem_pio2+0x4c8>
 800976e:	ab70      	add	r3, sp, #448	; 0x1c0
 8009770:	f8df a074 	ldr.w	sl, [pc, #116]	; 80097e8 <__kernel_rem_pio2+0x348>
 8009774:	ec55 4b18 	vmov	r4, r5, d8
 8009778:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800977c:	2600      	movs	r6, #0
 800977e:	e0e5      	b.n	800994c <__kernel_rem_pio2+0x4ac>
 8009780:	2302      	movs	r3, #2
 8009782:	9302      	str	r3, [sp, #8]
 8009784:	e75c      	b.n	8009640 <__kernel_rem_pio2+0x1a0>
 8009786:	f8db 3000 	ldr.w	r3, [fp]
 800978a:	b955      	cbnz	r5, 80097a2 <__kernel_rem_pio2+0x302>
 800978c:	b123      	cbz	r3, 8009798 <__kernel_rem_pio2+0x2f8>
 800978e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009792:	f8cb 3000 	str.w	r3, [fp]
 8009796:	2301      	movs	r3, #1
 8009798:	3201      	adds	r2, #1
 800979a:	f10b 0b04 	add.w	fp, fp, #4
 800979e:	461d      	mov	r5, r3
 80097a0:	e755      	b.n	800964e <__kernel_rem_pio2+0x1ae>
 80097a2:	1acb      	subs	r3, r1, r3
 80097a4:	f8cb 3000 	str.w	r3, [fp]
 80097a8:	462b      	mov	r3, r5
 80097aa:	e7f5      	b.n	8009798 <__kernel_rem_pio2+0x2f8>
 80097ac:	1e62      	subs	r2, r4, #1
 80097ae:	ab0c      	add	r3, sp, #48	; 0x30
 80097b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80097b8:	a90c      	add	r1, sp, #48	; 0x30
 80097ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80097be:	e754      	b.n	800966a <__kernel_rem_pio2+0x1ca>
	...
 80097cc:	3ff00000 	.word	0x3ff00000
 80097d0:	0800a250 	.word	0x0800a250
 80097d4:	40200000 	.word	0x40200000
 80097d8:	3ff00000 	.word	0x3ff00000
 80097dc:	3e700000 	.word	0x3e700000
 80097e0:	41700000 	.word	0x41700000
 80097e4:	3fe00000 	.word	0x3fe00000
 80097e8:	0800a210 	.word	0x0800a210
 80097ec:	1e62      	subs	r2, r4, #1
 80097ee:	ab0c      	add	r3, sp, #48	; 0x30
 80097f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80097f8:	e7de      	b.n	80097b8 <__kernel_rem_pio2+0x318>
 80097fa:	a90c      	add	r1, sp, #48	; 0x30
 80097fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009800:	3b01      	subs	r3, #1
 8009802:	430a      	orrs	r2, r1
 8009804:	e790      	b.n	8009728 <__kernel_rem_pio2+0x288>
 8009806:	3301      	adds	r3, #1
 8009808:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800980c:	2900      	cmp	r1, #0
 800980e:	d0fa      	beq.n	8009806 <__kernel_rem_pio2+0x366>
 8009810:	9a08      	ldr	r2, [sp, #32]
 8009812:	18e3      	adds	r3, r4, r3
 8009814:	18a6      	adds	r6, r4, r2
 8009816:	aa20      	add	r2, sp, #128	; 0x80
 8009818:	1c65      	adds	r5, r4, #1
 800981a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800981e:	9302      	str	r3, [sp, #8]
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	42ab      	cmp	r3, r5
 8009824:	da04      	bge.n	8009830 <__kernel_rem_pio2+0x390>
 8009826:	461c      	mov	r4, r3
 8009828:	e6b5      	b.n	8009596 <__kernel_rem_pio2+0xf6>
 800982a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800982c:	2301      	movs	r3, #1
 800982e:	e7eb      	b.n	8009808 <__kernel_rem_pio2+0x368>
 8009830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009836:	f7f6 fe45 	bl	80004c4 <__aeabi_i2d>
 800983a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800983e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009840:	46b3      	mov	fp, r6
 8009842:	461c      	mov	r4, r3
 8009844:	2700      	movs	r7, #0
 8009846:	f04f 0800 	mov.w	r8, #0
 800984a:	f04f 0900 	mov.w	r9, #0
 800984e:	9b06      	ldr	r3, [sp, #24]
 8009850:	429f      	cmp	r7, r3
 8009852:	dd06      	ble.n	8009862 <__kernel_rem_pio2+0x3c2>
 8009854:	ab70      	add	r3, sp, #448	; 0x1c0
 8009856:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800985a:	e9c3 8900 	strd	r8, r9, [r3]
 800985e:	3501      	adds	r5, #1
 8009860:	e7de      	b.n	8009820 <__kernel_rem_pio2+0x380>
 8009862:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009866:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800986a:	f7f6 fe95 	bl	8000598 <__aeabi_dmul>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4640      	mov	r0, r8
 8009874:	4649      	mov	r1, r9
 8009876:	f7f6 fcd9 	bl	800022c <__adddf3>
 800987a:	3701      	adds	r7, #1
 800987c:	4680      	mov	r8, r0
 800987e:	4689      	mov	r9, r1
 8009880:	e7e5      	b.n	800984e <__kernel_rem_pio2+0x3ae>
 8009882:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009886:	e754      	b.n	8009732 <__kernel_rem_pio2+0x292>
 8009888:	ec47 6b10 	vmov	d0, r6, r7
 800988c:	f1ca 0000 	rsb	r0, sl, #0
 8009890:	f000 fa8e 	bl	8009db0 <scalbn>
 8009894:	ec57 6b10 	vmov	r6, r7, d0
 8009898:	4b9f      	ldr	r3, [pc, #636]	; (8009b18 <__kernel_rem_pio2+0x678>)
 800989a:	ee10 0a10 	vmov	r0, s0
 800989e:	2200      	movs	r2, #0
 80098a0:	4639      	mov	r1, r7
 80098a2:	f7f7 f8ff 	bl	8000aa4 <__aeabi_dcmpge>
 80098a6:	b300      	cbz	r0, 80098ea <__kernel_rem_pio2+0x44a>
 80098a8:	4b9c      	ldr	r3, [pc, #624]	; (8009b1c <__kernel_rem_pio2+0x67c>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	4630      	mov	r0, r6
 80098ae:	4639      	mov	r1, r7
 80098b0:	f7f6 fe72 	bl	8000598 <__aeabi_dmul>
 80098b4:	f7f7 f90a 	bl	8000acc <__aeabi_d2iz>
 80098b8:	4605      	mov	r5, r0
 80098ba:	f7f6 fe03 	bl	80004c4 <__aeabi_i2d>
 80098be:	4b96      	ldr	r3, [pc, #600]	; (8009b18 <__kernel_rem_pio2+0x678>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	f7f6 fe69 	bl	8000598 <__aeabi_dmul>
 80098c6:	460b      	mov	r3, r1
 80098c8:	4602      	mov	r2, r0
 80098ca:	4639      	mov	r1, r7
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7f6 fcab 	bl	8000228 <__aeabi_dsub>
 80098d2:	f7f7 f8fb 	bl	8000acc <__aeabi_d2iz>
 80098d6:	f104 0b01 	add.w	fp, r4, #1
 80098da:	ab0c      	add	r3, sp, #48	; 0x30
 80098dc:	f10a 0a18 	add.w	sl, sl, #24
 80098e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80098e4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80098e8:	e72b      	b.n	8009742 <__kernel_rem_pio2+0x2a2>
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f7 f8ed 	bl	8000acc <__aeabi_d2iz>
 80098f2:	ab0c      	add	r3, sp, #48	; 0x30
 80098f4:	46a3      	mov	fp, r4
 80098f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80098fa:	e722      	b.n	8009742 <__kernel_rem_pio2+0x2a2>
 80098fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80098fe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009902:	ab0c      	add	r3, sp, #48	; 0x30
 8009904:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009908:	f7f6 fddc 	bl	80004c4 <__aeabi_i2d>
 800990c:	4622      	mov	r2, r4
 800990e:	462b      	mov	r3, r5
 8009910:	f7f6 fe42 	bl	8000598 <__aeabi_dmul>
 8009914:	4632      	mov	r2, r6
 8009916:	e9c9 0100 	strd	r0, r1, [r9]
 800991a:	463b      	mov	r3, r7
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	f7f6 fe3a 	bl	8000598 <__aeabi_dmul>
 8009924:	f108 38ff 	add.w	r8, r8, #4294967295
 8009928:	4604      	mov	r4, r0
 800992a:	460d      	mov	r5, r1
 800992c:	e713      	b.n	8009756 <__kernel_rem_pio2+0x2b6>
 800992e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009932:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009936:	f7f6 fe2f 	bl	8000598 <__aeabi_dmul>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4620      	mov	r0, r4
 8009940:	4629      	mov	r1, r5
 8009942:	f7f6 fc73 	bl	800022c <__adddf3>
 8009946:	3601      	adds	r6, #1
 8009948:	4604      	mov	r4, r0
 800994a:	460d      	mov	r5, r1
 800994c:	9b04      	ldr	r3, [sp, #16]
 800994e:	429e      	cmp	r6, r3
 8009950:	dc01      	bgt.n	8009956 <__kernel_rem_pio2+0x4b6>
 8009952:	45b0      	cmp	r8, r6
 8009954:	daeb      	bge.n	800992e <__kernel_rem_pio2+0x48e>
 8009956:	ab48      	add	r3, sp, #288	; 0x120
 8009958:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800995c:	e9c3 4500 	strd	r4, r5, [r3]
 8009960:	3f01      	subs	r7, #1
 8009962:	f108 0801 	add.w	r8, r8, #1
 8009966:	e6ff      	b.n	8009768 <__kernel_rem_pio2+0x2c8>
 8009968:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800996a:	2b02      	cmp	r3, #2
 800996c:	dc0b      	bgt.n	8009986 <__kernel_rem_pio2+0x4e6>
 800996e:	2b00      	cmp	r3, #0
 8009970:	dc6e      	bgt.n	8009a50 <__kernel_rem_pio2+0x5b0>
 8009972:	d045      	beq.n	8009a00 <__kernel_rem_pio2+0x560>
 8009974:	9b07      	ldr	r3, [sp, #28]
 8009976:	f003 0007 	and.w	r0, r3, #7
 800997a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800997e:	ecbd 8b02 	vpop	{d8}
 8009982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009986:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009988:	2b03      	cmp	r3, #3
 800998a:	d1f3      	bne.n	8009974 <__kernel_rem_pio2+0x4d4>
 800998c:	ab48      	add	r3, sp, #288	; 0x120
 800998e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009992:	46d0      	mov	r8, sl
 8009994:	46d9      	mov	r9, fp
 8009996:	f1b9 0f00 	cmp.w	r9, #0
 800999a:	f1a8 0808 	sub.w	r8, r8, #8
 800999e:	dc64      	bgt.n	8009a6a <__kernel_rem_pio2+0x5ca>
 80099a0:	465c      	mov	r4, fp
 80099a2:	2c01      	cmp	r4, #1
 80099a4:	f1aa 0a08 	sub.w	sl, sl, #8
 80099a8:	dc7e      	bgt.n	8009aa8 <__kernel_rem_pio2+0x608>
 80099aa:	2000      	movs	r0, #0
 80099ac:	2100      	movs	r1, #0
 80099ae:	f1bb 0f01 	cmp.w	fp, #1
 80099b2:	f300 8097 	bgt.w	8009ae4 <__kernel_rem_pio2+0x644>
 80099b6:	9b02      	ldr	r3, [sp, #8]
 80099b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80099bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f040 8099 	bne.w	8009af8 <__kernel_rem_pio2+0x658>
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	e9c3 5600 	strd	r5, r6, [r3]
 80099cc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80099d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80099d4:	e7ce      	b.n	8009974 <__kernel_rem_pio2+0x4d4>
 80099d6:	ab48      	add	r3, sp, #288	; 0x120
 80099d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	f7f6 fc24 	bl	800022c <__adddf3>
 80099e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099e8:	f1bb 0f00 	cmp.w	fp, #0
 80099ec:	daf3      	bge.n	80099d6 <__kernel_rem_pio2+0x536>
 80099ee:	9b02      	ldr	r3, [sp, #8]
 80099f0:	b113      	cbz	r3, 80099f8 <__kernel_rem_pio2+0x558>
 80099f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099f6:	4619      	mov	r1, r3
 80099f8:	9b01      	ldr	r3, [sp, #4]
 80099fa:	e9c3 0100 	strd	r0, r1, [r3]
 80099fe:	e7b9      	b.n	8009974 <__kernel_rem_pio2+0x4d4>
 8009a00:	2000      	movs	r0, #0
 8009a02:	2100      	movs	r1, #0
 8009a04:	e7f0      	b.n	80099e8 <__kernel_rem_pio2+0x548>
 8009a06:	ab48      	add	r3, sp, #288	; 0x120
 8009a08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fc0c 	bl	800022c <__adddf3>
 8009a14:	3c01      	subs	r4, #1
 8009a16:	2c00      	cmp	r4, #0
 8009a18:	daf5      	bge.n	8009a06 <__kernel_rem_pio2+0x566>
 8009a1a:	9b02      	ldr	r3, [sp, #8]
 8009a1c:	b1e3      	cbz	r3, 8009a58 <__kernel_rem_pio2+0x5b8>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a24:	9c01      	ldr	r4, [sp, #4]
 8009a26:	e9c4 2300 	strd	r2, r3, [r4]
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009a32:	f7f6 fbf9 	bl	8000228 <__aeabi_dsub>
 8009a36:	ad4a      	add	r5, sp, #296	; 0x128
 8009a38:	2401      	movs	r4, #1
 8009a3a:	45a3      	cmp	fp, r4
 8009a3c:	da0f      	bge.n	8009a5e <__kernel_rem_pio2+0x5be>
 8009a3e:	9b02      	ldr	r3, [sp, #8]
 8009a40:	b113      	cbz	r3, 8009a48 <__kernel_rem_pio2+0x5a8>
 8009a42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a46:	4619      	mov	r1, r3
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009a4e:	e791      	b.n	8009974 <__kernel_rem_pio2+0x4d4>
 8009a50:	465c      	mov	r4, fp
 8009a52:	2000      	movs	r0, #0
 8009a54:	2100      	movs	r1, #0
 8009a56:	e7de      	b.n	8009a16 <__kernel_rem_pio2+0x576>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	e7e2      	b.n	8009a24 <__kernel_rem_pio2+0x584>
 8009a5e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009a62:	f7f6 fbe3 	bl	800022c <__adddf3>
 8009a66:	3401      	adds	r4, #1
 8009a68:	e7e7      	b.n	8009a3a <__kernel_rem_pio2+0x59a>
 8009a6a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009a6e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009a72:	4620      	mov	r0, r4
 8009a74:	4632      	mov	r2, r6
 8009a76:	463b      	mov	r3, r7
 8009a78:	4629      	mov	r1, r5
 8009a7a:	f7f6 fbd7 	bl	800022c <__adddf3>
 8009a7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f6 fbcd 	bl	8000228 <__aeabi_dsub>
 8009a8e:	4632      	mov	r2, r6
 8009a90:	463b      	mov	r3, r7
 8009a92:	f7f6 fbcb 	bl	800022c <__adddf3>
 8009a96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a9a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009a9e:	ed88 7b00 	vstr	d7, [r8]
 8009aa2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009aa6:	e776      	b.n	8009996 <__kernel_rem_pio2+0x4f6>
 8009aa8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009aac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	4632      	mov	r2, r6
 8009ab4:	463b      	mov	r3, r7
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	f7f6 fbb8 	bl	800022c <__adddf3>
 8009abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	f7f6 fbae 	bl	8000228 <__aeabi_dsub>
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	f7f6 fbac 	bl	800022c <__adddf3>
 8009ad4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009ad8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009adc:	ed8a 7b00 	vstr	d7, [sl]
 8009ae0:	3c01      	subs	r4, #1
 8009ae2:	e75e      	b.n	80099a2 <__kernel_rem_pio2+0x502>
 8009ae4:	ab48      	add	r3, sp, #288	; 0x120
 8009ae6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f7f6 fb9d 	bl	800022c <__adddf3>
 8009af2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009af6:	e75a      	b.n	80099ae <__kernel_rem_pio2+0x50e>
 8009af8:	9b01      	ldr	r3, [sp, #4]
 8009afa:	9a01      	ldr	r2, [sp, #4]
 8009afc:	601d      	str	r5, [r3, #0]
 8009afe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009b02:	605c      	str	r4, [r3, #4]
 8009b04:	609f      	str	r7, [r3, #8]
 8009b06:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009b0a:	60d3      	str	r3, [r2, #12]
 8009b0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b10:	6110      	str	r0, [r2, #16]
 8009b12:	6153      	str	r3, [r2, #20]
 8009b14:	e72e      	b.n	8009974 <__kernel_rem_pio2+0x4d4>
 8009b16:	bf00      	nop
 8009b18:	41700000 	.word	0x41700000
 8009b1c:	3e700000 	.word	0x3e700000

08009b20 <__kernel_sin>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	ed2d 8b04 	vpush	{d8-d9}
 8009b28:	eeb0 8a41 	vmov.f32	s16, s2
 8009b2c:	eef0 8a61 	vmov.f32	s17, s3
 8009b30:	ec55 4b10 	vmov	r4, r5, d0
 8009b34:	b083      	sub	sp, #12
 8009b36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009b3e:	9001      	str	r0, [sp, #4]
 8009b40:	da06      	bge.n	8009b50 <__kernel_sin+0x30>
 8009b42:	ee10 0a10 	vmov	r0, s0
 8009b46:	4629      	mov	r1, r5
 8009b48:	f7f6 ffc0 	bl	8000acc <__aeabi_d2iz>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d051      	beq.n	8009bf4 <__kernel_sin+0xd4>
 8009b50:	4622      	mov	r2, r4
 8009b52:	462b      	mov	r3, r5
 8009b54:	4620      	mov	r0, r4
 8009b56:	4629      	mov	r1, r5
 8009b58:	f7f6 fd1e 	bl	8000598 <__aeabi_dmul>
 8009b5c:	4682      	mov	sl, r0
 8009b5e:	468b      	mov	fp, r1
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4620      	mov	r0, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7f6 fd16 	bl	8000598 <__aeabi_dmul>
 8009b6c:	a341      	add	r3, pc, #260	; (adr r3, 8009c74 <__kernel_sin+0x154>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	4680      	mov	r8, r0
 8009b74:	4689      	mov	r9, r1
 8009b76:	4650      	mov	r0, sl
 8009b78:	4659      	mov	r1, fp
 8009b7a:	f7f6 fd0d 	bl	8000598 <__aeabi_dmul>
 8009b7e:	a33f      	add	r3, pc, #252	; (adr r3, 8009c7c <__kernel_sin+0x15c>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f7f6 fb50 	bl	8000228 <__aeabi_dsub>
 8009b88:	4652      	mov	r2, sl
 8009b8a:	465b      	mov	r3, fp
 8009b8c:	f7f6 fd04 	bl	8000598 <__aeabi_dmul>
 8009b90:	a33c      	add	r3, pc, #240	; (adr r3, 8009c84 <__kernel_sin+0x164>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	f7f6 fb49 	bl	800022c <__adddf3>
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	f7f6 fcfb 	bl	8000598 <__aeabi_dmul>
 8009ba2:	a33a      	add	r3, pc, #232	; (adr r3, 8009c8c <__kernel_sin+0x16c>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f7f6 fb3e 	bl	8000228 <__aeabi_dsub>
 8009bac:	4652      	mov	r2, sl
 8009bae:	465b      	mov	r3, fp
 8009bb0:	f7f6 fcf2 	bl	8000598 <__aeabi_dmul>
 8009bb4:	a337      	add	r3, pc, #220	; (adr r3, 8009c94 <__kernel_sin+0x174>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f7f6 fb37 	bl	800022c <__adddf3>
 8009bbe:	9b01      	ldr	r3, [sp, #4]
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	460f      	mov	r7, r1
 8009bc4:	b9eb      	cbnz	r3, 8009c02 <__kernel_sin+0xe2>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4650      	mov	r0, sl
 8009bcc:	4659      	mov	r1, fp
 8009bce:	f7f6 fce3 	bl	8000598 <__aeabi_dmul>
 8009bd2:	a325      	add	r3, pc, #148	; (adr r3, 8009c68 <__kernel_sin+0x148>)
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	f7f6 fb26 	bl	8000228 <__aeabi_dsub>
 8009bdc:	4642      	mov	r2, r8
 8009bde:	464b      	mov	r3, r9
 8009be0:	f7f6 fcda 	bl	8000598 <__aeabi_dmul>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4620      	mov	r0, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fb1e 	bl	800022c <__adddf3>
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	460d      	mov	r5, r1
 8009bf4:	ec45 4b10 	vmov	d0, r4, r5
 8009bf8:	b003      	add	sp, #12
 8009bfa:	ecbd 8b04 	vpop	{d8-d9}
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	4b1b      	ldr	r3, [pc, #108]	; (8009c70 <__kernel_sin+0x150>)
 8009c04:	ec51 0b18 	vmov	r0, r1, d8
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f7f6 fcc5 	bl	8000598 <__aeabi_dmul>
 8009c0e:	4632      	mov	r2, r6
 8009c10:	ec41 0b19 	vmov	d9, r0, r1
 8009c14:	463b      	mov	r3, r7
 8009c16:	4640      	mov	r0, r8
 8009c18:	4649      	mov	r1, r9
 8009c1a:	f7f6 fcbd 	bl	8000598 <__aeabi_dmul>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	ec51 0b19 	vmov	r0, r1, d9
 8009c26:	f7f6 faff 	bl	8000228 <__aeabi_dsub>
 8009c2a:	4652      	mov	r2, sl
 8009c2c:	465b      	mov	r3, fp
 8009c2e:	f7f6 fcb3 	bl	8000598 <__aeabi_dmul>
 8009c32:	ec53 2b18 	vmov	r2, r3, d8
 8009c36:	f7f6 faf7 	bl	8000228 <__aeabi_dsub>
 8009c3a:	a30b      	add	r3, pc, #44	; (adr r3, 8009c68 <__kernel_sin+0x148>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	4606      	mov	r6, r0
 8009c42:	460f      	mov	r7, r1
 8009c44:	4640      	mov	r0, r8
 8009c46:	4649      	mov	r1, r9
 8009c48:	f7f6 fca6 	bl	8000598 <__aeabi_dmul>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 faea 	bl	800022c <__adddf3>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7f6 fae2 	bl	8000228 <__aeabi_dsub>
 8009c64:	e7c4      	b.n	8009bf0 <__kernel_sin+0xd0>
 8009c66:	bf00      	nop
 8009c68:	55555549 	.word	0x55555549
 8009c6c:	3fc55555 	.word	0x3fc55555
 8009c70:	3fe00000 	.word	0x3fe00000
 8009c74:	5acfd57c 	.word	0x5acfd57c
 8009c78:	3de5d93a 	.word	0x3de5d93a
 8009c7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c80:	3e5ae5e6 	.word	0x3e5ae5e6
 8009c84:	57b1fe7d 	.word	0x57b1fe7d
 8009c88:	3ec71de3 	.word	0x3ec71de3
 8009c8c:	19c161d5 	.word	0x19c161d5
 8009c90:	3f2a01a0 	.word	0x3f2a01a0
 8009c94:	1110f8a6 	.word	0x1110f8a6
 8009c98:	3f811111 	.word	0x3f811111

08009c9c <fabs>:
 8009c9c:	ec51 0b10 	vmov	r0, r1, d0
 8009ca0:	ee10 2a10 	vmov	r2, s0
 8009ca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ca8:	ec43 2b10 	vmov	d0, r2, r3
 8009cac:	4770      	bx	lr
	...

08009cb0 <floor>:
 8009cb0:	ec51 0b10 	vmov	r0, r1, d0
 8009cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009cbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009cc0:	2e13      	cmp	r6, #19
 8009cc2:	ee10 5a10 	vmov	r5, s0
 8009cc6:	ee10 8a10 	vmov	r8, s0
 8009cca:	460c      	mov	r4, r1
 8009ccc:	dc32      	bgt.n	8009d34 <floor+0x84>
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	da14      	bge.n	8009cfc <floor+0x4c>
 8009cd2:	a333      	add	r3, pc, #204	; (adr r3, 8009da0 <floor+0xf0>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 faa8 	bl	800022c <__adddf3>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f7f6 feea 	bl	8000ab8 <__aeabi_dcmpgt>
 8009ce4:	b138      	cbz	r0, 8009cf6 <floor+0x46>
 8009ce6:	2c00      	cmp	r4, #0
 8009ce8:	da57      	bge.n	8009d9a <floor+0xea>
 8009cea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009cee:	431d      	orrs	r5, r3
 8009cf0:	d001      	beq.n	8009cf6 <floor+0x46>
 8009cf2:	4c2d      	ldr	r4, [pc, #180]	; (8009da8 <floor+0xf8>)
 8009cf4:	2500      	movs	r5, #0
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	e025      	b.n	8009d48 <floor+0x98>
 8009cfc:	4f2b      	ldr	r7, [pc, #172]	; (8009dac <floor+0xfc>)
 8009cfe:	4137      	asrs	r7, r6
 8009d00:	ea01 0307 	and.w	r3, r1, r7
 8009d04:	4303      	orrs	r3, r0
 8009d06:	d01f      	beq.n	8009d48 <floor+0x98>
 8009d08:	a325      	add	r3, pc, #148	; (adr r3, 8009da0 <floor+0xf0>)
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	f7f6 fa8d 	bl	800022c <__adddf3>
 8009d12:	2200      	movs	r2, #0
 8009d14:	2300      	movs	r3, #0
 8009d16:	f7f6 fecf 	bl	8000ab8 <__aeabi_dcmpgt>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d0eb      	beq.n	8009cf6 <floor+0x46>
 8009d1e:	2c00      	cmp	r4, #0
 8009d20:	bfbe      	ittt	lt
 8009d22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009d26:	fa43 f606 	asrlt.w	r6, r3, r6
 8009d2a:	19a4      	addlt	r4, r4, r6
 8009d2c:	ea24 0407 	bic.w	r4, r4, r7
 8009d30:	2500      	movs	r5, #0
 8009d32:	e7e0      	b.n	8009cf6 <floor+0x46>
 8009d34:	2e33      	cmp	r6, #51	; 0x33
 8009d36:	dd0b      	ble.n	8009d50 <floor+0xa0>
 8009d38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009d3c:	d104      	bne.n	8009d48 <floor+0x98>
 8009d3e:	ee10 2a10 	vmov	r2, s0
 8009d42:	460b      	mov	r3, r1
 8009d44:	f7f6 fa72 	bl	800022c <__adddf3>
 8009d48:	ec41 0b10 	vmov	d0, r0, r1
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
 8009d58:	fa23 f707 	lsr.w	r7, r3, r7
 8009d5c:	4207      	tst	r7, r0
 8009d5e:	d0f3      	beq.n	8009d48 <floor+0x98>
 8009d60:	a30f      	add	r3, pc, #60	; (adr r3, 8009da0 <floor+0xf0>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f7f6 fa61 	bl	800022c <__adddf3>
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f7f6 fea3 	bl	8000ab8 <__aeabi_dcmpgt>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d0bf      	beq.n	8009cf6 <floor+0x46>
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	da02      	bge.n	8009d80 <floor+0xd0>
 8009d7a:	2e14      	cmp	r6, #20
 8009d7c:	d103      	bne.n	8009d86 <floor+0xd6>
 8009d7e:	3401      	adds	r4, #1
 8009d80:	ea25 0507 	bic.w	r5, r5, r7
 8009d84:	e7b7      	b.n	8009cf6 <floor+0x46>
 8009d86:	2301      	movs	r3, #1
 8009d88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009d8c:	fa03 f606 	lsl.w	r6, r3, r6
 8009d90:	4435      	add	r5, r6
 8009d92:	4545      	cmp	r5, r8
 8009d94:	bf38      	it	cc
 8009d96:	18e4      	addcc	r4, r4, r3
 8009d98:	e7f2      	b.n	8009d80 <floor+0xd0>
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	462c      	mov	r4, r5
 8009d9e:	e7aa      	b.n	8009cf6 <floor+0x46>
 8009da0:	8800759c 	.word	0x8800759c
 8009da4:	7e37e43c 	.word	0x7e37e43c
 8009da8:	bff00000 	.word	0xbff00000
 8009dac:	000fffff 	.word	0x000fffff

08009db0 <scalbn>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	ec55 4b10 	vmov	r4, r5, d0
 8009db6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009dba:	4606      	mov	r6, r0
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	b99a      	cbnz	r2, 8009de8 <scalbn+0x38>
 8009dc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009dc4:	4323      	orrs	r3, r4
 8009dc6:	d036      	beq.n	8009e36 <scalbn+0x86>
 8009dc8:	4b39      	ldr	r3, [pc, #228]	; (8009eb0 <scalbn+0x100>)
 8009dca:	4629      	mov	r1, r5
 8009dcc:	ee10 0a10 	vmov	r0, s0
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f7f6 fbe1 	bl	8000598 <__aeabi_dmul>
 8009dd6:	4b37      	ldr	r3, [pc, #220]	; (8009eb4 <scalbn+0x104>)
 8009dd8:	429e      	cmp	r6, r3
 8009dda:	4604      	mov	r4, r0
 8009ddc:	460d      	mov	r5, r1
 8009dde:	da10      	bge.n	8009e02 <scalbn+0x52>
 8009de0:	a32b      	add	r3, pc, #172	; (adr r3, 8009e90 <scalbn+0xe0>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	e03a      	b.n	8009e5e <scalbn+0xae>
 8009de8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009dec:	428a      	cmp	r2, r1
 8009dee:	d10c      	bne.n	8009e0a <scalbn+0x5a>
 8009df0:	ee10 2a10 	vmov	r2, s0
 8009df4:	4620      	mov	r0, r4
 8009df6:	4629      	mov	r1, r5
 8009df8:	f7f6 fa18 	bl	800022c <__adddf3>
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	460d      	mov	r5, r1
 8009e00:	e019      	b.n	8009e36 <scalbn+0x86>
 8009e02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e06:	460b      	mov	r3, r1
 8009e08:	3a36      	subs	r2, #54	; 0x36
 8009e0a:	4432      	add	r2, r6
 8009e0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009e10:	428a      	cmp	r2, r1
 8009e12:	dd08      	ble.n	8009e26 <scalbn+0x76>
 8009e14:	2d00      	cmp	r5, #0
 8009e16:	a120      	add	r1, pc, #128	; (adr r1, 8009e98 <scalbn+0xe8>)
 8009e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e1c:	da1c      	bge.n	8009e58 <scalbn+0xa8>
 8009e1e:	a120      	add	r1, pc, #128	; (adr r1, 8009ea0 <scalbn+0xf0>)
 8009e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e24:	e018      	b.n	8009e58 <scalbn+0xa8>
 8009e26:	2a00      	cmp	r2, #0
 8009e28:	dd08      	ble.n	8009e3c <scalbn+0x8c>
 8009e2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009e36:	ec45 4b10 	vmov	d0, r4, r5
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009e40:	da19      	bge.n	8009e76 <scalbn+0xc6>
 8009e42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e46:	429e      	cmp	r6, r3
 8009e48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009e4c:	dd0a      	ble.n	8009e64 <scalbn+0xb4>
 8009e4e:	a112      	add	r1, pc, #72	; (adr r1, 8009e98 <scalbn+0xe8>)
 8009e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e2      	bne.n	8009e1e <scalbn+0x6e>
 8009e58:	a30f      	add	r3, pc, #60	; (adr r3, 8009e98 <scalbn+0xe8>)
 8009e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5e:	f7f6 fb9b 	bl	8000598 <__aeabi_dmul>
 8009e62:	e7cb      	b.n	8009dfc <scalbn+0x4c>
 8009e64:	a10a      	add	r1, pc, #40	; (adr r1, 8009e90 <scalbn+0xe0>)
 8009e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d0b8      	beq.n	8009de0 <scalbn+0x30>
 8009e6e:	a10e      	add	r1, pc, #56	; (adr r1, 8009ea8 <scalbn+0xf8>)
 8009e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e74:	e7b4      	b.n	8009de0 <scalbn+0x30>
 8009e76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e7a:	3236      	adds	r2, #54	; 0x36
 8009e7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009e84:	4620      	mov	r0, r4
 8009e86:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <scalbn+0x108>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	e7e8      	b.n	8009e5e <scalbn+0xae>
 8009e8c:	f3af 8000 	nop.w
 8009e90:	c2f8f359 	.word	0xc2f8f359
 8009e94:	01a56e1f 	.word	0x01a56e1f
 8009e98:	8800759c 	.word	0x8800759c
 8009e9c:	7e37e43c 	.word	0x7e37e43c
 8009ea0:	8800759c 	.word	0x8800759c
 8009ea4:	fe37e43c 	.word	0xfe37e43c
 8009ea8:	c2f8f359 	.word	0xc2f8f359
 8009eac:	81a56e1f 	.word	0x81a56e1f
 8009eb0:	43500000 	.word	0x43500000
 8009eb4:	ffff3cb0 	.word	0xffff3cb0
 8009eb8:	3c900000 	.word	0x3c900000

08009ebc <_init>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr

08009ec8 <_fini>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	bf00      	nop
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr
