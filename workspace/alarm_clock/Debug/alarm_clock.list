
alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800a008  0800a008  0001a008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  0800a3e0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000540  20000074  0800a450  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200005b4  0800a450  000205b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000251f4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004445  00000000  00000000  00045298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f70  00000000  00000000  000496e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001dc0  00000000  00000000  0004b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025521  00000000  00000000  0004d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000217d3  00000000  00000000  00072931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ec2c8  00000000  00000000  00094104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001803cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008bc4  00000000  00000000  00180420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08009fec 	.word	0x08009fec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08009fec 	.word	0x08009fec

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96e 	b.w	8000e10 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468c      	mov	ip, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8083 	bne.w	8000c62 <__udivmoddi4+0x116>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4617      	mov	r7, r2
 8000b60:	d947      	bls.n	8000bf2 <__udivmoddi4+0xa6>
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	b142      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	f1c2 0020 	rsb	r0, r2, #32
 8000b6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4097      	lsls	r7, r2
 8000b74:	ea40 0c01 	orr.w	ip, r0, r1
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbbc f6f8 	udiv	r6, ip, r8
 8000b84:	fa1f fe87 	uxth.w	lr, r7
 8000b88:	fb08 c116 	mls	r1, r8, r6, ip
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb06 f10e 	mul.w	r1, r6, lr
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9e:	f080 8119 	bcs.w	8000dd4 <__udivmoddi4+0x288>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8116 	bls.w	8000dd4 <__udivmoddi4+0x288>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	443b      	add	r3, r7
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8105 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	f240 8102 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	443c      	add	r4, r7
 8000bd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bdc:	eba4 040e 	sub.w	r4, r4, lr
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	b902      	cbnz	r2, 8000bf6 <__udivmoddi4+0xaa>
 8000bf4:	deff      	udf	#255	; 0xff
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d150      	bne.n	8000ca0 <__udivmoddi4+0x154>
 8000bfe:	1bcb      	subs	r3, r1, r7
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	2601      	movs	r6, #1
 8000c0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb08 f30c 	mul.w	r3, r8, ip
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0xe2>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	f200 80e9 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1ac9      	subs	r1, r1, r3
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x10c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x10a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80d9 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e7bf      	b.n	8000be2 <__udivmoddi4+0x96>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x12e>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 80b1 	beq.w	8000dce <__udivmoddi4+0x282>
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c72:	4630      	mov	r0, r6
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f683 	clz	r6, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x1cc>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0x140>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80b8 	bhi.w	8000dfc <__udivmoddi4+0x2b0>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	468c      	mov	ip, r1
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0a8      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9e:	e7a5      	b.n	8000bec <__udivmoddi4+0xa0>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca8:	4097      	lsls	r7, r2
 8000caa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb2:	40d9      	lsrs	r1, r3
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	0c03      	lsrs	r3, r0, #16
 8000cb8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cbc:	fa1f f887 	uxth.w	r8, r7
 8000cc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f108 	mul.w	r1, r6, r8
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x19c>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cda:	f080 808d 	bcs.w	8000df8 <__udivmoddi4+0x2ac>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 808a 	bls.w	8000df8 <__udivmoddi4+0x2ac>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b281      	uxth	r1, r0
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb00 f308 	mul.w	r3, r0, r8
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x1c4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d06:	d273      	bcs.n	8000df0 <__udivmoddi4+0x2a4>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d971      	bls.n	8000df0 <__udivmoddi4+0x2a4>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4439      	add	r1, r7
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d16:	e778      	b.n	8000c0a <__udivmoddi4+0xbe>
 8000d18:	f1c6 0c20 	rsb	ip, r6, #32
 8000d1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d24:	431c      	orrs	r4, r3
 8000d26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d36:	431f      	orrs	r7, r3
 8000d38:	0c3b      	lsrs	r3, r7, #16
 8000d3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3e:	fa1f f884 	uxth.w	r8, r4
 8000d42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4e:	458a      	cmp	sl, r1
 8000d50:	fa02 f206 	lsl.w	r2, r2, r6
 8000d54:	fa00 f306 	lsl.w	r3, r0, r6
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x220>
 8000d5a:	1861      	adds	r1, r4, r1
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	d248      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000d62:	458a      	cmp	sl, r1
 8000d64:	d946      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4421      	add	r1, r4
 8000d6c:	eba1 010a 	sub.w	r1, r1, sl
 8000d70:	b2bf      	uxth	r7, r7
 8000d72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7e:	fb00 f808 	mul.w	r8, r0, r8
 8000d82:	45b8      	cmp	r8, r7
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x24a>
 8000d86:	19e7      	adds	r7, r4, r7
 8000d88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d8c:	d22e      	bcs.n	8000dec <__udivmoddi4+0x2a0>
 8000d8e:	45b8      	cmp	r8, r7
 8000d90:	d92c      	bls.n	8000dec <__udivmoddi4+0x2a0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4427      	add	r7, r4
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	eba7 0708 	sub.w	r7, r7, r8
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	454f      	cmp	r7, r9
 8000da4:	46c6      	mov	lr, r8
 8000da6:	4649      	mov	r1, r9
 8000da8:	d31a      	bcc.n	8000de0 <__udivmoddi4+0x294>
 8000daa:	d017      	beq.n	8000ddc <__udivmoddi4+0x290>
 8000dac:	b15d      	cbz	r5, 8000dc6 <__udivmoddi4+0x27a>
 8000dae:	ebb3 020e 	subs.w	r2, r3, lr
 8000db2:	eb67 0701 	sbc.w	r7, r7, r1
 8000db6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dba:	40f2      	lsrs	r2, r6
 8000dbc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc0:	40f7      	lsrs	r7, r6
 8000dc2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e70b      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fd      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000ddc:	4543      	cmp	r3, r8
 8000dde:	d2e5      	bcs.n	8000dac <__udivmoddi4+0x260>
 8000de0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de4:	eb69 0104 	sbc.w	r1, r9, r4
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7df      	b.n	8000dac <__udivmoddi4+0x260>
 8000dec:	4608      	mov	r0, r1
 8000dee:	e7d2      	b.n	8000d96 <__udivmoddi4+0x24a>
 8000df0:	4660      	mov	r0, ip
 8000df2:	e78d      	b.n	8000d10 <__udivmoddi4+0x1c4>
 8000df4:	4681      	mov	r9, r0
 8000df6:	e7b9      	b.n	8000d6c <__udivmoddi4+0x220>
 8000df8:	4666      	mov	r6, ip
 8000dfa:	e775      	b.n	8000ce8 <__udivmoddi4+0x19c>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e74a      	b.n	8000c96 <__udivmoddi4+0x14a>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	4439      	add	r1, r7
 8000e06:	e713      	b.n	8000c30 <__udivmoddi4+0xe4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443c      	add	r4, r7
 8000e0c:	e724      	b.n	8000c58 <__udivmoddi4+0x10c>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <set_time>:
#include "usart.h"
#include "gpio.h"
#include "project_functions.h"


void set_time(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b096      	sub	sp, #88	; 0x58
 8000e18:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef new_time;
	RTC_DateTypeDef new_date;
	HAL_UART_AbortTransmit(&huart1);
 8000e1a:	48b3      	ldr	r0, [pc, #716]	; (80010e8 <set_time+0x2d4>)
 8000e1c:	f006 fec6 	bl	8007bac <HAL_UART_AbortTransmit>
	HAL_RTC_GetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 8000e20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e24:	2200      	movs	r2, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	48b0      	ldr	r0, [pc, #704]	; (80010ec <set_time+0x2d8>)
 8000e2a:	f005 fa27 	bl	800627c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &new_date, RTC_FORMAT_BIN);
 8000e2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	48ad      	ldr	r0, [pc, #692]	; (80010ec <set_time+0x2d8>)
 8000e38:	f005 fb2a 	bl	8006490 <HAL_RTC_GetDate>
	char msg[50] = {'\0'};
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	222e      	movs	r2, #46	; 0x2e
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f007 fc64 	bl	8008714 <memset>

	TIM2->CNT = 4*new_time.Hours;
 8000e4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e50:	009a      	lsls	r2, r3, #2
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t current_count = TIM2->CNT;
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000e60:	e04f      	b.n	8000f02 <set_time+0xee>
		current_count = TIM2->CNT;
 8000e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 8000e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e70:	4293      	cmp	r3, r2
 8000e72:	bf94      	ite	ls
 8000e74:	2301      	movls	r3, #1
 8000e76:	2300      	movhi	r3, #0
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7c:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf8c      	ite	hi
 8000e84:	2301      	movhi	r3, #1
 8000e86:	2300      	movls	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <set_time+0x9c>
	  		  current_count = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8000ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
 8000eae:	e015      	b.n	8000edc <set_time+0xc8>
		}
		else if ((current_count > 95)&(current_count<200)){
 8000eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eb2:	2b5f      	cmp	r3, #95	; 0x5f
 8000eb4:	bf8c      	ite	hi
 8000eb6:	2301      	movhi	r3, #1
 8000eb8:	2300      	movls	r3, #0
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ebe:	2bc7      	cmp	r3, #199	; 0xc7
 8000ec0:	bf94      	ite	ls
 8000ec2:	2301      	movls	r3, #1
 8000ec4:	2300      	movhi	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d005      	beq.n	8000edc <set_time+0xc8>
			current_count = 95;
 8000ed0:	235f      	movs	r3, #95	; 0x5f
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 95;
 8000ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed8:	225f      	movs	r2, #95	; 0x5f
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", (current_count>>2), new_time.Minutes, new_time.Seconds);
 8000edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ede:	089a      	lsrs	r2, r3, #2
 8000ee0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000eea:	4638      	mov	r0, r7
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	497f      	ldr	r1, [pc, #508]	; (80010f0 <set_time+0x2dc>)
 8000ef2:	f007 fc17 	bl	8008724 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8000ef6:	4639      	mov	r1, r7
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	2232      	movs	r2, #50	; 0x32
 8000efc:	487a      	ldr	r0, [pc, #488]	; (80010e8 <set_time+0x2d4>)
 8000efe:	f006 fdbf 	bl	8007a80 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000f02:	2110      	movs	r1, #16
 8000f04:	487b      	ldr	r0, [pc, #492]	; (80010f4 <set_time+0x2e0>)
 8000f06:	f002 f945 	bl	8003194 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1a8      	bne.n	8000e62 <set_time+0x4e>
	}
	new_time.Hours = current_count>>2;
 8000f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	HAL_Delay(500);
 8000f1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1e:	f001 fbb5 	bl	800268c <HAL_Delay>

	TIM2->CNT = 4*new_time.Minutes;
 8000f22:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000f26:	009a      	lsls	r2, r3, #2
 8000f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000f36:	e051      	b.n	8000fdc <set_time+0x1c8>
		current_count = TIM2->CNT;
 8000f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 8000f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f46:	4293      	cmp	r3, r2
 8000f48:	bf94      	ite	ls
 8000f4a:	2301      	movls	r3, #1
 8000f4c:	2300      	movhi	r3, #0
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f52:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000f56:	428b      	cmp	r3, r1
 8000f58:	bf8c      	ite	hi
 8000f5a:	2301      	movhi	r3, #1
 8000f5c:	2300      	movls	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	bf0c      	ite	eq
 8000f6c:	2301      	moveq	r3, #1
 8000f6e:	2300      	movne	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <set_time+0x172>
	  		  current_count = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8000f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
 8000f84:	e017      	b.n	8000fb6 <set_time+0x1a2>
		}
		else if ((current_count > 239)&(current_count<400)){
 8000f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f88:	2bef      	cmp	r3, #239	; 0xef
 8000f8a:	bf8c      	ite	hi
 8000f8c:	2301      	movhi	r3, #1
 8000f8e:	2300      	movls	r3, #0
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f94:	f240 118f 	movw	r1, #399	; 0x18f
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	bf94      	ite	ls
 8000f9c:	2301      	movls	r3, #1
 8000f9e:	2300      	movhi	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <set_time+0x1a2>
			current_count = 239;
 8000faa:	23ef      	movs	r3, #239	; 0xef
 8000fac:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 239;
 8000fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb2:	22ef      	movs	r2, #239	; 0xef
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_time.Hours, (current_count>>2), new_time.Seconds);
 8000fb6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000fc4:	4638      	mov	r0, r7
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	460a      	mov	r2, r1
 8000fca:	4949      	ldr	r1, [pc, #292]	; (80010f0 <set_time+0x2dc>)
 8000fcc:	f007 fbaa 	bl	8008724 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8000fd0:	4639      	mov	r1, r7
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	2232      	movs	r2, #50	; 0x32
 8000fd6:	4844      	ldr	r0, [pc, #272]	; (80010e8 <set_time+0x2d4>)
 8000fd8:	f006 fd52 	bl	8007a80 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4845      	ldr	r0, [pc, #276]	; (80010f4 <set_time+0x2e0>)
 8000fe0:	f002 f8d8 	bl	8003194 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1a6      	bne.n	8000f38 <set_time+0x124>
	}
	new_time.Minutes = current_count>>2;
 8000fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	HAL_Delay(500);
 8000ff4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff8:	f001 fb48 	bl	800268c <HAL_Delay>

	TIM2->CNT = 4*new_time.Seconds;
 8000ffc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001000:	009a      	lsls	r2, r3, #2
 8001002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8001008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001010:	e052      	b.n	80010b8 <set_time+0x2a4>
		current_count = TIM2->CNT;
 8001012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 800101a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800101c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001020:	4293      	cmp	r3, r2
 8001022:	bf94      	ite	ls
 8001024:	2301      	movls	r3, #1
 8001026:	2300      	movhi	r3, #0
 8001028:	b2da      	uxtb	r2, r3
 800102a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800102c:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8001030:	428b      	cmp	r3, r1
 8001032:	bf8c      	ite	hi
 8001034:	2301      	movhi	r3, #1
 8001036:	2300      	movls	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4013      	ands	r3, r2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001042:	2b01      	cmp	r3, #1
 8001044:	bf0c      	ite	eq
 8001046:	2301      	moveq	r3, #1
 8001048:	2300      	movne	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <set_time+0x24c>
	  		  current_count = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
	  		  TIM2->CNT = 0;
 8001056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
 800105e:	e017      	b.n	8001090 <set_time+0x27c>
		}
		else if ((current_count > 239)&(current_count<400)){
 8001060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001062:	2bef      	cmp	r3, #239	; 0xef
 8001064:	bf8c      	ite	hi
 8001066:	2301      	movhi	r3, #1
 8001068:	2300      	movls	r3, #0
 800106a:	b2da      	uxtb	r2, r3
 800106c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800106e:	f240 118f 	movw	r1, #399	; 0x18f
 8001072:	428b      	cmp	r3, r1
 8001074:	bf94      	ite	ls
 8001076:	2301      	movls	r3, #1
 8001078:	2300      	movhi	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4013      	ands	r3, r2
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <set_time+0x27c>
			current_count = 239;
 8001084:	23ef      	movs	r3, #239	; 0xef
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
			TIM2->CNT = 239;
 8001088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800108c:	22ef      	movs	r2, #239	; 0xef
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_time.Hours, new_time.Minutes, (current_count>>2));
 8001090:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001094:	461a      	mov	r2, r3
 8001096:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800109a:	4619      	mov	r1, r3
 800109c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	4638      	mov	r0, r7
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	460b      	mov	r3, r1
 80010a6:	4912      	ldr	r1, [pc, #72]	; (80010f0 <set_time+0x2dc>)
 80010a8:	f007 fb3c 	bl	8008724 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 80010ac:	4639      	mov	r1, r7
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	2232      	movs	r2, #50	; 0x32
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <set_time+0x2d4>)
 80010b4:	f006 fce4 	bl	8007a80 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80010b8:	2110      	movs	r1, #16
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <set_time+0x2e0>)
 80010bc:	f002 f86a 	bl	8003194 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1a5      	bne.n	8001012 <set_time+0x1fe>
	}
	new_time.Seconds = current_count>>2;
 80010c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 80010d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <set_time+0x2d8>)
 80010da:	f005 f80b 	bl	80060f4 <HAL_RTC_SetTime>

	return;
 80010de:	bf00      	nop
}
 80010e0:	3750      	adds	r7, #80	; 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000021c 	.word	0x2000021c
 80010ec:	200000b4 	.word	0x200000b4
 80010f0:	0800a008 	.word	0x0800a008
 80010f4:	48000400 	.word	0x48000400

080010f8 <set_alarm>:

void set_alarm(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09a      	sub	sp, #104	; 0x68
 80010fc:	af02      	add	r7, sp, #8
	RTC_AlarmTypeDef new_alarm;
	HAL_UART_AbortTransmit(&huart1);
 80010fe:	48b0      	ldr	r0, [pc, #704]	; (80013c0 <set_alarm+0x2c8>)
 8001100:	f006 fd54 	bl	8007bac <HAL_UART_AbortTransmit>
	HAL_RTC_GetAlarm(&hrtc, &new_alarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 8001104:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001108:	2300      	movs	r3, #0
 800110a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110e:	48ad      	ldr	r0, [pc, #692]	; (80013c4 <set_alarm+0x2cc>)
 8001110:	f005 fbde 	bl	80068d0 <HAL_RTC_GetAlarm>

	char msg[50] = {'\0'};
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	222e      	movs	r2, #46	; 0x2e
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f007 faf8 	bl	8008714 <memset>

	TIM2->CNT = 4*new_alarm.AlarmTime.Hours;
 8001124:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001128:	009a      	lsls	r2, r3, #2
 800112a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t current_count = TIM2->CNT;
 8001130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001138:	e04f      	b.n	80011da <set_alarm+0xe2>
		current_count = TIM2->CNT;
 800113a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 8001142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001148:	4293      	cmp	r3, r2
 800114a:	bf94      	ite	ls
 800114c:	2301      	movls	r3, #1
 800114e:	2300      	movhi	r3, #0
 8001150:	b2da      	uxtb	r2, r3
 8001152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001154:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8001158:	428b      	cmp	r3, r1
 800115a:	bf8c      	ite	hi
 800115c:	2301      	movhi	r3, #1
 800115e:	2300      	movls	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4013      	ands	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800116a:	2b01      	cmp	r3, #1
 800116c:	bf0c      	ite	eq
 800116e:	2301      	moveq	r3, #1
 8001170:	2300      	movne	r3, #0
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <set_alarm+0x90>
	  		  current_count = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 800117e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
 8001186:	e015      	b.n	80011b4 <set_alarm+0xbc>
		}
		else if ((current_count > 95)&(current_count<200)){
 8001188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118a:	2b5f      	cmp	r3, #95	; 0x5f
 800118c:	bf8c      	ite	hi
 800118e:	2301      	movhi	r3, #1
 8001190:	2300      	movls	r3, #0
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001196:	2bc7      	cmp	r3, #199	; 0xc7
 8001198:	bf94      	ite	ls
 800119a:	2301      	movls	r3, #1
 800119c:	2300      	movhi	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <set_alarm+0xbc>
			current_count = 95;
 80011a8:	235f      	movs	r3, #95	; 0x5f
 80011aa:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 95;
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	225f      	movs	r2, #95	; 0x5f
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", (current_count>>2), new_alarm.AlarmTime.Minutes, new_alarm.AlarmTime.Seconds);
 80011b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b6:	089a      	lsrs	r2, r3, #2
 80011b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011bc:	4619      	mov	r1, r3
 80011be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80011c2:	4638      	mov	r0, r7
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	460b      	mov	r3, r1
 80011c8:	497f      	ldr	r1, [pc, #508]	; (80013c8 <set_alarm+0x2d0>)
 80011ca:	f007 faab 	bl	8008724 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 80011ce:	4639      	mov	r1, r7
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	2232      	movs	r2, #50	; 0x32
 80011d4:	487a      	ldr	r0, [pc, #488]	; (80013c0 <set_alarm+0x2c8>)
 80011d6:	f006 fc53 	bl	8007a80 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80011da:	2110      	movs	r1, #16
 80011dc:	487b      	ldr	r0, [pc, #492]	; (80013cc <set_alarm+0x2d4>)
 80011de:	f001 ffd9 	bl	8003194 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1a8      	bne.n	800113a <set_alarm+0x42>
	}
	new_alarm.AlarmTime.Hours = current_count>>2;
 80011e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	HAL_Delay(500);
 80011f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f6:	f001 fa49 	bl	800268c <HAL_Delay>

	TIM2->CNT = 4*new_alarm.AlarmTime.Minutes;
 80011fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011fe:	009a      	lsls	r2, r3, #2
 8001200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 8001206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 800120e:	e051      	b.n	80012b4 <set_alarm+0x1bc>
		current_count = TIM2->CNT;
 8001210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 8001218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800121a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121e:	4293      	cmp	r3, r2
 8001220:	bf94      	ite	ls
 8001222:	2301      	movls	r3, #1
 8001224:	2300      	movhi	r3, #0
 8001226:	b2da      	uxtb	r2, r3
 8001228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800122a:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 800122e:	428b      	cmp	r3, r1
 8001230:	bf8c      	ite	hi
 8001232:	2301      	movhi	r3, #1
 8001234:	2300      	movls	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4013      	ands	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001240:	2b01      	cmp	r3, #1
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <set_alarm+0x166>
	  		  current_count = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 8001254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
 800125c:	e017      	b.n	800128e <set_alarm+0x196>
		}
		else if ((current_count > 239)&(current_count<400)){
 800125e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001260:	2bef      	cmp	r3, #239	; 0xef
 8001262:	bf8c      	ite	hi
 8001264:	2301      	movhi	r3, #1
 8001266:	2300      	movls	r3, #0
 8001268:	b2da      	uxtb	r2, r3
 800126a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126c:	f240 118f 	movw	r1, #399	; 0x18f
 8001270:	428b      	cmp	r3, r1
 8001272:	bf94      	ite	ls
 8001274:	2301      	movls	r3, #1
 8001276:	2300      	movhi	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4013      	ands	r3, r2
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <set_alarm+0x196>
			current_count = 239;
 8001282:	23ef      	movs	r3, #239	; 0xef
 8001284:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 239;
 8001286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800128a:	22ef      	movs	r2, #239	; 0xef
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_alarm.AlarmTime.Hours, (current_count>>2), new_alarm.AlarmTime.Seconds);
 800128e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001292:	4619      	mov	r1, r3
 8001294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800129c:	4638      	mov	r0, r7
 800129e:	9200      	str	r2, [sp, #0]
 80012a0:	460a      	mov	r2, r1
 80012a2:	4949      	ldr	r1, [pc, #292]	; (80013c8 <set_alarm+0x2d0>)
 80012a4:	f007 fa3e 	bl	8008724 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 80012a8:	4639      	mov	r1, r7
 80012aa:	2364      	movs	r3, #100	; 0x64
 80012ac:	2232      	movs	r2, #50	; 0x32
 80012ae:	4844      	ldr	r0, [pc, #272]	; (80013c0 <set_alarm+0x2c8>)
 80012b0:	f006 fbe6 	bl	8007a80 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80012b4:	2110      	movs	r1, #16
 80012b6:	4845      	ldr	r0, [pc, #276]	; (80013cc <set_alarm+0x2d4>)
 80012b8:	f001 ff6c 	bl	8003194 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1a6      	bne.n	8001210 <set_alarm+0x118>
	}
	new_alarm.AlarmTime.Minutes = current_count>>2;
 80012c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	HAL_Delay(500);
 80012cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d0:	f001 f9dc 	bl	800268c <HAL_Delay>

	TIM2->CNT = 4*new_alarm.AlarmTime.Seconds;
 80012d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012d8:	009a      	lsls	r2, r3, #2
 80012da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
	current_count = TIM2->CNT;
 80012e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 80012e8:	e052      	b.n	8001390 <set_alarm+0x298>
		current_count = TIM2->CNT;
 80012ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((current_count <= 65535)&(current_count > 65000))|(current_count == 1)){
 80012f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f8:	4293      	cmp	r3, r2
 80012fa:	bf94      	ite	ls
 80012fc:	2301      	movls	r3, #1
 80012fe:	2300      	movhi	r3, #0
 8001300:	b2da      	uxtb	r2, r3
 8001302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001304:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8001308:	428b      	cmp	r3, r1
 800130a:	bf8c      	ite	hi
 800130c:	2301      	movhi	r3, #1
 800130e:	2300      	movls	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131a:	2b01      	cmp	r3, #1
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <set_alarm+0x240>
	  		  current_count = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	65fb      	str	r3, [r7, #92]	; 0x5c
	  		  TIM2->CNT = 0;
 800132e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
 8001336:	e017      	b.n	8001368 <set_alarm+0x270>
		}
		else if ((current_count > 239)&(current_count<400)){
 8001338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133a:	2bef      	cmp	r3, #239	; 0xef
 800133c:	bf8c      	ite	hi
 800133e:	2301      	movhi	r3, #1
 8001340:	2300      	movls	r3, #0
 8001342:	b2da      	uxtb	r2, r3
 8001344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001346:	f240 118f 	movw	r1, #399	; 0x18f
 800134a:	428b      	cmp	r3, r1
 800134c:	bf94      	ite	ls
 800134e:	2301      	movls	r3, #1
 8001350:	2300      	movhi	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4013      	ands	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <set_alarm+0x270>
			current_count = 239;
 800135c:	23ef      	movs	r3, #239	; 0xef
 800135e:	65fb      	str	r3, [r7, #92]	; 0x5c
			TIM2->CNT = 239;
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	22ef      	movs	r2, #239	; 0xef
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
		}
		sprintf(msg, "%02d:%02d:%02d\r", new_alarm.AlarmTime.Hours, new_alarm.AlarmTime.Minutes, (current_count>>2));
 8001368:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800136c:	461a      	mov	r2, r3
 800136e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001372:	4619      	mov	r1, r3
 8001374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	4638      	mov	r0, r7
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	460b      	mov	r3, r1
 800137e:	4912      	ldr	r1, [pc, #72]	; (80013c8 <set_alarm+0x2d0>)
 8001380:	f007 f9d0 	bl	8008724 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 100);
 8001384:	4639      	mov	r1, r7
 8001386:	2364      	movs	r3, #100	; 0x64
 8001388:	2232      	movs	r2, #50	; 0x32
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <set_alarm+0x2c8>)
 800138c:	f006 fb78 	bl	8007a80 <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){
 8001390:	2110      	movs	r1, #16
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <set_alarm+0x2d4>)
 8001394:	f001 fefe 	bl	8003194 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1a5      	bne.n	80012ea <set_alarm+0x1f2>
	}
	new_alarm.AlarmTime.Seconds = current_count>>2;
 800139e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	HAL_RTC_SetAlarm_IT(&hrtc, &new_alarm, RTC_FORMAT_BIN);
 80013a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <set_alarm+0x2cc>)
 80013b2:	f005 f8bb 	bl	800652c <HAL_RTC_SetAlarm_IT>


	return;
 80013b6:	bf00      	nop
}
 80013b8:	3760      	adds	r7, #96	; 0x60
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000021c 	.word	0x2000021c
 80013c4:	200000b4 	.word	0x200000b4
 80013c8:	0800a008 	.word	0x0800a008
 80013cc:	48000400 	.word	0x48000400

080013d0 <snooze_alarm>:


void snooze_alarm(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef new_alarm;
	HAL_UART_AbortTransmit(&huart1);
 80013d6:	480e      	ldr	r0, [pc, #56]	; (8001410 <snooze_alarm+0x40>)
 80013d8:	f006 fbe8 	bl	8007bac <HAL_UART_AbortTransmit>
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <snooze_alarm+0x44>)
 80013e2:	f005 f9e1 	bl	80067a8 <HAL_RTC_DeactivateAlarm>
	HAL_RTC_GetAlarm(&hrtc, &new_alarm,RTC_ALARM_A, RTC_FORMAT_BIN);
 80013e6:	4639      	mov	r1, r7
 80013e8:	2300      	movs	r3, #0
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <snooze_alarm+0x44>)
 80013f0:	f005 fa6e 	bl	80068d0 <HAL_RTC_GetAlarm>

	new_alarm.AlarmTime.Minutes = new_alarm.AlarmTime.Minutes + 9;
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	3309      	adds	r3, #9
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	707b      	strb	r3, [r7, #1]
	HAL_RTC_SetAlarm_IT(&hrtc, &new_alarm, RTC_FORMAT_BIN);
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <snooze_alarm+0x44>)
 8001404:	f005 f892 	bl	800652c <HAL_RTC_SetAlarm_IT>
	return;
 8001408:	bf00      	nop
}
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000021c 	.word	0x2000021c
 8001414:	200000b4 	.word	0x200000b4

08001418 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800144e:	2004      	movs	r0, #4
 8001450:	f7ff ffe2 	bl	8001418 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001454:	2001      	movs	r0, #1
 8001456:	f7ff ffdf 	bl	8001418 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	200b      	movs	r0, #11
 8001460:	f001 fa13 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001464:	200b      	movs	r0, #11
 8001466:	f001 fa2a 	bl	80028be <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}

0800146e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800147c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b4:	2004      	movs	r0, #4
 80014b6:	f7ff ffda 	bl	800146e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2002      	movs	r0, #2
 80014bc:	f7ff ffd7 	bl	800146e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff ffd4 	bl	800146e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c6:	2008      	movs	r0, #8
 80014c8:	f7ff ffd1 	bl	800146e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2123      	movs	r1, #35	; 0x23
 80014d0:	482b      	ldr	r0, [pc, #172]	; (8001580 <MX_GPIO_Init+0xe0>)
 80014d2:	f001 fe77 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SW4_Pin|SW1_Pin;
 80014d6:	2314      	movs	r3, #20
 80014d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4826      	ldr	r0, [pc, #152]	; (8001584 <MX_GPIO_Init+0xe4>)
 80014ea:	f001 fce3 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80014ee:	2323      	movs	r3, #35	; 0x23
 80014f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	481f      	ldr	r0, [pc, #124]	; (8001580 <MX_GPIO_Init+0xe0>)
 8001504:	f001 fcd6 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8001508:	2303      	movs	r3, #3
 800150a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001510:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4619      	mov	r1, r3
 800151a:	481b      	ldr	r0, [pc, #108]	; (8001588 <MX_GPIO_Init+0xe8>)
 800151c:	f001 fcca 	bl	8002eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = rotary_but_Pin;
 8001520:	2310      	movs	r3, #16
 8001522:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	2301      	movs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(rotary_but_GPIO_Port, &GPIO_InitStruct);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_GPIO_Init+0xe0>)
 8001532:	f001 fcbf 	bl	8002eb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2006      	movs	r0, #6
 800153c:	f001 f9a5 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001540:	2006      	movs	r0, #6
 8001542:	f001 f9bc 	bl	80028be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2007      	movs	r0, #7
 800154c:	f001 f99d 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001550:	2007      	movs	r0, #7
 8001552:	f001 f9b4 	bl	80028be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2008      	movs	r0, #8
 800155c:	f001 f995 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001560:	2008      	movs	r0, #8
 8001562:	f001 f9ac 	bl	80028be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	200a      	movs	r0, #10
 800156c:	f001 f98d 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001570:	200a      	movs	r0, #10
 8001572:	f001 f9a4 	bl	80028be <HAL_NVIC_EnableIRQ>

}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	48000400 	.word	0x48000400
 8001584:	48000800 	.word	0x48000800
 8001588:	48000c00 	.word	0x48000c00

0800158c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159c:	f023 0218 	bic.w	r2, r3, #24
 80015a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b0c4      	sub	sp, #272	; 0x110
 80015bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f000 ffdf 	bl	8002580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 fa1d 	bl	8001a00 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015c6:	f000 fa93 	bl	8001af0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f7ff ff69 	bl	80014a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80015ce:	f000 fe83 	bl	80022d8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80015d2:	f000 ff45 	bl	8002460 <MX_USB_PCD_Init>
  MX_RTC_Init();
 80015d6:	f000 faed 	bl	8001bb4 <MX_RTC_Init>
  MX_DMA_Init();
 80015da:	f7ff ff36 	bl	800144a <MX_DMA_Init>
  MX_SAI1_Init();
 80015de:	f000 fbd1 	bl	8001d84 <MX_SAI1_Init>
  MX_TIM2_Init();
 80015e2:	f000 fdc7 	bl	8002174 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_MspInit(&hrtc);
 80015e6:	4884      	ldr	r0, [pc, #528]	; (80017f8 <main+0x240>)
 80015e8:	f000 fb7e 	bl	8001ce8 <HAL_RTC_MspInit>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80015ec:	213c      	movs	r1, #60	; 0x3c
 80015ee:	4883      	ldr	r0, [pc, #524]	; (80017fc <main+0x244>)
 80015f0:	f006 f85e 	bl	80076b0 <HAL_TIM_Encoder_Start>
  char time_msg[50] = {'\0'};
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015fe:	222e      	movs	r2, #46	; 0x2e
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f007 f886 	bl	8008714 <memset>
  uint8_t esc_message[50] = {'\0'};
 8001608:	2300      	movs	r3, #0
 800160a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800160c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001610:	222e      	movs	r2, #46	; 0x2e
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f007 f87d 	bl	8008714 <memset>
  RTC_TimeTypeDef Time;
  RTC_DateTypeDef Date;

  double dur = 1.0;
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b78      	ldr	r3, [pc, #480]	; (8001800 <main+0x248>)
 8001620:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  double fs = 16000.0;
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b76      	ldr	r3, [pc, #472]	; (8001804 <main+0x24c>)
 800162a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  double f0 = 261.63; // Middle C
 800162e:	a36c      	add	r3, pc, #432	; (adr r3, 80017e0 <main+0x228>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  double delta_t = 1.0 / fs;
 8001638:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	496f      	ldr	r1, [pc, #444]	; (8001800 <main+0x248>)
 8001642:	f7ff f8d3 	bl	80007ec <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  double volume = 12000.0;
 800164e:	a366      	add	r3, pc, #408	; (adr r3, 80017e8 <main+0x230>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  double c_scale[] = {261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25};
 8001658:	463b      	mov	r3, r7
 800165a:	4a6b      	ldr	r2, [pc, #428]	; (8001808 <main+0x250>)
 800165c:	461c      	mov	r4, r3
 800165e:	4615      	mov	r5, r2
 8001660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 // Frequencies corresponding to C scale: C4-D4-E4-F4-G4-A4-B4-C5
  int numberOfSamples = 2.0 * dur * fs; // 2 channels * duration (sec) * samples per sec
 8001674:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	f7fe fdd6 	bl	800022c <__adddf3>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800168c:	f7fe ff84 	bl	8000598 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff fa18 	bl	8000acc <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  int16_t signal[numberOfSamples];
 80016a2:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 80016a6:	1e63      	subs	r3, r4, #1
 80016a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80016ac:	4623      	mov	r3, r4
 80016ae:	4618      	mov	r0, r3
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	010b      	lsls	r3, r1, #4
 80016be:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016c2:	0102      	lsls	r2, r0, #4
 80016c4:	4623      	mov	r3, r4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	010b      	lsls	r3, r1, #4
 80016d6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016da:	0102      	lsls	r2, r0, #4
 80016dc:	4623      	mov	r3, r4
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	3307      	adds	r3, #7
 80016e2:	08db      	lsrs	r3, r3, #3
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	ebad 0d03 	sub.w	sp, sp, r3
 80016ea:	ab02      	add	r3, sp, #8
 80016ec:	3301      	adds	r3, #1
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  // Single tone
  double t = 0;
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  int count = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  while (count < numberOfSamples) {
 8001708:	e048      	b.n	800179c <main+0x1e4>
	  signal[count] = volume * sin(2.0 * PI * f0 * t); // left
 800170a:	a339      	add	r3, pc, #228	; (adr r3, 80017f0 <main+0x238>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001714:	f7fe ff40 	bl	8000598 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001724:	f7fe ff38 	bl	8000598 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	ec43 2b17 	vmov	d7, r2, r3
 8001730:	eeb0 0a47 	vmov.f32	s0, s14
 8001734:	eef0 0a67 	vmov.f32	s1, s15
 8001738:	f007 fc22 	bl	8008f80 <sin>
 800173c:	ec51 0b10 	vmov	r0, r1, d0
 8001740:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001744:	f7fe ff28 	bl	8000598 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff f9bc 	bl	8000acc <__aeabi_d2iz>
 8001754:	4603      	mov	r3, r0
 8001756:	b219      	sxth	r1, r3
 8001758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800175c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001760:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  signal[count + 1] = signal[count]; // right
 8001764:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800176e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001772:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 8001776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800177a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  count += 2;
 800177e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001782:	3302      	adds	r3, #2
 8001784:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  t += delta_t;
 8001788:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800178c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001790:	f7fe fd4c 	bl	800022c <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  while (count < numberOfSamples) {
 800179c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80017a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbb0      	blt.n	800170a <main+0x152>
  }
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, signal, numberOfSamples);
 80017a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017ac:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80017b0:	b292      	uxth	r2, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	4815      	ldr	r0, [pc, #84]	; (800180c <main+0x254>)
 80017b6:	f005 fbf5 	bl	8006fa4 <HAL_SAI_Transmit_DMA>
  HAL_Delay(1000);
 80017ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017be:	f000 ff65 	bl	800268c <HAL_Delay>
  // Plays a "C" scale
  for (int k = 0; k < 8; k++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017c8:	e084      	b.n	80018d4 <main+0x31c>
  t = 0;
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  count = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  while (count < numberOfSamples) {
 80017dc:	e066      	b.n	80018ac <main+0x2f4>
 80017de:	bf00      	nop
 80017e0:	7ae147ae 	.word	0x7ae147ae
 80017e4:	40705a14 	.word	0x40705a14
 80017e8:	00000000 	.word	0x00000000
 80017ec:	40c77000 	.word	0x40c77000
 80017f0:	53c8d4f1 	.word	0x53c8d4f1
 80017f4:	401921fb 	.word	0x401921fb
 80017f8:	200000b4 	.word	0x200000b4
 80017fc:	200001d0 	.word	0x200001d0
 8001800:	3ff00000 	.word	0x3ff00000
 8001804:	40cf4000 	.word	0x40cf4000
 8001808:	0800a030 	.word	0x0800a030
 800180c:	20000138 	.word	0x20000138
	  signal[count] = volume * sin(2.0 * PI * c_scale[k] * t); // left
 8001810:	463a      	mov	r2, r7
 8001812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800181e:	a376      	add	r3, pc, #472	; (adr r3, 80019f8 <main+0x440>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe feb8 	bl	8000598 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001834:	f7fe feb0 	bl	8000598 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ec43 2b17 	vmov	d7, r2, r3
 8001840:	eeb0 0a47 	vmov.f32	s0, s14
 8001844:	eef0 0a67 	vmov.f32	s1, s15
 8001848:	f007 fb9a 	bl	8008f80 <sin>
 800184c:	ec51 0b10 	vmov	r0, r1, d0
 8001850:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001854:	f7fe fea0 	bl	8000598 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f934 	bl	8000acc <__aeabi_d2iz>
 8001864:	4603      	mov	r3, r0
 8001866:	b219      	sxth	r1, r3
 8001868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800186c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001870:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  signal[count + 1] = signal[count]; // right
 8001874:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800187e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001882:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 8001886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800188a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  count += 2;
 800188e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001892:	3302      	adds	r3, #2
 8001894:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  t += delta_t;
 8001898:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800189c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80018a0:	f7fe fcc4 	bl	800022c <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  while (count < numberOfSamples) {
 80018ac:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80018b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbab      	blt.n	8001810 <main+0x258>
  }
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, signal, numberOfSamples);
 80018b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018bc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80018c0:	b292      	uxth	r2, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	4842      	ldr	r0, [pc, #264]	; (80019d0 <main+0x418>)
 80018c6:	f005 fb6d 	bl	8006fa4 <HAL_SAI_Transmit_DMA>
  for (int k = 0; k < 8; k++) {
 80018ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018ce:	3301      	adds	r3, #1
 80018d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018d8:	2b07      	cmp	r3, #7
 80018da:	f77f af76 	ble.w	80017ca <main+0x212>

    /* USER CODE BEGIN 3 */



	  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80018de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	483b      	ldr	r0, [pc, #236]	; (80019d4 <main+0x41c>)
 80018e8:	f004 fcc8 	bl	800627c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80018ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	4837      	ldr	r0, [pc, #220]	; (80019d4 <main+0x41c>)
 80018f6:	f004 fdcb 	bl	8006490 <HAL_RTC_GetDate>
	  sprintf(time_msg, "\033[2K%02d:%02d:%02d\r", Time.Hours, Time.Minutes, Time.Seconds);
 80018fa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80018fe:	461a      	mov	r2, r3
 8001900:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001904:	4619      	mov	r1, r3
 8001906:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800190a:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	460b      	mov	r3, r1
 8001912:	4931      	ldr	r1, [pc, #196]	; (80019d8 <main+0x420>)
 8001914:	f006 ff06 	bl	8008724 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)time_msg, sizeof(time_msg), 100);
 8001918:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800191c:	2364      	movs	r3, #100	; 0x64
 800191e:	2232      	movs	r2, #50	; 0x32
 8001920:	482e      	ldr	r0, [pc, #184]	; (80019dc <main+0x424>)
 8001922:	f006 f8ad 	bl	8007a80 <HAL_UART_Transmit>
	  //sprintf(esc_message, "\033[2K");
	  //HAL_UART_Transmit(&huart1, esc_message, sizeof(esc_message), 100);

	  if (set_time_flag){
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <main+0x428>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <main+0x380>
	  	  set_time();
 800192e:	f7ff fa71 	bl	8000e14 <set_time>
	  	  set_time_flag = 0;
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <main+0x428>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
	  }
	  if (set_alarm_flag){
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <main+0x42c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <main+0x392>
		  set_alarm();
 8001940:	f7ff fbda 	bl	80010f8 <set_alarm>
		  set_alarm_flag = 0;
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <main+0x42c>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
	  }
	  if (alarm_triggered_flag){
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <main+0x430>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d010      	beq.n	8001974 <main+0x3bc>
		  if(Time.Seconds & 1)
 8001952:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <main+0x3b2>
			  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2120      	movs	r1, #32
 8001962:	4822      	ldr	r0, [pc, #136]	; (80019ec <main+0x434>)
 8001964:	f001 fc2e 	bl	80031c4 <HAL_GPIO_WritePin>
 8001968:	e004      	b.n	8001974 <main+0x3bc>
		  else
			  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	481f      	ldr	r0, [pc, #124]	; (80019ec <main+0x434>)
 8001970:	f001 fc28 	bl	80031c4 <HAL_GPIO_WritePin>
	  }
	  if (alarm_snooze_flag){
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <main+0x438>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d011      	beq.n	80019a0 <main+0x3e8>
		  snooze_alarm();
 800197c:	f7ff fd28 	bl	80013d0 <snooze_alarm>
		  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2120      	movs	r1, #32
 8001984:	4819      	ldr	r0, [pc, #100]	; (80019ec <main+0x434>)
 8001986:	f001 fc1d 	bl	80031c4 <HAL_GPIO_WritePin>
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800198a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198e:	4811      	ldr	r0, [pc, #68]	; (80019d4 <main+0x41c>)
 8001990:	f004 ff0a 	bl	80067a8 <HAL_RTC_DeactivateAlarm>
		  alarm_triggered_flag = 0;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <main+0x430>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
		  alarm_snooze_flag = 0;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <main+0x438>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
	  }
	  if (alarm_off_flag){
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <main+0x43c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d09a      	beq.n	80018de <main+0x326>
		  alarm_off_flag = 0;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <main+0x43c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
		  alarm_triggered_flag = 0;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <main+0x430>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80019b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <main+0x41c>)
 80019ba:	f004 fef5 	bl	80067a8 <HAL_RTC_DeactivateAlarm>
		  HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2120      	movs	r1, #32
 80019c2:	480a      	ldr	r0, [pc, #40]	; (80019ec <main+0x434>)
 80019c4:	f001 fbfe 	bl	80031c4 <HAL_GPIO_WritePin>
  {
 80019c8:	e789      	b.n	80018de <main+0x326>
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w
 80019d0:	20000138 	.word	0x20000138
 80019d4:	200000b4 	.word	0x200000b4
 80019d8:	0800a018 	.word	0x0800a018
 80019dc:	2000021c 	.word	0x2000021c
 80019e0:	200000b0 	.word	0x200000b0
 80019e4:	200000a8 	.word	0x200000a8
 80019e8:	200000a0 	.word	0x200000a0
 80019ec:	48000400 	.word	0x48000400
 80019f0:	200000ac 	.word	0x200000ac
 80019f4:	200000a4 	.word	0x200000a4
 80019f8:	53c8d4f1 	.word	0x53c8d4f1
 80019fc:	401921fb 	.word	0x401921fb

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b09a      	sub	sp, #104	; 0x68
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2248      	movs	r2, #72	; 0x48
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f006 fe80 	bl	8008714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a34:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f023 0303 	bic.w	r3, r3, #3
 8001a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a4a:	f001 fd05 	bl	8003458 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fd9c 	bl	800158c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <SystemClock_Config+0xec>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a5c:	4a23      	ldr	r2, [pc, #140]	; (8001aec <SystemClock_Config+0xec>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <SystemClock_Config+0xec>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001a70:	232f      	movs	r3, #47	; 0x2f
 8001a72:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a84:	2301      	movs	r3, #1
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a88:	2340      	movs	r3, #64	; 0x40
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a90:	2360      	movs	r3, #96	; 0x60
 8001a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a94:	2305      	movs	r3, #5
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 f86d 	bl	8003b80 <HAL_RCC_OscConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001aac:	f000 f852 	bl	8001b54 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ab0:	236f      	movs	r3, #111	; 0x6f
 8001ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fbe1 	bl	8004298 <HAL_RCC_ClockConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001adc:	f000 f83a 	bl	8001b54 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ae0:	f003 ffa5 	bl	8005a2e <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ae4:	bf00      	nop
 8001ae6:	3768      	adds	r7, #104	; 0x68
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	58000400 	.word	0x58000400

08001af0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b094      	sub	sp, #80	; 0x50
 8001af4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af6:	463b      	mov	r3, r7
 8001af8:	2250      	movs	r2, #80	; 0x50
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f006 fe09 	bl	8008714 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_SAI1
 8001b02:	f44f 5305 	mov.w	r3, #8512	; 0x2140
 8001b06:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001b08:	2318      	movs	r3, #24
 8001b0a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b16:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001b18:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b1c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <PeriphCommonClock_Config+0x60>)
 8001b20:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 f9ec 	bl	8004f14 <HAL_RCCEx_PeriphCLKConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001b42:	f000 f807 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	01010000 	.word	0x01010000

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>

08001b5e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	; 0x40
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2228      	movs	r2, #40	; 0x28
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 fd9d 	bl	8008714 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001bdc:	4a41      	ldr	r2, [pc, #260]	; (8001ce4 <MX_RTC_Init+0x130>)
 8001bde:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001be0:	4b3f      	ldr	r3, [pc, #252]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001be6:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001be8:	227f      	movs	r2, #127	; 0x7f
 8001bea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bec:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001bee:	22ff      	movs	r2, #255	; 0xff
 8001bf0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c04:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c0a:	4835      	ldr	r0, [pc, #212]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001c0c:	f004 f9d4 	bl	8005fb8 <HAL_RTC_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c16:	f7ff ff9d 	bl	8001b54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.SubSeconds = 0x0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4827      	ldr	r0, [pc, #156]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001c42:	f004 fa57 	bl	80060f4 <HAL_RTC_SetTime>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8001c4c:	f7ff ff82 	bl	8001b54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4619      	mov	r1, r3
 8001c70:	481b      	ldr	r0, [pc, #108]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001c72:	f004 fb5f 	bl	8006334 <HAL_RTC_SetDate>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8001c7c:	f7ff ff6a 	bl	8001b54 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c9c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <MX_RTC_Init+0x12c>)
 8001cba:	f004 fc37 	bl	800652c <HAL_RTC_SetAlarm_IT>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_RTC_Init+0x114>
  {
    Error_Handler();
 8001cc4:	f7ff ff46 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2029      	movs	r0, #41	; 0x29
 8001cce:	f000 fddc 	bl	800288a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cd2:	2029      	movs	r0, #41	; 0x29
 8001cd4:	f000 fdf3 	bl	80028be <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	3740      	adds	r7, #64	; 0x40
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200000b4 	.word	0x200000b4
 8001ce4:	40002800 	.word	0x40002800

08001ce8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b096      	sub	sp, #88	; 0x58
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	2250      	movs	r2, #80	; 0x50
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f006 fd0b 	bl	8008714 <memset>
  if(rtcHandle->Instance==RTC)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_RTC_MspInit+0x64>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d11d      	bne.n	8001d44 <HAL_RTC_MspInit+0x5c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d0c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 f8fb 	bl	8004f14 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d24:	f7ff ff16 	bl	8001b54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d28:	f7ff ff19 	bl	8001b5e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d2c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d30:	f7ff ff26 	bl	8001b80 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	2029      	movs	r0, #41	; 0x29
 8001d3a:	f000 fda6 	bl	800288a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d3e:	2029      	movs	r0, #41	; 0x29
 8001d40:	f000 fdbd 	bl	80028be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d44:	bf00      	nop
 8001d46:	3758      	adds	r7, #88	; 0x58
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40002800 	.word	0x40002800

08001d50 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d74:	68fb      	ldr	r3, [r7, #12]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <MX_SAI1_Init+0x68>)
 8001d8a:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <MX_SAI1_Init+0x6c>)
 8001d8c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_SAI1_Init+0x68>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_SAI1_Init+0x68>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_SAI1_Init+0x68>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <MX_SAI1_Init+0x68>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_SAI1_Init+0x68>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_SAI1_Init+0x68>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_SAI1_Init+0x68>)
 8001db4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001db8:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_SAI1_Init+0x68>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <MX_SAI1_Init+0x68>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_SAI1_Init+0x68>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <MX_SAI1_Init+0x68>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_SAI1_Init+0x68>)
 8001dda:	f004 ff1f 	bl	8006c1c <HAL_SAI_InitProtocol>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8001de4:	f7ff feb6 	bl	8001b54 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000138 	.word	0x20000138
 8001df0:	40015404 	.word	0x40015404

08001df4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <HAL_SAI_MspInit+0x100>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d172      	bne.n	8001eec <HAL_SAI_MspInit+0xf8>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001e06:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <HAL_SAI_MspInit+0x104>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e0e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e12:	f7ff ff9d 	bl	8001d50 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_SAI_MspInit+0x104>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a36      	ldr	r2, [pc, #216]	; (8001ef8 <HAL_SAI_MspInit+0x104>)
 8001e1e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PB9     ------> SAI1_FS_A
    PC3     ------> SAI1_SD_A
    PA8     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e32:	230d      	movs	r3, #13
 8001e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	482f      	ldr	r0, [pc, #188]	; (8001efc <HAL_SAI_MspInit+0x108>)
 8001e3e:	f001 f839 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e42:	2308      	movs	r3, #8
 8001e44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e52:	230d      	movs	r3, #13
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4828      	ldr	r0, [pc, #160]	; (8001f00 <HAL_SAI_MspInit+0x10c>)
 8001e5e:	f001 f829 	bl	8002eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e74:	230d      	movs	r3, #13
 8001e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e82:	f001 f817 	bl	8002eb4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel1;
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_SAI_MspInit+0x114>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001e8e:	2212      	movs	r2, #18
 8001e90:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001e94:	2210      	movs	r2, #16
 8001e96:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb2:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001ec0:	4810      	ldr	r0, [pc, #64]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001ec2:	f000 fd17 	bl	80028f4 <HAL_DMA_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 8001ecc:	f7ff fe42 	bl	8001b54 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_SAI_MspInit+0x110>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40015404 	.word	0x40015404
 8001ef8:	20000090 	.word	0x20000090
 8001efc:	48000400 	.word	0x48000400
 8001f00:	48000800 	.word	0x48000800
 8001f04:	200000d8 	.word	0x200000d8
 8001f08:	40020008 	.word	0x40020008

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <NMI_Handler+0x4>

08001f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <HardFault_Handler+0x4>

08001f26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <MemManage_Handler+0x4>

08001f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <BusFault_Handler+0x4>

08001f32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <UsageFault_Handler+0x4>

08001f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f66:	f000 fb65 	bl	8002634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	set_alarm_flag = 1;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <EXTI0_IRQHandler+0x14>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f001 f93a 	bl	80031f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200000a8 	.word	0x200000a8

08001f88 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	alarm_snooze_flag = 1;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <EXTI1_IRQHandler+0x14>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8001f92:	2002      	movs	r0, #2
 8001f94:	f001 f92e 	bl	80031f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200000ac 	.word	0x200000ac

08001fa0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	alarm_off_flag = 1;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <EXTI2_IRQHandler+0x14>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 8001faa:	2004      	movs	r0, #4
 8001fac:	f001 f922 	bl	80031f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200000a4 	.word	0x200000a4

08001fb8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	set_time_flag = 1;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <EXTI4_IRQHandler+0x14>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8001fc2:	2010      	movs	r0, #16
 8001fc4:	f001 f916 	bl	80031f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200000b0 	.word	0x200000b0

08001fd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA1_Channel1_IRQHandler+0x10>)
 8001fd6:	f000 fe0f 	bl	8002bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200000d8 	.word	0x200000d8

08001fe4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC A and B alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	alarm_triggered_flag = 1;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <RTC_Alarm_IRQHandler+0x14>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001fee:	4803      	ldr	r0, [pc, #12]	; (8001ffc <RTC_Alarm_IRQHandler+0x18>)
 8001ff0:	f004 fd2e 	bl	8006a50 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200000a0 	.word	0x200000a0
 8001ffc:	200000b4 	.word	0x200000b4

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002030:	f006 fb46 	bl	80086c0 <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20030000 	.word	0x20030000
 8002060:	00000400 	.word	0x00000400
 8002064:	20000094 	.word	0x20000094
 8002068:	200005b8 	.word	0x200005b8

0800206c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <SystemInit+0x98>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <SystemInit+0x98>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002098:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <SystemInit+0x9c>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b6:	f023 0305 	bic.w	r3, r3, #5
 80020ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	4a0d      	ldr	r2, [pc, #52]	; (800210c <SystemInit+0xa0>)
 80020d8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <SystemInit+0xa0>)
 80020e0:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	faf6fefb 	.word	0xfaf6fefb
 800210c:	22041000 	.word	0x22041000

08002110 <LL_AHB2_GRP1_EnableClock>:
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800211e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4313      	orrs	r3, r2
 8002126:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_APB1_GRP1_EnableClock>:
{
 8002142:	b480      	push	{r7}
 8002144:	b085      	sub	sp, #20
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800214a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4313      	orrs	r3, r2
 8002158:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002166:	68fb      	ldr	r3, [r7, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	2224      	movs	r2, #36	; 0x24
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f006 fac6 	bl	8008714 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002188:	463b      	mov	r3, r7
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <MX_TIM2_Init+0xa4>)
 8002194:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002198:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <MX_TIM2_Init+0xa4>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <MX_TIM2_Init+0xa4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 80021a6:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <MX_TIM2_Init+0xa4>)
 80021a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_TIM2_Init+0xa4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_TIM2_Init+0xa4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021ba:	2303      	movs	r3, #3
 80021bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021c2:	2301      	movs	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80021ca:	230a      	movs	r3, #10
 80021cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021d2:	2301      	movs	r3, #1
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	480c      	ldr	r0, [pc, #48]	; (8002218 <MX_TIM2_Init+0xa4>)
 80021e6:	f005 f9bd 	bl	8007564 <HAL_TIM_Encoder_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80021f0:	f7ff fcb0 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021fc:	463b      	mov	r3, r7
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_TIM2_Init+0xa4>)
 8002202:	f005 fb6d 	bl	80078e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800220c:	f7ff fca2 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	3730      	adds	r7, #48	; 0x30
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200001d0 	.word	0x200001d0

0800221c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	d116      	bne.n	800226c <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223e:	2001      	movs	r0, #1
 8002240:	f7ff ff7f 	bl	8002142 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff ff63 	bl	8002110 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800224a:	2303      	movs	r3, #3
 800224c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225a:	2301      	movs	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	4619      	mov	r1, r3
 8002264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002268:	f000 fe24 	bl	8002eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <LL_AHB2_GRP1_EnableClock>:
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4313      	orrs	r3, r2
 800228a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002298:	68fb      	ldr	r3, [r7, #12]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_APB2_GRP1_EnableClock>:
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4013      	ands	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022de:	4a23      	ldr	r2, [pc, #140]	; (800236c <MX_USART1_UART_Init+0x94>)
 80022e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <MX_USART1_UART_Init+0x90>)
 80022fe:	220c      	movs	r2, #12
 8002300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <MX_USART1_UART_Init+0x90>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <MX_USART1_UART_Init+0x90>)
 800231c:	2200      	movs	r2, #0
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002320:	4811      	ldr	r0, [pc, #68]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002322:	f005 fb5d 	bl	80079e0 <HAL_UART_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800232c:	f7ff fc12 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002330:	2100      	movs	r1, #0
 8002332:	480d      	ldr	r0, [pc, #52]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002334:	f006 f8be 	bl	80084b4 <HAL_UARTEx_SetTxFifoThreshold>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800233e:	f7ff fc09 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002342:	2100      	movs	r1, #0
 8002344:	4808      	ldr	r0, [pc, #32]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002346:	f006 f8f3 	bl	8008530 <HAL_UARTEx_SetRxFifoThreshold>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002350:	f7ff fc00 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <MX_USART1_UART_Init+0x90>)
 8002356:	f006 f874 	bl	8008442 <HAL_UARTEx_DisableFifoMode>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002360:	f7ff fbf8 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2000021c 	.word	0x2000021c
 800236c:	40013800 	.word	0x40013800

08002370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b09c      	sub	sp, #112	; 0x70
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	2250      	movs	r2, #80	; 0x50
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f006 f9bf 	bl	8008714 <memset>
  if(uartHandle->Instance==USART1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <HAL_UART_MspInit+0x84>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d124      	bne.n	80023ea <HAL_UART_MspInit+0x7a>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023a0:	2301      	movs	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 fdb1 	bl	8004f14 <HAL_RCCEx_PeriphCLKConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023b8:	f7ff fbcc 	bl	8001b54 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023c0:	f7ff ff71 	bl	80022a6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c4:	2002      	movs	r0, #2
 80023c6:	f7ff ff55 	bl	8002274 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023ca:	23c0      	movs	r3, #192	; 0xc0
 80023cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023da:	2307      	movs	r3, #7
 80023dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023e2:	4619      	mov	r1, r3
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <HAL_UART_MspInit+0x88>)
 80023e6:	f000 fd65 	bl	8002eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023ea:	bf00      	nop
 80023ec:	3770      	adds	r7, #112	; 0x70
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40013800 	.word	0x40013800
 80023f8:	48000400 	.word	0x48000400

080023fc <LL_AHB2_GRP1_EnableClock>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800240a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_APB1_GRP1_EnableClock>:
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800243c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4313      	orrs	r3, r2
 8002444:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4013      	ands	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <MX_USB_PCD_Init+0x4c>)
 8002468:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 800246c:	2208      	movs	r2, #8
 800246e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 8002472:	2202      	movs	r2, #2
 8002474:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 8002478:	2202      	movs	r2, #2
 800247a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 800247e:	2200      	movs	r2, #0
 8002480:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002494:	4804      	ldr	r0, [pc, #16]	; (80024a8 <MX_USB_PCD_Init+0x48>)
 8002496:	f000 fed0 	bl	800323a <HAL_PCD_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80024a0:	f7ff fb58 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200002ac 	.word	0x200002ac
 80024ac:	40006800 	.word	0x40006800

080024b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_PCD_MspInit+0x5c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d118      	bne.n	8002504 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff ff92 	bl	80023fc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80024ea:	230a      	movs	r3, #10
 80024ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f8:	f000 fcdc 	bl	8002eb4 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80024fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002500:	f7ff ff95 	bl	800242e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002504:	bf00      	nop
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40006800 	.word	0x40006800

08002510 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002510:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002512:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002514:	3304      	adds	r3, #4

08002516 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002516:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002518:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800251a:	d3f9      	bcc.n	8002510 <CopyDataInit>
  bx lr
 800251c:	4770      	bx	lr

0800251e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800251e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002520:	3004      	adds	r0, #4

08002522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002522:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002524:	d3fb      	bcc.n	800251e <FillZerobss>
  bx lr
 8002526:	4770      	bx	lr

08002528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002528:	480c      	ldr	r0, [pc, #48]	; (800255c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800252a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800252c:	f7ff fd9e 	bl	800206c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <LoopForever+0x8>)
 8002532:	490c      	ldr	r1, [pc, #48]	; (8002564 <LoopForever+0xc>)
 8002534:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <LoopForever+0x10>)
 8002536:	2300      	movs	r3, #0
 8002538:	f7ff ffed 	bl	8002516 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <LoopForever+0x14>)
 800253e:	490c      	ldr	r1, [pc, #48]	; (8002570 <LoopForever+0x18>)
 8002540:	2300      	movs	r3, #0
 8002542:	f7ff ffee 	bl	8002522 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002546:	480b      	ldr	r0, [pc, #44]	; (8002574 <LoopForever+0x1c>)
 8002548:	490b      	ldr	r1, [pc, #44]	; (8002578 <LoopForever+0x20>)
 800254a:	2300      	movs	r3, #0
 800254c:	f7ff ffe9 	bl	8002522 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002550:	f006 f8bc 	bl	80086cc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002554:	f7ff f830 	bl	80015b8 <main>

08002558 <LoopForever>:

LoopForever:
  b LoopForever
 8002558:	e7fe      	b.n	8002558 <LoopForever>
 800255a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800255c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002560:	20000004 	.word	0x20000004
 8002564:	20000074 	.word	0x20000074
 8002568:	0800a3e0 	.word	0x0800a3e0
  INIT_BSS _sbss, _ebss
 800256c:	20000074 	.word	0x20000074
 8002570:	200005b4 	.word	0x200005b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002574:	20030000 	.word	0x20030000
 8002578:	20030000 	.word	0x20030000

0800257c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC1_IRQHandler>
	...

08002580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_Init+0x3c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_Init+0x3c>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002596:	2003      	movs	r0, #3
 8002598:	f000 f96c 	bl	8002874 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800259c:	2000      	movs	r0, #0
 800259e:	f000 f80f 	bl	80025c0 <HAL_InitTick>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	71fb      	strb	r3, [r7, #7]
 80025ac:	e001      	b.n	80025b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025ae:	f7ff fcad 	bl	8001f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025b2:	79fb      	ldrb	r3, [r7, #7]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	58004000 	.word	0x58004000

080025c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_InitTick+0x6c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d024      	beq.n	800261e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025d4:	f002 f80c 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_InitTick+0x6c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f974 	bl	80028da <HAL_SYSTICK_Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10f      	bne.n	8002618 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b0f      	cmp	r3, #15
 80025fc:	d809      	bhi.n	8002612 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fe:	2200      	movs	r2, #0
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	f04f 30ff 	mov.w	r0, #4294967295
 8002606:	f000 f940 	bl	800288a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_InitTick+0x70>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e007      	b.n	8002622 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e004      	b.n	8002622 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e001      	b.n	8002622 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000000c 	.word	0x2000000c
 8002630:	20000008 	.word	0x20000008

08002634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x20>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_IncTick+0x24>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4413      	add	r3, r2
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_IncTick+0x24>)
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	2000000c 	.word	0x2000000c
 8002658:	200005a0 	.word	0x200005a0

0800265c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return uwTick;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_GetTick+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	200005a0 	.word	0x200005a0

08002674 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_GetTickPrio+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000008 	.word	0x20000008

0800268c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff ffe2 	bl	800265c <HAL_GetTick>
 8002698:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d005      	beq.n	80026b2 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_Delay+0x44>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80026b2:	bf00      	nop
 80026b4:	f7ff ffd2 	bl	800265c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d8f7      	bhi.n	80026b4 <HAL_Delay+0x28>
    {
    }
  }
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000000c 	.word	0x2000000c

080026d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002706:	4a04      	ldr	r2, [pc, #16]	; (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	60d3      	str	r3, [r2, #12]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <__NVIC_GetPriorityGrouping+0x18>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f003 0307 	and.w	r3, r3, #7
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db0b      	blt.n	8002762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4907      	ldr	r1, [pc, #28]	; (8002770 <__NVIC_EnableIRQ+0x38>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2001      	movs	r0, #1
 800275a:	fa00 f202 	lsl.w	r2, r0, r2
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000e100 	.word	0xe000e100

08002774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	2b00      	cmp	r3, #0
 8002786:	db0a      	blt.n	800279e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	490c      	ldr	r1, [pc, #48]	; (80027c0 <__NVIC_SetPriority+0x4c>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	440b      	add	r3, r1
 8002798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800279c:	e00a      	b.n	80027b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4908      	ldr	r1, [pc, #32]	; (80027c4 <__NVIC_SetPriority+0x50>)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	3b04      	subs	r3, #4
 80027ac:	0112      	lsls	r2, r2, #4
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	440b      	add	r3, r1
 80027b2:	761a      	strb	r2, [r3, #24]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000e100 	.word	0xe000e100
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f1c3 0307 	rsb	r3, r3, #7
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	bf28      	it	cs
 80027e6:	2304      	movcs	r3, #4
 80027e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d902      	bls.n	80027f8 <NVIC_EncodePriority+0x30>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3b03      	subs	r3, #3
 80027f6:	e000      	b.n	80027fa <NVIC_EncodePriority+0x32>
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	401a      	ands	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002810:	f04f 31ff 	mov.w	r1, #4294967295
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	43d9      	mvns	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	4313      	orrs	r3, r2
         );
}
 8002822:	4618      	mov	r0, r3
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002840:	d301      	bcc.n	8002846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002842:	2301      	movs	r3, #1
 8002844:	e00f      	b.n	8002866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <SysTick_Config+0x40>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284e:	210f      	movs	r1, #15
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f7ff ff8e 	bl	8002774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <SysTick_Config+0x40>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <SysTick_Config+0x40>)
 8002860:	2207      	movs	r2, #7
 8002862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	e000e010 	.word	0xe000e010

08002874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff29 	bl	80026d4 <__NVIC_SetPriorityGrouping>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff40 	bl	800271c <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff90 	bl	80027c8 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5f 	bl	8002774 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff33 	bl	8002738 <__NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffa4 	bl	8002830 <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e08e      	b.n	8002a24 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_DMA_Init+0x138>)
 800290e:	429a      	cmp	r2, r3
 8002910:	d80f      	bhi.n	8002932 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <HAL_DMA_Init+0x13c>)
 800291a:	4413      	add	r3, r2
 800291c:	4a45      	ldr	r2, [pc, #276]	; (8002a34 <HAL_DMA_Init+0x140>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	009a      	lsls	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <HAL_DMA_Init+0x144>)
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
 8002930:	e00e      	b.n	8002950 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	4b40      	ldr	r3, [pc, #256]	; (8002a3c <HAL_DMA_Init+0x148>)
 800293a:	4413      	add	r3, r2
 800293c:	4a3d      	ldr	r2, [pc, #244]	; (8002a34 <HAL_DMA_Init+0x140>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	009a      	lsls	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a3c      	ldr	r2, [pc, #240]	; (8002a40 <HAL_DMA_Init+0x14c>)
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa22 	bl	8002dec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029b0:	d102      	bne.n	80029b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80029c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d010      	beq.n	80029fa <HAL_DMA_Init+0x106>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d80c      	bhi.n	80029fa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fa41 	bl	8002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	e008      	b.n	8002a0c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40020407 	.word	0x40020407
 8002a30:	bffdfff8 	.word	0xbffdfff8
 8002a34:	cccccccd 	.word	0xcccccccd
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	bffdfbf8 	.word	0xbffdfbf8
 8002a40:	40020400 	.word	0x40020400

08002a44 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_DMA_Start_IT+0x20>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e066      	b.n	8002b32 <HAL_DMA_Start_IT+0xee>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d155      	bne.n	8002b24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f966 	bl	8002d6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 020e 	orr.w	r2, r2, #14
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e00f      	b.n	8002adc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0204 	bic.w	r2, r2, #4
 8002aca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 020a 	orr.w	r2, r2, #10
 8002ada:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e005      	b.n	8002b30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e04f      	b.n	8002bec <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d008      	beq.n	8002b6a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e040      	b.n	8002bec <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 020e 	bic.w	r2, r2, #14
 8002b78:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 021c 	and.w	r2, r3, #28
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00c      	beq.n	8002bda <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bd8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	f003 031c 	and.w	r3, r3, #28
 8002c18:	2204      	movs	r2, #4
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d026      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x7a>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d021      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	f003 021c 	and.w	r2, r3, #28
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2104      	movs	r1, #4
 8002c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d071      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c70:	e06c      	b.n	8002d4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f003 031c 	and.w	r3, r3, #28
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d02e      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0xec>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d029      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 020a 	bic.w	r2, r2, #10
 8002cac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f003 021c 	and.w	r2, r3, #28
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d038      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ce2:	e033      	b.n	8002d4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f003 031c 	and.w	r3, r3, #28
 8002cec:	2208      	movs	r2, #8
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d02a      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x156>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d025      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 020e 	bic.w	r2, r2, #14
 8002d10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f003 021c 	and.w	r2, r3, #28
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
}
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d84:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d96:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f003 021c 	and.w	r2, r3, #28
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d108      	bne.n	8002dce <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dcc:	e007      	b.n	8002dde <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	60da      	str	r2, [r3, #12]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d80a      	bhi.n	8002e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e0c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6493      	str	r3, [r2, #72]	; 0x48
 8002e14:	e007      	b.n	8002e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e20:	4413      	add	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3b08      	subs	r3, #8
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2201      	movs	r2, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40020407 	.word	0x40020407
 8002e5c:	4002081c 	.word	0x4002081c
 8002e60:	cccccccd 	.word	0xcccccccd
 8002e64:	40020880 	.word	0x40020880

08002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002e8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2201      	movs	r2, #1
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	1000823f 	.word	0x1000823f
 8002eb0:	40020940 	.word	0x40020940

08002eb4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec2:	e14c      	b.n	800315e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2101      	movs	r1, #1
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 813e 	beq.w	8003158 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d005      	beq.n	8002ef4 <HAL_GPIO_Init+0x40>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d130      	bne.n	8002f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f003 0201 	and.w	r2, r3, #1
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d017      	beq.n	8002f92 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d123      	bne.n	8002fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	08da      	lsrs	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3208      	adds	r2, #8
 8002fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	6939      	ldr	r1, [r7, #16]
 8002fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0203 	and.w	r2, r3, #3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8098 	beq.w	8003158 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003028:	4a54      	ldr	r2, [pc, #336]	; (800317c <HAL_GPIO_Init+0x2c8>)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003052:	d019      	beq.n	8003088 <HAL_GPIO_Init+0x1d4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a4a      	ldr	r2, [pc, #296]	; (8003180 <HAL_GPIO_Init+0x2cc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_GPIO_Init+0x1d0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a49      	ldr	r2, [pc, #292]	; (8003184 <HAL_GPIO_Init+0x2d0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_GPIO_Init+0x1cc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a48      	ldr	r2, [pc, #288]	; (8003188 <HAL_GPIO_Init+0x2d4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <HAL_GPIO_Init+0x1c8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a47      	ldr	r2, [pc, #284]	; (800318c <HAL_GPIO_Init+0x2d8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_GPIO_Init+0x1c4>
 8003074:	2304      	movs	r3, #4
 8003076:	e008      	b.n	800308a <HAL_GPIO_Init+0x1d6>
 8003078:	2307      	movs	r3, #7
 800307a:	e006      	b.n	800308a <HAL_GPIO_Init+0x1d6>
 800307c:	2303      	movs	r3, #3
 800307e:	e004      	b.n	800308a <HAL_GPIO_Init+0x1d6>
 8003080:	2302      	movs	r3, #2
 8003082:	e002      	b.n	800308a <HAL_GPIO_Init+0x1d6>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_GPIO_Init+0x1d6>
 8003088:	2300      	movs	r3, #0
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	f002 0203 	and.w	r2, r2, #3
 8003090:	0092      	lsls	r2, r2, #2
 8003092:	4093      	lsls	r3, r2
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800309a:	4938      	ldr	r1, [pc, #224]	; (800317c <HAL_GPIO_Init+0x2c8>)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	089b      	lsrs	r3, r3, #2
 80030a0:	3302      	adds	r3, #2
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_GPIO_Init+0x2dc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030cc:	4a30      	ldr	r2, [pc, #192]	; (8003190 <HAL_GPIO_Init+0x2dc>)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_GPIO_Init+0x2dc>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43db      	mvns	r3, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030f6:	4a26      	ldr	r2, [pc, #152]	; (8003190 <HAL_GPIO_Init+0x2dc>)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030fc:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_GPIO_Init+0x2dc>)
 80030fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003122:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <HAL_GPIO_Init+0x2dc>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_GPIO_Init+0x2dc>)
 800312c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003150:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <HAL_GPIO_Init+0x2dc>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f aeab 	bne.w	8002ec4 <HAL_GPIO_Init+0x10>
  }
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40010000 	.word	0x40010000
 8003180:	48000400 	.word	0x48000400
 8003184:	48000800 	.word	0x48000800
 8003188:	48000c00 	.word	0x48000c00
 800318c:	48001000 	.word	0x48001000
 8003190:	58000800 	.word	0x58000800

08003194 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
 80031b0:	e001      	b.n	80031b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
 80031d0:	4613      	mov	r3, r2
 80031d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d4:	787b      	ldrb	r3, [r7, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031e0:	e002      	b.n	80031e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f806 	bl	8003224 <HAL_GPIO_EXTI_Callback>
  }
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	58000800 	.word	0x58000800

08003224 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800323a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323c:	b08b      	sub	sp, #44	; 0x2c
 800323e:	af06      	add	r7, sp, #24
 8003240:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0d7      	b.n	80033fc <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff f925 	bl	80024b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f005 f9e8 	bl	8008648 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	e04c      	b.n	8003318 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	3301      	adds	r3, #1
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	440b      	add	r3, r1
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	b298      	uxth	r0, r3
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	3336      	adds	r3, #54	; 0x36
 80032bc:	4602      	mov	r2, r0
 80032be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	3303      	adds	r3, #3
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	333c      	adds	r3, #60	; 0x3c
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3340      	adds	r3, #64	; 0x40
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	3301      	adds	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3ad      	bcc.n	800327e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
 8003326:	e044      	b.n	80033b2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	f203 1369 	addw	r3, r3, #361	; 0x169
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	3301      	adds	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3b5      	bcc.n	8003328 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	687e      	ldr	r6, [r7, #4]
 80033c4:	466d      	mov	r5, sp
 80033c6:	f106 0410 	add.w	r4, r6, #16
 80033ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	1d33      	adds	r3, r6, #4
 80033d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d6:	6838      	ldr	r0, [r7, #0]
 80033d8:	f005 f951 	bl	800867e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d102      	bne.n	80033fa <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f805 	bl	8003404 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003404 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003428:	b29b      	uxth	r3, r3
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800343c:	b29b      	uxth	r3, r3
 800343e:	f043 0302 	orr.w	r3, r3, #2
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	58000400 	.word	0x58000400

08003478 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <HAL_PWREx_GetVoltageRange+0x18>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	58000400 	.word	0x58000400

08003494 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a6:	d101      	bne.n	80034ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_RCC_HSE_Enable>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <LL_RCC_HSE_Disable>:
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80034da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_RCC_HSE_IsReady>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003506:	d101      	bne.n	800350c <LL_RCC_HSE_IsReady+0x18>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <LL_RCC_HSE_IsReady+0x1a>
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_RCC_HSI_Enable>:
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352a:	6013      	str	r3, [r2, #0]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <LL_RCC_HSI_Disable>:
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003548:	6013      	str	r3, [r2, #0]
}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <LL_RCC_HSI_IsReady>:
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003566:	d101      	bne.n	800356c <LL_RCC_HSI_IsReady+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <LL_RCC_HSI_IsReady+0x1a>
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_RCC_HSI48_Enable>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_RCC_HSI48_Disable>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <LL_RCC_HSI48_IsReady>:
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d101      	bne.n	80035fe <LL_RCC_HSI48_IsReady+0x18>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_RCC_HSI48_IsReady+0x1a>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <LL_RCC_LSE_Enable>:
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_RCC_LSE_Disable>:
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_RCC_LSE_EnableBypass>:
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_RCC_LSE_DisableBypass>:
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <LL_RCC_LSE_IsReady>:
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d101      	bne.n	80036aa <LL_RCC_LSE_IsReady+0x18>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <LL_RCC_LSE_IsReady+0x1a>
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_RCC_LSI1_Enable>:
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80036ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_RCC_LSI1_Disable>:
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80036dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <LL_RCC_LSI1_IsReady>:
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80036fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d101      	bne.n	8003712 <LL_RCC_LSI1_IsReady+0x18>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <LL_RCC_LSI1_IsReady+0x1a>
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_RCC_LSI2_Enable>:
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_RCC_LSI2_Disable>:
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_RCC_LSI2_IsReady>:
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d101      	bne.n	800377a <LL_RCC_LSI2_IsReady+0x18>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <LL_RCC_LSI2_IsReady+0x1a>
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_RCC_LSI2_SetTrimming>:
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800378e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003796:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_RCC_MSI_Enable>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80037b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_RCC_MSI_Disable>:
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6013      	str	r3, [r2, #0]
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_RCC_MSI_IsReady>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d101      	bne.n	8003806 <LL_RCC_MSI_IsReady+0x16>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <LL_RCC_MSI_IsReady+0x18>
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_RCC_MSI_SetRange>:
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_RCC_MSI_GetRange>:
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2bb0      	cmp	r3, #176	; 0xb0
 8003850:	d901      	bls.n	8003856 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003852:	23b0      	movs	r3, #176	; 0xb0
 8003854:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003856:	687b      	ldr	r3, [r7, #4]
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_RCC_SetSysClkSource>:
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 0203 	bic.w	r2, r3, #3
 80038a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_RCC_GetSysClkSource>:
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030c 	and.w	r3, r3, #12
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <LL_RCC_SetAHBPrescaler>:
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80038d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003906:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800390a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_RCC_SetAHB4Prescaler>:
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003932:	f023 020f 	bic.w	r2, r3, #15
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_RCC_SetAPB1Prescaler>:
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_RCC_SetAPB2Prescaler>:
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_GetAHBPrescaler>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_RCC_GetAHB4Prescaler>:
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_RCC_GetAPB1Prescaler>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_RCC_GetAPB2Prescaler>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a16:	6013      	str	r3, [r2, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a34:	6013      	str	r3, [r2, #0]
}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a52:	d101      	bne.n	8003a58 <LL_RCC_PLL_IsReady+0x18>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <LL_RCC_PLL_IsReady+0x1a>
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d101      	bne.n	8003ade <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003afe:	d101      	bne.n	8003b04 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b24:	d101      	bne.n	8003b2a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b48:	d101      	bne.n	8003b4e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b6c:	d101      	bne.n	8003b72 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b08d      	sub	sp, #52	; 0x34
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e37e      	b.n	8004290 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8092 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba0:	f7ff fe89 	bl	80038b6 <LL_RCC_GetSysClkSource>
 8003ba4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba6:	f7ff ff82 	bl	8003aae <LL_RCC_PLL_GetMainSource>
 8003baa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x3e>
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d14c      	bne.n	8003c52 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d149      	bne.n	8003c52 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bbe:	f7ff fe17 	bl	80037f0 <LL_RCC_MSI_IsReady>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x54>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e35d      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003bd8:	f7ff fe2f 	bl	800383a <LL_RCC_MSI_GetRange>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	429c      	cmp	r4, r3
 8003be0:	d914      	bls.n	8003c0c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fd42 	bl	8004670 <RCC_SetFlashLatencyFromMSIRange>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e34c      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fe09 	bl	8003812 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fe2d 	bl	8003864 <LL_RCC_MSI_SetCalibTrimming>
 8003c0a:	e013      	b.n	8003c34 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fdfe 	bl	8003812 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fe22 	bl	8003864 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fd23 	bl	8004670 <RCC_SetFlashLatencyFromMSIRange>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e32d      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c34:	f000 fcdc 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4ab3      	ldr	r2, [pc, #716]	; (8003f08 <HAL_RCC_OscConfig+0x388>)
 8003c3c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c3e:	4bb3      	ldr	r3, [pc, #716]	; (8003f0c <HAL_RCC_OscConfig+0x38c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fcbc 	bl	80025c0 <HAL_InitTick>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d039      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e31e      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01e      	beq.n	8003c98 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c5a:	f7ff fdab 	bl	80037b4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe fcfd 	bl	800265c <HAL_GetTick>
 8003c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c66:	f7fe fcf9 	bl	800265c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e30b      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003c78:	f7ff fdba 	bl	80037f0 <LL_RCC_MSI_IsReady>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f1      	beq.n	8003c66 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fdc3 	bl	8003812 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fde7 	bl	8003864 <LL_RCC_MSI_SetCalibTrimming>
 8003c96:	e015      	b.n	8003cc4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c98:	f7ff fd9b 	bl	80037d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe fcde 	bl	800265c <HAL_GetTick>
 8003ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ca4:	f7fe fcda 	bl	800265c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e2ec      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003cb6:	f7ff fd9b 	bl	80037f0 <LL_RCC_MSI_IsReady>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f1      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x124>
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cc2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d04e      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd0:	f7ff fdf1 	bl	80038b6 <LL_RCC_GetSysClkSource>
 8003cd4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd6:	f7ff feea 	bl	8003aae <LL_RCC_PLL_GetMainSource>
 8003cda:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x16e>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d10d      	bne.n	8003d04 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d10a      	bne.n	8003d04 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cee:	f7ff fc01 	bl	80034f4 <LL_RCC_HSE_IsReady>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d039      	beq.n	8003d6c <HAL_RCC_OscConfig+0x1ec>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d135      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e2c5      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCC_OscConfig+0x194>
 8003d0e:	f7ff fbd3 	bl	80034b8 <LL_RCC_HSE_Enable>
 8003d12:	e001      	b.n	8003d18 <HAL_RCC_OscConfig+0x198>
 8003d14:	f7ff fbdf 	bl	80034d6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe fc9c 	bl	800265c <HAL_GetTick>
 8003d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe fc98 	bl	800265c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e2aa      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003d3a:	f7ff fbdb 	bl	80034f4 <LL_RCC_HSE_IsReady>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f1      	beq.n	8003d28 <HAL_RCC_OscConfig+0x1a8>
 8003d44:	e013      	b.n	8003d6e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe fc89 	bl	800265c <HAL_GetTick>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d4e:	f7fe fc85 	bl	800265c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e297      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003d60:	f7ff fbc8 	bl	80034f4 <LL_RCC_HSE_IsReady>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f1      	bne.n	8003d4e <HAL_RCC_OscConfig+0x1ce>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d051      	beq.n	8003e1e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7a:	f7ff fd9c 	bl	80038b6 <LL_RCC_GetSysClkSource>
 8003d7e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d80:	f7ff fe95 	bl	8003aae <LL_RCC_PLL_GetMainSource>
 8003d84:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x218>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d113      	bne.n	8003dba <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d110      	bne.n	8003dba <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d98:	f7ff fbdc 	bl	8003554 <LL_RCC_HSI_IsReady>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_RCC_OscConfig+0x22e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e270      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fbe0 	bl	8003578 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db8:	e031      	b.n	8003e1e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d019      	beq.n	8003df6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc2:	f7ff fba9 	bl	8003518 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fc49 	bl	800265c <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fe fc45 	bl	800265c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e257      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003de0:	f7ff fbb8 	bl	8003554 <LL_RCC_HSI_IsReady>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f1      	beq.n	8003dce <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fbc2 	bl	8003578 <LL_RCC_HSI_SetCalibTrimming>
 8003df4:	e013      	b.n	8003e1e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	f7ff fb9e 	bl	8003536 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fc2f 	bl	800265c <HAL_GetTick>
 8003dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fe fc2b 	bl	800265c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e23d      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003e14:	f7ff fb9e 	bl	8003554 <LL_RCC_HSI_IsReady>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f1      	bne.n	8003e02 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80a3 	beq.w	8003f7e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d076      	beq.n	8003f2e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d046      	beq.n	8003eda <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003e4c:	f7ff fc55 	bl	80036fa <LL_RCC_LSI1_IsReady>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d113      	bne.n	8003e7e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003e56:	f7ff fc2e 	bl	80036b6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e5a:	f7fe fbff 	bl	800265c <HAL_GetTick>
 8003e5e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003e62:	f7fe fbfb 	bl	800265c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e20d      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003e74:	f7ff fc41 	bl	80036fa <LL_RCC_LSI1_IsReady>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f1      	beq.n	8003e62 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003e7e:	f7ff fc4e 	bl	800371e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe fbeb 	bl	800265c <HAL_GetTick>
 8003e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003e8a:	f7fe fbe7 	bl	800265c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1f9      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003e9c:	f7ff fc61 	bl	8003762 <LL_RCC_LSI2_IsReady>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f1      	beq.n	8003e8a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fc6b 	bl	8003786 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003eb0:	f7ff fc12 	bl	80036d8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fbd2 	bl	800265c <HAL_GetTick>
 8003eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ebc:	f7fe fbce 	bl	800265c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e1e0      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003ece:	f7ff fc14 	bl	80036fa <LL_RCC_LSI1_IsReady>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f1      	bne.n	8003ebc <HAL_RCC_OscConfig+0x33c>
 8003ed8:	e051      	b.n	8003f7e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003eda:	f7ff fbec 	bl	80036b6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fe fbbd 	bl	800265c <HAL_GetTick>
 8003ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ee6:	f7fe fbb9 	bl	800265c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1cb      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003ef8:	f7ff fbff 	bl	80036fa <LL_RCC_LSI1_IsReady>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f1      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003f02:	f7ff fc1d 	bl	8003740 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003f06:	e00c      	b.n	8003f22 <HAL_RCC_OscConfig+0x3a2>
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f10:	f7fe fba4 	bl	800265c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1b6      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003f22:	f7ff fc1e 	bl	8003762 <LL_RCC_LSI2_IsReady>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f1      	bne.n	8003f10 <HAL_RCC_OscConfig+0x390>
 8003f2c:	e027      	b.n	8003f7e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003f2e:	f7ff fc07 	bl	8003740 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7fe fb93 	bl	800265c <HAL_GetTick>
 8003f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f3a:	f7fe fb8f 	bl	800265c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e1a1      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003f4c:	f7ff fc09 	bl	8003762 <LL_RCC_LSI2_IsReady>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f1      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003f56:	f7ff fbbf 	bl	80036d8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fe fb7f 	bl	800265c <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f62:	f7fe fb7b 	bl	800265c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e18d      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003f74:	f7ff fbc1 	bl	80036fa <LL_RCC_LSI1_IsReady>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f1      	bne.n	8003f62 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d05b      	beq.n	8004042 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f8a:	4bb5      	ldr	r3, [pc, #724]	; (8004260 <HAL_RCC_OscConfig+0x6e0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d114      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003f96:	f7ff fa5f 	bl	8003458 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe fb5f 	bl	800265c <HAL_GetTick>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fe fb5b 	bl	800265c <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e16d      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb4:	4baa      	ldr	r3, [pc, #680]	; (8004260 <HAL_RCC_OscConfig+0x6e0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d102      	bne.n	8003fce <HAL_RCC_OscConfig+0x44e>
 8003fc8:	f7ff fb1f 	bl	800360a <LL_RCC_LSE_Enable>
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x468>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d104      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x460>
 8003fd6:	f7ff fb3a 	bl	800364e <LL_RCC_LSE_EnableBypass>
 8003fda:	f7ff fb16 	bl	800360a <LL_RCC_LSE_Enable>
 8003fde:	e003      	b.n	8003fe8 <HAL_RCC_OscConfig+0x468>
 8003fe0:	f7ff fb24 	bl	800362c <LL_RCC_LSE_Disable>
 8003fe4:	f7ff fb44 	bl	8003670 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d014      	beq.n	800401a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe fb34 	bl	800265c <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fe fb30 	bl	800265c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e140      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800400e:	f7ff fb40 	bl	8003692 <LL_RCC_LSE_IsReady>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ef      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x478>
 8004018:	e013      	b.n	8004042 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fe fb1f 	bl	800265c <HAL_GetTick>
 800401e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fe fb1b 	bl	800265c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e12b      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004038:	f7ff fb2b 	bl	8003692 <LL_RCC_LSE_IsReady>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ef      	bne.n	8004022 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d02c      	beq.n	80040a8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d014      	beq.n	8004080 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004056:	f7ff faa4 	bl	80035a2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fe faff 	bl	800265c <HAL_GetTick>
 800405e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004062:	f7fe fafb 	bl	800265c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e10d      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004074:	f7ff fab7 	bl	80035e6 <LL_RCC_HSI48_IsReady>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f1      	beq.n	8004062 <HAL_RCC_OscConfig+0x4e2>
 800407e:	e013      	b.n	80040a8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004080:	f7ff faa0 	bl	80035c4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fe faea 	bl	800265c <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800408c:	f7fe fae6 	bl	800265c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0f8      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800409e:	f7ff faa2 	bl	80035e6 <LL_RCC_HSI48_IsReady>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f1      	bne.n	800408c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80ee 	beq.w	800428e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b2:	f7ff fc00 	bl	80038b6 <LL_RCC_GetSysClkSource>
 80040b6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	f040 80af 	bne.w	8004228 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0203 	and.w	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d123      	bne.n	8004120 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11c      	bne.n	8004120 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d114      	bne.n	8004120 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d10d      	bne.n	8004120 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d106      	bne.n	8004120 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d05d      	beq.n	80041dc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d058      	beq.n	80041d8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0ab      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004138:	f7ff fc73 	bl	8003a22 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800413c:	f7fe fa8e 	bl	800265c <HAL_GetTick>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fe fa8a 	bl	800265c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e09c      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ef      	bne.n	8004144 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <HAL_RCC_OscConfig+0x6e4>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004176:	4311      	orrs	r1, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800417c:	0212      	lsls	r2, r2, #8
 800417e:	4311      	orrs	r1, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004184:	4311      	orrs	r1, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800418a:	4311      	orrs	r1, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004190:	430a      	orrs	r2, r1
 8004192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004196:	4313      	orrs	r3, r2
 8004198:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800419a:	f7ff fc33 	bl	8003a04 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041ae:	f7fe fa55 	bl	800265c <HAL_GetTick>
 80041b2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fe fa51 	bl	800265c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e063      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ef      	beq.n	80041b6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041d6:	e05a      	b.n	800428e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e059      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d151      	bne.n	800428e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041ea:	f7ff fc0b 	bl	8003a04 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041fe:	f7fe fa2d 	bl	800265c <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004206:	f7fe fa29 	bl	800265c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e03b      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ef      	beq.n	8004206 <HAL_RCC_OscConfig+0x686>
 8004226:	e032      	b.n	800428e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b0c      	cmp	r3, #12
 800422c:	d02d      	beq.n	800428a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422e:	f7ff fbf8 	bl	8003a22 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423c:	f023 0303 	bic.w	r3, r3, #3
 8004240:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004254:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004256:	f7fe fa01 	bl	800265c <HAL_GetTick>
 800425a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425c:	e00d      	b.n	800427a <HAL_RCC_OscConfig+0x6fa>
 800425e:	bf00      	nop
 8004260:	58000400 	.word	0x58000400
 8004264:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004268:	f7fe f9f8 	bl	800265c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ef      	bne.n	8004268 <HAL_RCC_OscConfig+0x6e8>
 8004288:	e001      	b.n	800428e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3734      	adds	r7, #52	; 0x34
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}

08004298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e12d      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b98      	ldr	r3, [pc, #608]	; (8004510 <HAL_RCC_ClockConfig+0x278>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d91b      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b95      	ldr	r3, [pc, #596]	; (8004510 <HAL_RCC_ClockConfig+0x278>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 0207 	bic.w	r2, r3, #7
 80042c2:	4993      	ldr	r1, [pc, #588]	; (8004510 <HAL_RCC_ClockConfig+0x278>)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ca:	f7fe f9c7 	bl	800265c <HAL_GetTick>
 80042ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80042d2:	f7fe f9c3 	bl	800265c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e111      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e4:	4b8a      	ldr	r3, [pc, #552]	; (8004510 <HAL_RCC_ClockConfig+0x278>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d1ef      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fae3 	bl	80038ce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004308:	f7fe f9a8 	bl	800265c <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004310:	f7fe f9a4 	bl	800265c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0f2      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004322:	f7ff fbd0 	bl	8003ac6 <LL_RCC_IsActiveFlag_HPRE>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f1      	beq.n	8004310 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d016      	beq.n	8004366 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fada 	bl	80038f6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004342:	f7fe f98b 	bl	800265c <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800434a:	f7fe f987 	bl	800265c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0d5      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800435c:	f7ff fbc5 	bl	8003aea <LL_RCC_IsActiveFlag_C2HPRE>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f1      	beq.n	800434a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d016      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fad3 	bl	8003922 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800437c:	f7fe f96e 	bl	800265c <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004384:	f7fe f96a 	bl	800265c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0b8      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004396:	f7ff fbbb 	bl	8003b10 <LL_RCC_IsActiveFlag_SHDHPRE>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f1      	beq.n	8004384 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d016      	beq.n	80043da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff facd 	bl	8003950 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043b6:	f7fe f951 	bl	800265c <HAL_GetTick>
 80043ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043be:	f7fe f94d 	bl	800265c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e09b      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80043d0:	f7ff fbb1 	bl	8003b36 <LL_RCC_IsActiveFlag_PPRE1>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f1      	beq.n	80043be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d017      	beq.n	8004416 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fac3 	bl	8003978 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043f2:	f7fe f933 	bl	800265c <HAL_GetTick>
 80043f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043fa:	f7fe f92f 	bl	800265c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e07d      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800440c:	f7ff fba5 	bl	8003b5a <LL_RCC_IsActiveFlag_PPRE2>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f1      	beq.n	80043fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d043      	beq.n	80044aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d106      	bne.n	8004438 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800442a:	f7ff f863 	bl	80034f4 <LL_RCC_HSE_IsReady>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d11e      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e067      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b03      	cmp	r3, #3
 800443e:	d106      	bne.n	800444e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004440:	f7ff fafe 	bl	8003a40 <LL_RCC_PLL_IsReady>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d113      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e05c      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004456:	f7ff f9cb 	bl	80037f0 <LL_RCC_MSI_IsReady>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d108      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e051      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004464:	f7ff f876 	bl	8003554 <LL_RCC_HSI_IsReady>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e04a      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fa09 	bl	800388e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447c:	f7fe f8ee 	bl	800265c <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004482:	e00a      	b.n	800449a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004484:	f7fe f8ea 	bl	800265c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e036      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	f7ff fa0c 	bl	80038b6 <LL_RCC_GetSysClkSource>
 800449e:	4602      	mov	r2, r0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d1ec      	bne.n	8004484 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_ClockConfig+0x278>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d21b      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <HAL_RCC_ClockConfig+0x278>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 0207 	bic.w	r2, r3, #7
 80044c0:	4913      	ldr	r1, [pc, #76]	; (8004510 <HAL_RCC_ClockConfig+0x278>)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fe f8c8 	bl	800265c <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80044d0:	f7fe f8c4 	bl	800265c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e012      	b.n	8004508 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_ClockConfig+0x278>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1ef      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80044f0:	f000 f87e 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4a07      	ldr	r2, [pc, #28]	; (8004514 <HAL_RCC_ClockConfig+0x27c>)
 80044f8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80044fa:	f7fe f8bb 	bl	8002674 <HAL_GetTickPrio>
 80044fe:	4603      	mov	r3, r0
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe f85d 	bl	80025c0 <HAL_InitTick>
 8004506:	4603      	mov	r3, r0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	58004000 	.word	0x58004000
 8004514:	20000004 	.word	0x20000004

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	f7ff f9ca 	bl	80038b6 <LL_RCC_GetSysClkSource>
 8004522:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800452a:	f7ff f986 	bl	800383a <LL_RCC_MSI_GetRange>
 800452e:	4603      	mov	r3, r0
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e04b      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d102      	bne.n	800454c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004546:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e045      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b08      	cmp	r3, #8
 8004550:	d10a      	bne.n	8004568 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004552:	f7fe ff9f 	bl	8003494 <LL_RCC_HSE_IsEnabledDiv2>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d102      	bne.n	8004562 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800455c:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e03a      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	e037      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004568:	f7ff faa1 	bl	8003aae <LL_RCC_PLL_GetMainSource>
 800456c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d003      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x64>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d003      	beq.n	8004582 <HAL_RCC_GetSysClockFreq+0x6a>
 800457a:	e00d      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800457e:	60bb      	str	r3, [r7, #8]
        break;
 8004580:	e015      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004582:	f7fe ff87 	bl	8003494 <LL_RCC_HSE_IsEnabledDiv2>
 8004586:	4603      	mov	r3, r0
 8004588:	2b01      	cmp	r3, #1
 800458a:	d102      	bne.n	8004592 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800458c:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800458e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004590:	e00d      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004592:	4b16      	ldr	r3, [pc, #88]	; (80045ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8004594:	60bb      	str	r3, [r7, #8]
        break;
 8004596:	e00a      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004598:	f7ff f94f 	bl	800383a <LL_RCC_MSI_GetRange>
 800459c:	4603      	mov	r3, r0
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045aa:	60bb      	str	r3, [r7, #8]
        break;
 80045ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80045ae:	f7ff fa59 	bl	8003a64 <LL_RCC_PLL_GetN>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	fb03 f402 	mul.w	r4, r3, r2
 80045ba:	f7ff fa6c 	bl	8003a96 <LL_RCC_PLL_GetDivider>
 80045be:	4603      	mov	r3, r0
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	3301      	adds	r3, #1
 80045c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80045c8:	f7ff fa59 	bl	8003a7e <LL_RCC_PLL_GetR>
 80045cc:	4603      	mov	r3, r0
 80045ce:	0f5b      	lsrs	r3, r3, #29
 80045d0:	3301      	adds	r3, #1
 80045d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}
 80045e2:	bf00      	nop
 80045e4:	0800a0fc 	.word	0x0800a0fc
 80045e8:	00f42400 	.word	0x00f42400
 80045ec:	01e84800 	.word	0x01e84800

080045f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f0:	b598      	push	{r3, r4, r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80045f4:	f7ff ff90 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80045f8:	4604      	mov	r4, r0
 80045fa:	f7ff f9d1 	bl	80039a0 <LL_RCC_GetAHBPrescaler>
 80045fe:	4603      	mov	r3, r0
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	4a03      	ldr	r2, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x24>)
 8004608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd98      	pop	{r3, r4, r7, pc}
 8004614:	0800a09c 	.word	0x0800a09c

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b598      	push	{r3, r4, r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800461c:	f7ff ffe8 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8004620:	4604      	mov	r4, r0
 8004622:	f7ff f9d7 	bl	80039d4 <LL_RCC_GetAPB1Prescaler>
 8004626:	4603      	mov	r3, r0
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	fa24 f303 	lsr.w	r3, r4, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd98      	pop	{r3, r4, r7, pc}
 8004640:	0800a0dc 	.word	0x0800a0dc

08004644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004644:	b598      	push	{r3, r4, r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004648:	f7ff ffd2 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 800464c:	4604      	mov	r4, r0
 800464e:	f7ff f9cd 	bl	80039ec <LL_RCC_GetAPB2Prescaler>
 8004652:	4603      	mov	r3, r0
 8004654:	0adb      	lsrs	r3, r3, #11
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	4a04      	ldr	r2, [pc, #16]	; (800466c <HAL_RCC_GetPCLK2Freq+0x28>)
 800465c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd98      	pop	{r3, r4, r7, pc}
 800466c:	0800a0dc 	.word	0x0800a0dc

08004670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2bb0      	cmp	r3, #176	; 0xb0
 800467c:	d903      	bls.n	8004686 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e007      	b.n	8004696 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	4a11      	ldr	r2, [pc, #68]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004694:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004696:	f7ff f98f 	bl	80039b8 <LL_RCC_GetAHB4Prescaler>
 800469a:	4603      	mov	r3, r0
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80046a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	0c9c      	lsrs	r4, r3, #18
 80046ba:	f7fe fedd 	bl	8003478 <HAL_PWREx_GetVoltageRange>
 80046be:	4603      	mov	r3, r0
 80046c0:	4619      	mov	r1, r3
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 f80c 	bl	80046e0 <RCC_SetFlashLatency>
 80046c8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd90      	pop	{r4, r7, pc}
 80046d2:	bf00      	nop
 80046d4:	0800a0fc 	.word	0x0800a0fc
 80046d8:	0800a09c 	.word	0x0800a09c
 80046dc:	431bde83 	.word	0x431bde83

080046e0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b093      	sub	sp, #76	; 0x4c
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <RCC_SetFlashLatency+0xf0>)
 80046ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80046f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80046f6:	4a37      	ldr	r2, [pc, #220]	; (80047d4 <RCC_SetFlashLatency+0xf4>)
 80046f8:	f107 031c 	add.w	r3, r7, #28
 80046fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80046fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004702:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <RCC_SetFlashLatency+0xf8>)
 8004704:	f107 040c 	add.w	r4, r7, #12
 8004708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800470a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800470e:	2300      	movs	r3, #0
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004718:	d11c      	bne.n	8004754 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800471a:	2300      	movs	r3, #0
 800471c:	643b      	str	r3, [r7, #64]	; 0x40
 800471e:	e015      	b.n	800474c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004728:	4413      	add	r3, r2
 800472a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d808      	bhi.n	8004746 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800473c:	4413      	add	r3, r2
 800473e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004742:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004744:	e022      	b.n	800478c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004748:	3301      	adds	r3, #1
 800474a:	643b      	str	r3, [r7, #64]	; 0x40
 800474c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474e:	2b03      	cmp	r3, #3
 8004750:	d9e6      	bls.n	8004720 <RCC_SetFlashLatency+0x40>
 8004752:	e01b      	b.n	800478c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004754:	2300      	movs	r3, #0
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004758:	e015      	b.n	8004786 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004762:	4413      	add	r3, r2
 8004764:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d808      	bhi.n	8004780 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004776:	4413      	add	r3, r2
 8004778:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800477c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800477e:	e005      	b.n	800478c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004782:	3301      	adds	r3, #1
 8004784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004788:	2b02      	cmp	r3, #2
 800478a:	d9e6      	bls.n	800475a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <RCC_SetFlashLatency+0xfc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 0207 	bic.w	r2, r3, #7
 8004794:	4911      	ldr	r1, [pc, #68]	; (80047dc <RCC_SetFlashLatency+0xfc>)
 8004796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800479c:	f7fd ff5e 	bl	800265c <HAL_GetTick>
 80047a0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80047a2:	e008      	b.n	80047b6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047a4:	f7fd ff5a 	bl	800265c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e007      	b.n	80047c6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <RCC_SetFlashLatency+0xfc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d1ef      	bne.n	80047a4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	374c      	adds	r7, #76	; 0x4c
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd90      	pop	{r4, r7, pc}
 80047ce:	bf00      	nop
 80047d0:	0800a070 	.word	0x0800a070
 80047d4:	0800a080 	.word	0x0800a080
 80047d8:	0800a08c 	.word	0x0800a08c
 80047dc:	58004000 	.word	0x58004000

080047e0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f2:	d101      	bne.n	80047f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_RCC_HSE_IsReady>:
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004816:	d101      	bne.n	800481c <LL_RCC_HSE_IsReady+0x18>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <LL_RCC_HSE_IsReady+0x1a>
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_RCC_HSI_IsReady>:
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800482c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483a:	d101      	bne.n	8004840 <LL_RCC_HSI_IsReady+0x18>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <LL_RCC_HSI_IsReady+0x1a>
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <LL_RCC_HSI48_IsReady>:
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	d101      	bne.n	8004864 <LL_RCC_HSI48_IsReady+0x18>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <LL_RCC_HSI48_IsReady+0x1a>
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_RCC_LSE_IsEnabled>:
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <LL_RCC_LSE_IsEnabled+0x18>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <LL_RCC_LSE_IsEnabled+0x1a>
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_RCC_LSE_IsReady>:
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d101      	bne.n	80048ac <LL_RCC_LSE_IsReady+0x18>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <LL_RCC_LSE_IsReady+0x1a>
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <LL_RCC_LSI1_IsReady>:
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d101      	bne.n	80048d0 <LL_RCC_LSI1_IsReady+0x18>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <LL_RCC_LSI1_IsReady+0x1a>
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_RCC_LSI2_IsReady>:
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d101      	bne.n	80048f4 <LL_RCC_LSI2_IsReady+0x18>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <LL_RCC_LSI2_IsReady+0x1a>
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_RCC_MSI_IsReady>:
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d101      	bne.n	8004916 <LL_RCC_MSI_IsReady+0x16>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <LL_RCC_MSI_IsReady+0x18>
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <LL_RCC_MSI_EnablePLLMode>:
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004930:	f043 0304 	orr.w	r3, r3, #4
 8004934:	6013      	str	r3, [r2, #0]
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_RCC_MSI_GetRange>:
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004950:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2bb0      	cmp	r3, #176	; 0xb0
 8004956:	d901      	bls.n	800495c <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004958:	23b0      	movs	r3, #176	; 0xb0
 800495a:	607b      	str	r3, [r7, #4]
  return msiRange;
 800495c:	687b      	ldr	r3, [r7, #4]
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <LL_RCC_SetRFWKPClockSource>:
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800497a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800497e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_GetRFWKPClockSource>:
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_GetAHBPrescaler>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_GetAPB1Prescaler>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_GetAPB2Prescaler>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_SetSMPSClockSource>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_RCC_GetSMPSClockSource>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_RCC_SetSMPSPrescaler>:
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <LL_RCC_GetSMPSPrescaler>:
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8004a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_RCC_SetUSARTClockSource>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f023 0203 	bic.w	r2, r3, #3
 8004a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_RCC_SetLPUARTClockSource>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_RCC_SetI2CClockSource>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	401a      	ands	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <LL_RCC_SetLPTIMClockSource>:
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_RCC_SetSAIClockSource>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <LL_RCC_SetRNGClockSource>:
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <LL_RCC_SetCLK48ClockSource>:
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_RCC_SetUSBClockSource>:
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ffe3 	bl	8004b96 <LL_RCC_SetCLK48ClockSource>
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <LL_RCC_SetADCClockSource>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <LL_RCC_GetUSARTClockSource>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4013      	ands	r3, r2
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_RCC_GetLPUARTClockSource>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4013      	ands	r3, r2
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_RCC_GetI2CClockSource>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8004c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4013      	ands	r3, r2
 8004c58:	091a      	lsrs	r2, r3, #4
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	4313      	orrs	r3, r2
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <LL_RCC_GetLPTIMClockSource>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	0c1a      	lsrs	r2, r3, #16
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4313      	orrs	r3, r2
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <LL_RCC_GetSAIClockSource>:
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4013      	ands	r3, r2
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_RCC_GetRNGClockSource>:
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8004cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4013      	ands	r3, r2
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_GetCLK48ClockSource>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8004cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4013      	ands	r3, r2
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <LL_RCC_GetUSBClockSource>:
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ffe9 	bl	8004cd2 <LL_RCC_GetCLK48ClockSource>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <LL_RCC_GetADCClockSource>:
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4013      	ands	r3, r2
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_RCC_SetRTCClockSource>:
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_GetRTCClockSource>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_RCC_ForceBackupDomainReset>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d88:	bf00      	nop
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004d92:	b480      	push	{r7}
 8004d94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_RCC_PLL_IsReady>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dc6:	d101      	bne.n	8004dcc <LL_RCC_PLL_IsReady+0x18>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <LL_RCC_PLL_IsReady+0x1a>
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <LL_RCC_PLL_GetN>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_PLL_GetP>:
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_RCC_PLL_GetQ>:
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_RCC_PLL_GetDivider>:
{
 8004e22:	b480      	push	{r7}
 8004e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <LL_RCC_PLLSAI1_Enable>:
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_RCC_PLLSAI1_Disable>:
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e6a:	6013      	str	r3, [r2, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <LL_RCC_PLLSAI1_IsReady>:
{
 8004e76:	b480      	push	{r7}
 8004e78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e88:	d101      	bne.n	8004e8e <LL_RCC_PLLSAI1_IsReady+0x18>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <LL_RCC_PLLSAI1_GetN>:
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8004e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	0a1b      	lsrs	r3, r3, #8
 8004ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_PLLSAI1_GetP>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_RCC_PLLSAI1_GetQ>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <LL_RCC_PLLSAI1_GetR>:
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <LL_RCC_PLL_GetMainSource>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0303 	and.w	r3, r3, #3
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004f20:	2300      	movs	r3, #0
 8004f22:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d034      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f38:	d021      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004f3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f3e:	d81b      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f44:	d01d      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004f46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f4a:	d815      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00b      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f54:	d110      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f64:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f66:	e00d      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fd64 	bl	8005a3a <RCCEx_PLLSAI1_ConfigNP>
 8004f72:	4603      	mov	r3, r0
 8004f74:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f76:	e005      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	77fb      	strb	r3, [r7, #31]
        break;
 8004f7c:	e002      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004f7e:	bf00      	nop
 8004f80:	e000      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f84:	7ffb      	ldrb	r3, [r7, #31]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fdd5 	bl	8004b3e <LL_RCC_SetSAIClockSource>
 8004f94:	e001      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	7ffb      	ldrb	r3, [r7, #31]
 8004f98:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d046      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004fa6:	f7ff fed6 	bl	8004d56 <LL_RCC_GetRTCClockSource>
 8004faa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d03c      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fb6:	f7fe fa4f 	bl	8003458 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff feb0 	bl	8004d2a <LL_RCC_SetRTCClockSource>
 8004fca:	e02e      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004fd6:	f7ff fecb 	bl	8004d70 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004fda:	f7ff feda 	bl	8004d92 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004ff6:	f7ff fc3b 	bl	8004870 <LL_RCC_LSE_IsEnabled>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d114      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005000:	f7fd fb2c 	bl	800265c <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005006:	e00b      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fd fb28 	bl	800265c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	; 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d902      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	77fb      	strb	r3, [r7, #31]
              break;
 800501e:	e004      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005020:	f7ff fc38 	bl	8004894 <LL_RCC_LSE_IsReady>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d1ee      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800502a:	7ffb      	ldrb	r3, [r7, #31]
 800502c:	77bb      	strb	r3, [r7, #30]
 800502e:	e001      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	7ffb      	ldrb	r3, [r7, #31]
 8005032:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fd17 	bl	8004a78 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fd22 	bl	8004aa4 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fd4a 	bl	8004b0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fd3f 	bl	8004b0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fd17 	bl	8004ad0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fd0c 	bl	8004ad0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d022      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fd7a 	bl	8004bc2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d6:	d107      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050f0:	d10b      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fcfa 	bl	8005af0 <RCCEx_PLLSAI1_ConfigNQ>
 80050fc:	4603      	mov	r3, r0
 80050fe:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005100:	7ffb      	ldrb	r3, [r7, #31]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005106:	7ffb      	ldrb	r3, [r7, #31]
 8005108:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02b      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d008      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005128:	d003      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fd17 	bl	8004b6a <LL_RCC_SetRNGClockSource>
 800513c:	e00a      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	2000      	movs	r0, #0
 800514a:	f7ff fd0e 	bl	8004b6a <LL_RCC_SetRNGClockSource>
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff fd21 	bl	8004b96 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800515c:	d107      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005176:	2b00      	cmp	r3, #0
 8005178:	d022      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fd2a 	bl	8004bd8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518c:	d107      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800518e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a6:	d10b      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fcfa 	bl	8005ba6 <RCCEx_PLLSAI1_ConfigNR>
 80051b2:	4603      	mov	r3, r0
 80051b4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80051b6:	7ffb      	ldrb	r3, [r7, #31]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80051bc:	7ffb      	ldrb	r3, [r7, #31]
 80051be:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fbca 	bl	800496a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fc26 	bl	8004a38 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fc01 	bl	80049f8 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80051f6:	7fbb      	ldrb	r3, [r7, #30]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b093      	sub	sp, #76	; 0x4c
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 800520c:	f7ff fc28 	bl	8004a60 <LL_RCC_GetSMPSPrescaler>
 8005210:	4603      	mov	r3, r0
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521c:	d12d      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 800521e:	f7ff fd9a 	bl	8004d56 <LL_RCC_GetRTCClockSource>
 8005222:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d109      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800522c:	f7ff fb32 	bl	8004894 <LL_RCC_LSE_IsReady>
 8005230:	4603      	mov	r3, r0
 8005232:	2b01      	cmp	r3, #1
 8005234:	f040 83d8 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8005238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523c:	647b      	str	r3, [r7, #68]	; 0x44
 800523e:	e3d3      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005246:	d110      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8005248:	f7ff fb36 	bl	80048b8 <LL_RCC_LSI1_IsReady>
 800524c:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800524e:	f7ff fb45 	bl	80048dc <LL_RCC_LSI2_IsReady>
 8005252:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d003      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 83c3 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8005262:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005266:	647b      	str	r3, [r7, #68]	; 0x44
 8005268:	e3be      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005270:	f040 83ba 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 8005274:	4bba      	ldr	r3, [pc, #744]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8005276:	647b      	str	r3, [r7, #68]	; 0x44
 8005278:	e3b6      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d130      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8005280:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8005284:	f7ff fd05 	bl	8004c92 <LL_RCC_GetSAIClockSource>
 8005288:	4603      	mov	r3, r0
 800528a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800528e:	d008      	beq.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8005290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005294:	d822      	bhi.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00c      	beq.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800529a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800529e:	d013      	beq.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80052a0:	e01c      	b.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 80052a2:	f7ff fac1 	bl	8004828 <LL_RCC_HSI_IsReady>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f040 837e 	bne.w	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 80052ae:	4bad      	ldr	r3, [pc, #692]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80052b2:	e37a      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80052b4:	f7ff fddf 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	f040 8377 	bne.w	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 80052c0:	f000 fdce 	bl	8005e60 <RCC_PLLSAI1_GetFreqDomain_P>
 80052c4:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80052c6:	e372      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 80052c8:	f7ff fd74 	bl	8004db4 <LL_RCC_PLL_IsReady>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	f040 836f 	bne.w	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 80052d4:	f000 fcc2 	bl	8005c5c <RCC_PLL_GetFreqDomain_P>
 80052d8:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80052da:	e36a      	b.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80052dc:	4ba2      	ldr	r3, [pc, #648]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 80052de:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 80052e0:	e382      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e8:	d168      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 80052ea:	f000 fb87 	bl	80059fc <HAL_RCCEx_GetRngCLKSource>
 80052ee:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d110      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80052f8:	f7ff fade 	bl	80048b8 <LL_RCC_LSI1_IsReady>
 80052fc:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80052fe:	f7ff faed 	bl	80048dc <LL_RCC_LSI2_IsReady>
 8005302:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d003      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b01      	cmp	r3, #1
 800530e:	f040 836b 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8005312:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005316:	647b      	str	r3, [r7, #68]	; 0x44
 8005318:	e366      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005320:	d109      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8005322:	f7ff fab7 	bl	8004894 <LL_RCC_LSE_IsReady>
 8005326:	4603      	mov	r3, r0
 8005328:	2b01      	cmp	r3, #1
 800532a:	f040 835d 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800532e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005332:	647b      	str	r3, [r7, #68]	; 0x44
 8005334:	e358      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800533c:	d10e      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 800533e:	f7ff fd39 	bl	8004db4 <LL_RCC_PLL_IsReady>
 8005342:	4603      	mov	r3, r0
 8005344:	2b01      	cmp	r3, #1
 8005346:	f040 834f 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 800534a:	f000 fcdd 	bl	8005d08 <RCC_PLL_GetFreqDomain_Q>
 800534e:	4603      	mov	r3, r0
 8005350:	4a86      	ldr	r2, [pc, #536]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
 800535a:	e345      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8005362:	d114      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 8005364:	f7ff facc 	bl	8004900 <LL_RCC_MSI_IsReady>
 8005368:	4603      	mov	r3, r0
 800536a:	2b01      	cmp	r3, #1
 800536c:	f040 833c 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 8005370:	f7ff fae6 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005374:	4603      	mov	r3, r0
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	4a7c      	ldr	r2, [pc, #496]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800537e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005382:	4a7a      	ldr	r2, [pc, #488]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	647b      	str	r3, [r7, #68]	; 0x44
 800538c:	e32c      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8005394:	d109      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8005396:	f7ff fd6e 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	f040 8323 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 80053a2:	f000 fdb3 	bl	8005f0c <RCC_PLLSAI1_GetFreqDomain_Q>
 80053a6:	6478      	str	r0, [r7, #68]	; 0x44
 80053a8:	e31e      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 80053aa:	f7ff fa4f 	bl	800484c <LL_RCC_HSI48_IsReady>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 8319 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 80053b6:	4b6b      	ldr	r3, [pc, #428]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80053b8:	647b      	str	r3, [r7, #68]	; 0x44
 80053ba:	e315      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c2:	d13f      	bne.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 80053c4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 80053c8:	f7ff fc93 	bl	8004cf2 <LL_RCC_GetUSBClockSource>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053d2:	d01d      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80053d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053d8:	d82b      	bhi.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 80053da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053de:	d003      	beq.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80053e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80053e6:	e024      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80053e8:	f7ff fd45 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	f040 82e1 	bne.w	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 80053f4:	f000 fd8a 	bl	8005f0c <RCC_PLLSAI1_GetFreqDomain_Q>
 80053f8:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80053fa:	e2dc      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 80053fc:	f7ff fcda 	bl	8004db4 <LL_RCC_PLL_IsReady>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	f040 82d9 	bne.w	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 8005408:	f000 fc7e 	bl	8005d08 <RCC_PLL_GetFreqDomain_Q>
 800540c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800540e:	e2d4      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8005410:	f7ff fa76 	bl	8004900 <LL_RCC_MSI_IsReady>
 8005414:	4603      	mov	r3, r0
 8005416:	2b01      	cmp	r3, #1
 8005418:	f040 82d1 	bne.w	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800541c:	f7ff fa90 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005420:	4603      	mov	r3, r0
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	4a51      	ldr	r2, [pc, #324]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005430:	e2c5      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 8005432:	f7ff fa0b 	bl	800484c <LL_RCC_HSI48_IsReady>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	f040 82c2 	bne.w	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 800543e:	4b4d      	ldr	r3, [pc, #308]	; (8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8005440:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005442:	e2be      	b.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d140      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 800544a:	2003      	movs	r0, #3
 800544c:	f7ff fbda 	bl	8004c04 <LL_RCC_GetUSARTClockSource>
 8005450:	4603      	mov	r3, r0
 8005452:	2b03      	cmp	r3, #3
 8005454:	d013      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8005456:	2b03      	cmp	r3, #3
 8005458:	d81b      	bhi.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800545a:	2b01      	cmp	r3, #1
 800545c:	d002      	beq.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800545e:	2b02      	cmp	r3, #2
 8005460:	d004      	beq.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005462:	e016      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8005464:	f7ff f858 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005468:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800546a:	e2bd      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800546c:	f7ff f9dc 	bl	8004828 <LL_RCC_HSI_IsReady>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	f040 82a7 	bne.w	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 8005478:	4b3a      	ldr	r3, [pc, #232]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800547c:	e2a3      	b.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 800547e:	f7ff fa09 	bl	8004894 <LL_RCC_LSE_IsReady>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	f040 82a0 	bne.w	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 800548a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005490:	e29b      	b.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8005492:	f7ff f841 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005496:	4604      	mov	r4, r0
 8005498:	f7ff fa8a 	bl	80049b0 <LL_RCC_GetAHBPrescaler>
 800549c:	4603      	mov	r3, r0
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	4a34      	ldr	r2, [pc, #208]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80054a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054aa:	fbb4 f4f3 	udiv	r4, r4, r3
 80054ae:	f7ff fa97 	bl	80049e0 <LL_RCC_GetAPB2Prescaler>
 80054b2:	4603      	mov	r3, r0
 80054b4:	0adb      	lsrs	r3, r3, #11
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	4a30      	ldr	r2, [pc, #192]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	fa24 f303 	lsr.w	r3, r4, r3
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 80054ca:	e28d      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d156      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 80054d2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80054d6:	f7ff fba5 	bl	8004c24 <LL_RCC_GetLPUARTClockSource>
 80054da:	4603      	mov	r3, r0
 80054dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054e0:	d016      	beq.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80054e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054e6:	d81d      	bhi.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f2:	d004      	beq.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80054f4:	e016      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80054f6:	f7ff f80f 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80054fa:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80054fc:	e274      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80054fe:	f7ff f993 	bl	8004828 <LL_RCC_HSI_IsReady>
 8005502:	4603      	mov	r3, r0
 8005504:	2b01      	cmp	r3, #1
 8005506:	f040 8262 	bne.w	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 800550a:	4b16      	ldr	r3, [pc, #88]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800550e:	e25e      	b.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8005510:	f7ff f9c0 	bl	8004894 <LL_RCC_LSE_IsReady>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	f040 825b 	bne.w	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 800551c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005520:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005522:	e256      	b.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8005524:	f7fe fff8 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005528:	4604      	mov	r4, r0
 800552a:	f7ff fa41 	bl	80049b0 <LL_RCC_GetAHBPrescaler>
 800552e:	4603      	mov	r3, r0
 8005530:	091b      	lsrs	r3, r3, #4
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	4a10      	ldr	r2, [pc, #64]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8005538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005540:	f7ff fa42 	bl	80049c8 <LL_RCC_GetAPB1Prescaler>
 8005544:	4603      	mov	r3, r0
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	4a0b      	ldr	r2, [pc, #44]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 800554e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	fa24 f303 	lsr.w	r3, r4, r3
 800555a:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 800555c:	e244      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800555e:	bf00      	nop
 8005560:	000f4240 	.word	0x000f4240
 8005564:	00f42400 	.word	0x00f42400
 8005568:	001fff68 	.word	0x001fff68
 800556c:	aaaaaaab 	.word	0xaaaaaaab
 8005570:	0800a0fc 	.word	0x0800a0fc
 8005574:	02dc6c00 	.word	0x02dc6c00
 8005578:	0800a09c 	.word	0x0800a09c
 800557c:	0800a0dc 	.word	0x0800a0dc
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005586:	d12a      	bne.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8005588:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 800558c:	f7ff fbbd 	bl	8004d0a <LL_RCC_GetADCClockSource>
 8005590:	4603      	mov	r3, r0
 8005592:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005596:	d014      	beq.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800559c:	f200 821b 	bhi.w	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 80055a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055a4:	d003      	beq.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80055a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055aa:	d00e      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 80055ac:	e213      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 80055ae:	f7ff fc62 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 8210 	bne.w	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 80055ba:	f000 fbfb 	bl	8005db4 <RCC_PLLSAI1_GetFreqDomain_R>
 80055be:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80055c0:	e20b      	b.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 80055c2:	f7fe ffa9 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80055c6:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80055c8:	e20e      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 80055ca:	f7ff fbf3 	bl	8004db4 <LL_RCC_PLL_IsReady>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 8204 	bne.w	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 80055d6:	f000 fb41 	bl	8005c5c <RCC_PLL_GetFreqDomain_P>
 80055da:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80055dc:	e1ff      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d135      	bne.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 80055e4:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80055e8:	f7ff fb2c 	bl	8004c44 <LL_RCC_GetI2CClockSource>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4ab7      	ldr	r2, [pc, #732]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80055f4:	4ab6      	ldr	r2, [pc, #728]	; (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 80055fa:	e00c      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80055fc:	f7fe ff8c 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005600:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005602:	e1f1      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8005604:	f7ff f910 	bl	8004828 <LL_RCC_HSI_IsReady>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 81e9 	bne.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 8005610:	4bb0      	ldr	r3, [pc, #704]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8005612:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005614:	e1e5      	b.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8005616:	f7fe ff7f 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800561a:	4604      	mov	r4, r0
 800561c:	f7ff f9c8 	bl	80049b0 <LL_RCC_GetAHBPrescaler>
 8005620:	4603      	mov	r3, r0
 8005622:	091b      	lsrs	r3, r3, #4
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	4aab      	ldr	r2, [pc, #684]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800562a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562e:	fbb4 f4f3 	udiv	r4, r4, r3
 8005632:	f7ff f9c9 	bl	80049c8 <LL_RCC_GetAPB1Prescaler>
 8005636:	4603      	mov	r3, r0
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	4aa7      	ldr	r2, [pc, #668]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	fa24 f303 	lsr.w	r3, r4, r3
 800564c:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 800564e:	e1cb      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b08      	cmp	r3, #8
 8005654:	d135      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 8005656:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800565a:	f7ff faf3 	bl	8004c44 <LL_RCC_GetI2CClockSource>
 800565e:	4603      	mov	r3, r0
 8005660:	4a9f      	ldr	r2, [pc, #636]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d003      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8005666:	4a9f      	ldr	r2, [pc, #636]	; (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800566c:	e00c      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800566e:	f7fe ff53 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005672:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8005674:	e1b8      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8005676:	f7ff f8d7 	bl	8004828 <LL_RCC_HSI_IsReady>
 800567a:	4603      	mov	r3, r0
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 81b2 	bne.w	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 8005682:	4b94      	ldr	r3, [pc, #592]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8005684:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8005686:	e1ae      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8005688:	f7fe ff46 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800568c:	4604      	mov	r4, r0
 800568e:	f7ff f98f 	bl	80049b0 <LL_RCC_GetAHBPrescaler>
 8005692:	4603      	mov	r3, r0
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	4a8f      	ldr	r2, [pc, #572]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800569c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80056a4:	f7ff f990 	bl	80049c8 <LL_RCC_GetAPB1Prescaler>
 80056a8:	4603      	mov	r3, r0
 80056aa:	0a1b      	lsrs	r3, r3, #8
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4a8a      	ldr	r2, [pc, #552]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80056b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	fa24 f303 	lsr.w	r3, r4, r3
 80056be:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80056c0:	e192      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d151      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 80056c8:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80056cc:	f7ff face 	bl	8004c6c <LL_RCC_GetLPTIMClockSource>
 80056d0:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	4a84      	ldr	r2, [pc, #528]	; (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d110      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80056da:	f7ff f8ed 	bl	80048b8 <LL_RCC_LSI1_IsReady>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80056e0:	f7ff f8fc 	bl	80048dc <LL_RCC_LSI2_IsReady>
 80056e4:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d003      	beq.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	f040 817a 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80056f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80056f8:	647b      	str	r3, [r7, #68]	; 0x44
 80056fa:	e175      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	4a7b      	ldr	r2, [pc, #492]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8005704:	f7ff f890 	bl	8004828 <LL_RCC_HSI_IsReady>
 8005708:	4603      	mov	r3, r0
 800570a:	2b01      	cmp	r3, #1
 800570c:	f040 816c 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8005710:	4b70      	ldr	r3, [pc, #448]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8005712:	647b      	str	r3, [r7, #68]	; 0x44
 8005714:	e168      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800571c:	d109      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800571e:	f7ff f8b9 	bl	8004894 <LL_RCC_LSE_IsReady>
 8005722:	4603      	mov	r3, r0
 8005724:	2b01      	cmp	r3, #1
 8005726:	f040 815f 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800572a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
 8005730:	e15a      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8005732:	f7fe fef1 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8005736:	4604      	mov	r4, r0
 8005738:	f7ff f93a 	bl	80049b0 <LL_RCC_GetAHBPrescaler>
 800573c:	4603      	mov	r3, r0
 800573e:	091b      	lsrs	r3, r3, #4
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	4a64      	ldr	r2, [pc, #400]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8005746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574a:	fbb4 f4f3 	udiv	r4, r4, r3
 800574e:	f7ff f93b 	bl	80049c8 <LL_RCC_GetAPB1Prescaler>
 8005752:	4603      	mov	r3, r0
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	4a60      	ldr	r2, [pc, #384]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800575c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	fa24 f303 	lsr.w	r3, r4, r3
 8005768:	647b      	str	r3, [r7, #68]	; 0x44
 800576a:	e13d      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b20      	cmp	r3, #32
 8005770:	d151      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 8005772:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005776:	f7ff fa79 	bl	8004c6c <LL_RCC_GetLPTIMClockSource>
 800577a:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	4a5c      	ldr	r2, [pc, #368]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d110      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8005784:	f7ff f898 	bl	80048b8 <LL_RCC_LSI1_IsReady>
 8005788:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800578a:	f7ff f8a7 	bl	80048dc <LL_RCC_LSI2_IsReady>
 800578e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	2b01      	cmp	r3, #1
 8005794:	d003      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 8125 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800579e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80057a2:	647b      	str	r3, [r7, #68]	; 0x44
 80057a4:	e120      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	4a52      	ldr	r2, [pc, #328]	; (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d108      	bne.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80057ae:	f7ff f83b 	bl	8004828 <LL_RCC_HSI_IsReady>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	f040 8117 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 80057ba:	4b46      	ldr	r3, [pc, #280]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80057bc:	647b      	str	r3, [r7, #68]	; 0x44
 80057be:	e113      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 80057c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c2:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80057c6:	d109      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80057c8:	f7ff f864 	bl	8004894 <LL_RCC_LSE_IsReady>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	f040 810a 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80057d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057d8:	647b      	str	r3, [r7, #68]	; 0x44
 80057da:	e105      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80057dc:	f7fe fe9c 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 80057e0:	4604      	mov	r4, r0
 80057e2:	f7ff f8e5 	bl	80049b0 <LL_RCC_GetAHBPrescaler>
 80057e6:	4603      	mov	r3, r0
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	4a3a      	ldr	r2, [pc, #232]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80057f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80057f8:	f7ff f8e6 	bl	80049c8 <LL_RCC_GetAPB1Prescaler>
 80057fc:	4603      	mov	r3, r0
 80057fe:	0a1b      	lsrs	r3, r3, #8
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	4a35      	ldr	r2, [pc, #212]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8005806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	fa24 f303 	lsr.w	r3, r4, r3
 8005812:	647b      	str	r3, [r7, #68]	; 0x44
 8005814:	e0e8      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581c:	d119      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 800581e:	f7ff f8ba 	bl	8004996 <LL_RCC_GetRFWKPClockSource>
 8005822:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800582a:	d109      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800582c:	f7ff f832 	bl	8004894 <LL_RCC_LSE_IsReady>
 8005830:	4603      	mov	r3, r0
 8005832:	2b01      	cmp	r3, #1
 8005834:	f040 80d8 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8005838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
 800583e:	e0d3      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005846:	f040 80cf 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 800584a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800584e:	647b      	str	r3, [r7, #68]	; 0x44
 8005850:	e0ca      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005858:	f040 80c6 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 800585c:	f7ff f8e0 	bl	8004a20 <LL_RCC_GetSMPSClockSource>
 8005860:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8005862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d115      	bne.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8005868:	f7fe ffde 	bl	8004828 <LL_RCC_HSI_IsReady>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	f040 80ba 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8005874:	4920      	ldr	r1, [pc, #128]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8005876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005878:	4613      	mov	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	4413      	add	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	440b      	add	r3, r1
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 800588c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	647b      	str	r3, [r7, #68]	; 0x44
 8005892:	e0a9      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589a:	d131      	bne.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 800589c:	f7fe ffb2 	bl	8004804 <LL_RCC_HSE_IsReady>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	f040 80a0 	bne.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 80058a8:	4913      	ldr	r1, [pc, #76]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80058aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ac:	4613      	mov	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	440b      	add	r3, r1
 80058b6:	3314      	adds	r3, #20
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a10      	ldr	r2, [pc, #64]	; (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 80058c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	647b      	str	r3, [r7, #68]	; 0x44
 80058c8:	e08e      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80058ca:	bf00      	nop
 80058cc:	00030100 	.word	0x00030100
 80058d0:	00030200 	.word	0x00030200
 80058d4:	00f42400 	.word	0x00f42400
 80058d8:	0800a09c 	.word	0x0800a09c
 80058dc:	0800a0dc 	.word	0x0800a0dc
 80058e0:	00301000 	.word	0x00301000
 80058e4:	00302000 	.word	0x00302000
 80058e8:	000c0004 	.word	0x000c0004
 80058ec:	000c0008 	.word	0x000c0008
 80058f0:	00300010 	.word	0x00300010
 80058f4:	00300020 	.word	0x00300020
 80058f8:	0800a13c 	.word	0x0800a13c
 80058fc:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005906:	d16f      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 8005908:	f7ff f81a 	bl	8004940 <LL_RCC_MSI_GetRange>
 800590c:	4603      	mov	r3, r0
 800590e:	2bb0      	cmp	r3, #176	; 0xb0
 8005910:	d037      	beq.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8005912:	2bb0      	cmp	r3, #176	; 0xb0
 8005914:	d844      	bhi.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005916:	2ba0      	cmp	r3, #160	; 0xa0
 8005918:	d024      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 800591a:	2ba0      	cmp	r3, #160	; 0xa0
 800591c:	d840      	bhi.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d002      	beq.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005922:	2b90      	cmp	r3, #144	; 0x90
 8005924:	d00f      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 8005926:	e03b      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8005928:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800592a:	6a19      	ldr	r1, [r3, #32]
 800592c:	4832      	ldr	r0, [pc, #200]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800592e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4403      	add	r3, r0
 800593a:	3310      	adds	r3, #16
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005942:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005944:	e02d      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8005946:	4b2b      	ldr	r3, [pc, #172]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8005948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800594a:	482b      	ldr	r0, [pc, #172]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800594c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4403      	add	r3, r0
 8005958:	330c      	adds	r3, #12
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005960:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005962:	e01e      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8005964:	4b23      	ldr	r3, [pc, #140]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8005966:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005968:	4823      	ldr	r0, [pc, #140]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800596a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4403      	add	r3, r0
 8005976:	3308      	adds	r3, #8
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	fbb1 f3f3 	udiv	r3, r1, r3
 800597e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005980:	e00f      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8005984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005986:	481c      	ldr	r0, [pc, #112]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8005988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800598a:	4613      	mov	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4403      	add	r3, r0
 8005994:	3304      	adds	r3, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	fbb1 f3f3 	udiv	r3, r1, r3
 800599c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 80059a0:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 80059a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a4:	085b      	lsrs	r3, r3, #1
 80059a6:	647b      	str	r3, [r7, #68]	; 0x44
 80059a8:	e01e      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059aa:	bf00      	nop
 80059ac:	e01c      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059ae:	bf00      	nop
 80059b0:	e01a      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059b2:	bf00      	nop
 80059b4:	e018      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059b6:	bf00      	nop
 80059b8:	e016      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059ba:	bf00      	nop
 80059bc:	e014      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059be:	bf00      	nop
 80059c0:	e012      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059c2:	bf00      	nop
 80059c4:	e010      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059c6:	bf00      	nop
 80059c8:	e00e      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059ca:	bf00      	nop
 80059cc:	e00c      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059ce:	bf00      	nop
 80059d0:	e00a      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059d2:	bf00      	nop
 80059d4:	e008      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059d6:	bf00      	nop
 80059d8:	e006      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059da:	bf00      	nop
 80059dc:	e004      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 80059e6:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 80059e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	374c      	adds	r7, #76	; 0x4c
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd90      	pop	{r4, r7, pc}
 80059f2:	bf00      	nop
 80059f4:	0800a0fc 	.word	0x0800a0fc
 80059f8:	0800a13c 	.word	0x0800a13c

080059fc <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8005a02:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8005a06:	f7ff f954 	bl	8004cb2 <LL_RCC_GetRNGClockSource>
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d108      	bne.n	8005a24 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8005a12:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8005a16:	f7ff f95c 	bl	8004cd2 <LL_RCC_GetCLK48ClockSource>
 8005a1a:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a22:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8005a24:	687b      	ldr	r3, [r7, #4]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005a32:	f7fe ff76 	bl	8004922 <LL_RCC_MSI_EnablePLLMode>
}
 8005a36:	bf00      	nop
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a46:	f7ff fa07 	bl	8004e58 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a4a:	f7fc fe07 	bl	800265c <HAL_GetTick>
 8005a4e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a50:	e009      	b.n	8005a66 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a52:	f7fc fe03 	bl	800265c <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d902      	bls.n	8005a66 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	73fb      	strb	r3, [r7, #15]
      break;
 8005a64:	e004      	b.n	8005a70 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a66:	f7ff fa06 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f0      	bne.n	8005a52 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d137      	bne.n	8005ae6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005aa4:	f7ff f9c9 	bl	8004e3a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa8:	f7fc fdd8 	bl	800265c <HAL_GetTick>
 8005aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005aae:	e009      	b.n	8005ac4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ab0:	f7fc fdd4 	bl	800265c <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d902      	bls.n	8005ac4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ac2:	e004      	b.n	8005ace <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ac4:	f7ff f9d7 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d1f0      	bne.n	8005ab0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d108      	bne.n	8005ae6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005afc:	f7ff f9ac 	bl	8004e58 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b00:	f7fc fdac 	bl	800265c <HAL_GetTick>
 8005b04:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b06:	e009      	b.n	8005b1c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b08:	f7fc fda8 	bl	800265c <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d902      	bls.n	8005b1c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1a:	e004      	b.n	8005b26 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b1c:	f7ff f9ab 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f0      	bne.n	8005b08 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d137      	bne.n	8005b9c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b40:	4313      	orrs	r3, r2
 8005b42:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b56:	4313      	orrs	r3, r2
 8005b58:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b5a:	f7ff f96e 	bl	8004e3a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5e:	f7fc fd7d 	bl	800265c <HAL_GetTick>
 8005b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b64:	e009      	b.n	8005b7a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b66:	f7fc fd79 	bl	800265c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d902      	bls.n	8005b7a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	73fb      	strb	r3, [r7, #15]
        break;
 8005b78:	e004      	b.n	8005b84 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b7a:	f7ff f97c 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d1f0      	bne.n	8005b66 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d108      	bne.n	8005b9c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005bb2:	f7ff f951 	bl	8004e58 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bb6:	f7fc fd51 	bl	800265c <HAL_GetTick>
 8005bba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bbc:	e009      	b.n	8005bd2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bbe:	f7fc fd4d 	bl	800265c <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d902      	bls.n	8005bd2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e004      	b.n	8005bdc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bd2:	f7ff f950 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f0      	bne.n	8005bbe <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d137      	bne.n	8005c52 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c10:	f7ff f913 	bl	8004e3a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c14:	f7fc fd22 	bl	800265c <HAL_GetTick>
 8005c18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c1a:	e009      	b.n	8005c30 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c1c:	f7fc fd1e 	bl	800265c <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d902      	bls.n	8005c30 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c2e:	e004      	b.n	8005c3a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c30:	f7ff f921 	bl	8004e76 <LL_RCC_PLLSAI1_IsReady>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d1f0      	bne.n	8005c1c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005c62:	f7ff f94b 	bl	8004efc <LL_RCC_PLL_GetMainSource>
 8005c66:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d017      	beq.n	8005c9e <RCC_PLL_GetFreqDomain_P+0x42>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d81f      	bhi.n	8005cb4 <RCC_PLL_GetFreqDomain_P+0x58>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d003      	beq.n	8005c82 <RCC_PLL_GetFreqDomain_P+0x26>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d00b      	beq.n	8005c98 <RCC_PLL_GetFreqDomain_P+0x3c>
 8005c80:	e018      	b.n	8005cb4 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c82:	f7fe fe5d 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005c86:	4603      	mov	r3, r0
 8005c88:	091b      	lsrs	r3, r3, #4
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <RCC_PLL_GetFreqDomain_P+0xa0>)
 8005c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c94:	607b      	str	r3, [r7, #4]
      break;
 8005c96:	e018      	b.n	8005cca <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005c98:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8005c9a:	607b      	str	r3, [r7, #4]
      break;
 8005c9c:	e015      	b.n	8005cca <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c9e:	f7fe fd9f 	bl	80047e0 <LL_RCC_HSE_IsEnabledDiv2>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d102      	bne.n	8005cae <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8005caa:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005cac:	e00d      	b.n	8005cca <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8005cb0:	607b      	str	r3, [r7, #4]
      break;
 8005cb2:	e00a      	b.n	8005cca <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005cb4:	f7fe fe44 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	4a0e      	ldr	r2, [pc, #56]	; (8005cfc <RCC_PLL_GetFreqDomain_P+0xa0>)
 8005cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc6:	607b      	str	r3, [r7, #4]
      break;
 8005cc8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005cca:	f7ff f885 	bl	8004dd8 <LL_RCC_PLL_GetN>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	fb03 f402 	mul.w	r4, r3, r2
 8005cd6:	f7ff f8a4 	bl	8004e22 <LL_RCC_PLL_GetDivider>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	3301      	adds	r3, #1
 8005ce0:	fbb4 f4f3 	udiv	r4, r4, r3
 8005ce4:	f7ff f885 	bl	8004df2 <LL_RCC_PLL_GetP>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	0c5b      	lsrs	r3, r3, #17
 8005cec:	3301      	adds	r3, #1
 8005cee:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd90      	pop	{r4, r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	0800a0fc 	.word	0x0800a0fc
 8005d00:	00f42400 	.word	0x00f42400
 8005d04:	01e84800 	.word	0x01e84800

08005d08 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005d0e:	f7ff f8f5 	bl	8004efc <LL_RCC_PLL_GetMainSource>
 8005d12:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d017      	beq.n	8005d4a <RCC_PLL_GetFreqDomain_Q+0x42>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d81f      	bhi.n	8005d60 <RCC_PLL_GetFreqDomain_Q+0x58>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d003      	beq.n	8005d2e <RCC_PLL_GetFreqDomain_Q+0x26>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d00b      	beq.n	8005d44 <RCC_PLL_GetFreqDomain_Q+0x3c>
 8005d2c:	e018      	b.n	8005d60 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d2e:	f7fe fe07 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005d32:	4603      	mov	r3, r0
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	4a1b      	ldr	r2, [pc, #108]	; (8005da8 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8005d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d40:	607b      	str	r3, [r7, #4]
      break;
 8005d42:	e018      	b.n	8005d76 <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8005d46:	607b      	str	r3, [r7, #4]
      break;
 8005d48:	e015      	b.n	8005d76 <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d4a:	f7fe fd49 	bl	80047e0 <LL_RCC_HSE_IsEnabledDiv2>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d102      	bne.n	8005d5a <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8005d56:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8005d58:	e00d      	b.n	8005d76 <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8005d5c:	607b      	str	r3, [r7, #4]
      break;
 8005d5e:	e00a      	b.n	8005d76 <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d60:	f7fe fdee 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005d64:	4603      	mov	r3, r0
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8005d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d72:	607b      	str	r3, [r7, #4]
      break;
 8005d74:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d76:	f7ff f82f 	bl	8004dd8 <LL_RCC_PLL_GetN>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	fb03 f402 	mul.w	r4, r3, r2
 8005d82:	f7ff f84e 	bl	8004e22 <LL_RCC_PLL_GetDivider>
 8005d86:	4603      	mov	r3, r0
 8005d88:	091b      	lsrs	r3, r3, #4
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005d90:	f7ff f83b 	bl	8004e0a <LL_RCC_PLL_GetQ>
 8005d94:	4603      	mov	r3, r0
 8005d96:	0e5b      	lsrs	r3, r3, #25
 8005d98:	3301      	adds	r3, #1
 8005d9a:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd90      	pop	{r4, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	0800a0fc 	.word	0x0800a0fc
 8005dac:	00f42400 	.word	0x00f42400
 8005db0:	01e84800 	.word	0x01e84800

08005db4 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8005db4:	b590      	push	{r4, r7, lr}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005dba:	f7ff f89f 	bl	8004efc <LL_RCC_PLL_GetMainSource>
 8005dbe:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d017      	beq.n	8005df6 <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d81f      	bhi.n	8005e0c <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d003      	beq.n	8005dda <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d00b      	beq.n	8005df0 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8005dd8:	e018      	b.n	8005e0c <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dda:	f7fe fdb1 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005dde:	4603      	mov	r3, r0
 8005de0:	091b      	lsrs	r3, r3, #4
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8005de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dec:	607b      	str	r3, [r7, #4]
      break;
 8005dee:	e018      	b.n	8005e22 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005df0:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8005df2:	607b      	str	r3, [r7, #4]
      break;
 8005df4:	e015      	b.n	8005e22 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005df6:	f7fe fcf3 	bl	80047e0 <LL_RCC_HSE_IsEnabledDiv2>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d102      	bne.n	8005e06 <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005e00:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8005e02:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005e04:	e00d      	b.n	8005e22 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8005e06:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8005e08:	607b      	str	r3, [r7, #4]
      break;
 8005e0a:	e00a      	b.n	8005e22 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e0c:	f7fe fd98 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005e10:	4603      	mov	r3, r0
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	4a0e      	ldr	r2, [pc, #56]	; (8005e54 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8005e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e1e:	607b      	str	r3, [r7, #4]
      break;
 8005e20:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005e22:	f7ff f83a 	bl	8004e9a <LL_RCC_PLLSAI1_GetN>
 8005e26:	4602      	mov	r2, r0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	fb03 f402 	mul.w	r4, r3, r2
 8005e2e:	f7fe fff8 	bl	8004e22 <LL_RCC_PLL_GetDivider>
 8005e32:	4603      	mov	r3, r0
 8005e34:	091b      	lsrs	r3, r3, #4
 8005e36:	3301      	adds	r3, #1
 8005e38:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e3c:	f7ff f852 	bl	8004ee4 <LL_RCC_PLLSAI1_GetR>
 8005e40:	4603      	mov	r3, r0
 8005e42:	0f5b      	lsrs	r3, r3, #29
 8005e44:	3301      	adds	r3, #1
 8005e46:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd90      	pop	{r4, r7, pc}
 8005e52:	bf00      	nop
 8005e54:	0800a0fc 	.word	0x0800a0fc
 8005e58:	00f42400 	.word	0x00f42400
 8005e5c:	01e84800 	.word	0x01e84800

08005e60 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005e66:	f7ff f849 	bl	8004efc <LL_RCC_PLL_GetMainSource>
 8005e6a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d017      	beq.n	8005ea2 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d81f      	bhi.n	8005eb8 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d003      	beq.n	8005e86 <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d00b      	beq.n	8005e9c <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8005e84:	e018      	b.n	8005eb8 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e86:	f7fe fd5b 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8005e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e98:	607b      	str	r3, [r7, #4]
      break;
 8005e9a:	e018      	b.n	8005ece <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005e9c:	4b19      	ldr	r3, [pc, #100]	; (8005f04 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8005e9e:	607b      	str	r3, [r7, #4]
      break;
 8005ea0:	e015      	b.n	8005ece <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ea2:	f7fe fc9d 	bl	80047e0 <LL_RCC_HSE_IsEnabledDiv2>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d102      	bne.n	8005eb2 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005eac:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8005eae:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005eb0:	e00d      	b.n	8005ece <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8005eb4:	607b      	str	r3, [r7, #4]
      break;
 8005eb6:	e00a      	b.n	8005ece <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005eb8:	f7fe fd42 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	091b      	lsrs	r3, r3, #4
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	4a0e      	ldr	r2, [pc, #56]	; (8005f00 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8005ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eca:	607b      	str	r3, [r7, #4]
      break;
 8005ecc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005ece:	f7fe ffe4 	bl	8004e9a <LL_RCC_PLLSAI1_GetN>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	fb03 f402 	mul.w	r4, r3, r2
 8005eda:	f7fe ffa2 	bl	8004e22 <LL_RCC_PLL_GetDivider>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	fbb4 f4f3 	udiv	r4, r4, r3
 8005ee8:	f7fe ffe4 	bl	8004eb4 <LL_RCC_PLLSAI1_GetP>
 8005eec:	4603      	mov	r3, r0
 8005eee:	0c5b      	lsrs	r3, r3, #17
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd90      	pop	{r4, r7, pc}
 8005efe:	bf00      	nop
 8005f00:	0800a0fc 	.word	0x0800a0fc
 8005f04:	00f42400 	.word	0x00f42400
 8005f08:	01e84800 	.word	0x01e84800

08005f0c <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005f12:	f7fe fff3 	bl	8004efc <LL_RCC_PLL_GetMainSource>
 8005f16:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d017      	beq.n	8005f4e <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d81f      	bhi.n	8005f64 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d003      	beq.n	8005f32 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d00b      	beq.n	8005f48 <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8005f30:	e018      	b.n	8005f64 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005f32:	f7fe fd05 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005f36:	4603      	mov	r3, r0
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8005f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f44:	607b      	str	r3, [r7, #4]
      break;
 8005f46:	e018      	b.n	8005f7a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8005f4a:	607b      	str	r3, [r7, #4]
      break;
 8005f4c:	e015      	b.n	8005f7a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f4e:	f7fe fc47 	bl	80047e0 <LL_RCC_HSE_IsEnabledDiv2>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d102      	bne.n	8005f5e <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8005f5a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8005f5c:	e00d      	b.n	8005f7a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8005f5e:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8005f60:	607b      	str	r3, [r7, #4]
      break;
 8005f62:	e00a      	b.n	8005f7a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005f64:	f7fe fcec 	bl	8004940 <LL_RCC_MSI_GetRange>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	4a0e      	ldr	r2, [pc, #56]	; (8005fac <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8005f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f76:	607b      	str	r3, [r7, #4]
      break;
 8005f78:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005f7a:	f7fe ff8e 	bl	8004e9a <LL_RCC_PLLSAI1_GetN>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	fb03 f402 	mul.w	r4, r3, r2
 8005f86:	f7fe ff4c 	bl	8004e22 <LL_RCC_PLL_GetDivider>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	3301      	adds	r3, #1
 8005f90:	fbb4 f4f3 	udiv	r4, r4, r3
 8005f94:	f7fe ff9a 	bl	8004ecc <LL_RCC_PLLSAI1_GetQ>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	0e5b      	lsrs	r3, r3, #25
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd90      	pop	{r4, r7, pc}
 8005faa:	bf00      	nop
 8005fac:	0800a0fc 	.word	0x0800a0fc
 8005fb0:	00f42400 	.word	0x00f42400
 8005fb4:	01e84800 	.word	0x01e84800

08005fb8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e090      	b.n	80060ec <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fb fe82 	bl	8001ce8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	22ca      	movs	r2, #202	; 0xca
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2253      	movs	r2, #83	; 0x53
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fd9d 	bl	8006b3c <RTC_EnterInitMode>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2204      	movs	r2, #4
 8006014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e067      	b.n	80060ec <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800602a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6899      	ldr	r1, [r3, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	68d2      	ldr	r2, [r2, #12]
 8006056:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	041a      	lsls	r2, r3, #16
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800607a:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0203 	bic.w	r2, r2, #3
 800608a:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d113      	bne.n	80060da <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fd1c 	bl	8006af0 <HAL_RTC_WaitForSynchro>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	22ff      	movs	r2, #255	; 0xff
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2204      	movs	r2, #4
 80060ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e008      	b.n	80060ec <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	22ff      	movs	r2, #255	; 0xff
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
  }
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060f4:	b590      	push	{r4, r7, lr}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_RTC_SetTime+0x1a>
 800610a:	2302      	movs	r3, #2
 800610c:	e0b2      	b.n	8006274 <HAL_RTC_SetTime+0x180>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2202      	movs	r2, #2
 800611a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d126      	bne.n	8006172 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fd27 	bl	8006b90 <RTC_ByteToBcd2>
 8006142:	4603      	mov	r3, r0
 8006144:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	785b      	ldrb	r3, [r3, #1]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fd20 	bl	8006b90 <RTC_ByteToBcd2>
 8006150:	4603      	mov	r3, r0
 8006152:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006154:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	789b      	ldrb	r3, [r3, #2]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fd18 	bl	8006b90 <RTC_ByteToBcd2>
 8006160:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006162:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	78db      	ldrb	r3, [r3, #3]
 800616a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e018      	b.n	80061a4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2200      	movs	r2, #0
 8006184:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006192:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006198:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	22ca      	movs	r2, #202	; 0xca
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2253      	movs	r2, #83	; 0x53
 80061b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fcc1 	bl	8006b3c <RTC_EnterInitMode>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00d      	beq.n	80061dc <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2204      	movs	r2, #4
 80061cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e04b      	b.n	8006274 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061ea:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061fa:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6899      	ldr	r1, [r3, #8]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	431a      	orrs	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006222:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d113      	bne.n	800625a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fc5c 	bl	8006af0 <HAL_RTC_WaitForSynchro>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	22ff      	movs	r2, #255	; 0xff
 8006244:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2204      	movs	r2, #4
 800624a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e00c      	b.n	8006274 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	22ff      	movs	r2, #255	; 0xff
 8006260:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006272:	2300      	movs	r3, #0
  }
}
 8006274:	4618      	mov	r0, r3
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	bd90      	pop	{r4, r7, pc}

0800627c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80062aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80062ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	0c1b      	lsrs	r3, r3, #16
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	0a1b      	lsrs	r3, r3, #8
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d11a      	bne.n	800632a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fc69 	bl	8006bd0 <RTC_Bcd2ToByte>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fc60 	bl	8006bd0 <RTC_Bcd2ToByte>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	789b      	ldrb	r3, [r3, #2]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fc57 	bl	8006bd0 <RTC_Bcd2ToByte>
 8006322:	4603      	mov	r3, r0
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_RTC_SetDate+0x1a>
 800634a:	2302      	movs	r3, #2
 800634c:	e09c      	b.n	8006488 <HAL_RTC_SetDate+0x154>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2202      	movs	r2, #2
 800635a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10e      	bne.n	8006382 <HAL_RTC_SetDate+0x4e>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	f023 0310 	bic.w	r3, r3, #16
 8006378:	b2db      	uxtb	r3, r3
 800637a:	330a      	adds	r3, #10
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11c      	bne.n	80063c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	78db      	ldrb	r3, [r3, #3]
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fbff 	bl	8006b90 <RTC_ByteToBcd2>
 8006392:	4603      	mov	r3, r0
 8006394:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fbf8 	bl	8006b90 <RTC_ByteToBcd2>
 80063a0:	4603      	mov	r3, r0
 80063a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80063a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	789b      	ldrb	r3, [r3, #2]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fbf0 	bl	8006b90 <RTC_ByteToBcd2>
 80063b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80063b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	e00e      	b.n	80063e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	78db      	ldrb	r3, [r3, #3]
 80063c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063ce:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80063d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	22ca      	movs	r2, #202	; 0xca
 80063e6:	625a      	str	r2, [r3, #36]	; 0x24
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2253      	movs	r2, #83	; 0x53
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fba3 	bl	8006b3c <RTC_EnterInitMode>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	22ff      	movs	r2, #255	; 0xff
 8006402:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2204      	movs	r2, #4
 8006408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e037      	b.n	8006488 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006422:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006426:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006436:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d113      	bne.n	800646e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fb52 	bl	8006af0 <HAL_RTC_WaitForSynchro>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00d      	beq.n	800646e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	22ff      	movs	r2, #255	; 0xff
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2204      	movs	r2, #4
 800645e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e00c      	b.n	8006488 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	22ff      	movs	r2, #255	; 0xff
 8006474:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006486:	2300      	movs	r3, #0
  }
}
 8006488:	4618      	mov	r0, r3
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd90      	pop	{r4, r7, pc}

08006490 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	0b5b      	lsrs	r3, r3, #13
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d11a      	bne.n	8006520 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	78db      	ldrb	r3, [r3, #3]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fb6e 	bl	8006bd0 <RTC_Bcd2ToByte>
 80064f4:	4603      	mov	r3, r0
 80064f6:	461a      	mov	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fb65 	bl	8006bd0 <RTC_Bcd2ToByte>
 8006506:	4603      	mov	r3, r0
 8006508:	461a      	mov	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	789b      	ldrb	r3, [r3, #2]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fb5c 	bl	8006bd0 <RTC_Bcd2ToByte>
 8006518:	4603      	mov	r3, r0
 800651a:	461a      	mov	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800652c:	b590      	push	{r4, r7, lr}
 800652e:	b089      	sub	sp, #36	; 0x24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_RTC_SetAlarm_IT+0x1a>
 8006542:	2302      	movs	r3, #2
 8006544:	e129      	b.n	800679a <HAL_RTC_SetAlarm_IT+0x26e>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2202      	movs	r2, #2
 8006552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d137      	bne.n	80065cc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d102      	bne.n	8006570 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fb0b 	bl	8006b90 <RTC_ByteToBcd2>
 800657a:	4603      	mov	r3, r0
 800657c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fb04 	bl	8006b90 <RTC_ByteToBcd2>
 8006588:	4603      	mov	r3, r0
 800658a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800658c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	789b      	ldrb	r3, [r3, #2]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fafc 	bl	8006b90 <RTC_ByteToBcd2>
 8006598:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800659a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	78db      	ldrb	r3, [r3, #3]
 80065a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80065a4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 faee 	bl	8006b90 <RTC_ByteToBcd2>
 80065b4:	4603      	mov	r3, r0
 80065b6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80065b8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80065c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80065c6:	4313      	orrs	r3, r2
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	e023      	b.n	8006614 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2200      	movs	r2, #0
 80065de:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	785b      	ldrb	r3, [r3, #1]
 80065ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80065ec:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80065f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	78db      	ldrb	r3, [r3, #3]
 80065f8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80065fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006602:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006604:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800660a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006610:	4313      	orrs	r3, r2
 8006612:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	4313      	orrs	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	22ca      	movs	r2, #202	; 0xca
 8006626:	625a      	str	r2, [r3, #36]	; 0x24
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2253      	movs	r2, #83	; 0x53
 800662e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006638:	d14a      	bne.n	80066d0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006648:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800665a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800665c:	f7fb fffe 	bl	800265c <HAL_GetTick>
 8006660:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006662:	e015      	b.n	8006690 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006664:	f7fb fffa 	bl	800265c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006672:	d90d      	bls.n	8006690 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	22ff      	movs	r2, #255	; 0xff
 800667a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2203      	movs	r2, #3
 8006680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e084      	b.n	800679a <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0e2      	beq.n	8006664 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066bc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	e049      	b.n	8006764 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066de:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f462 7220 	orn	r2, r2, #640	; 0x280
 80066f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066f2:	f7fb ffb3 	bl	800265c <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80066f8:	e015      	b.n	8006726 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066fa:	f7fb ffaf 	bl	800265c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006708:	d90d      	bls.n	8006726 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	22ff      	movs	r2, #255	; 0xff
 8006710:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2203      	movs	r2, #3
 8006716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e039      	b.n	800679a <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0e2      	beq.n	80066fa <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006752:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006762:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006764:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x278>)
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676a:	4a0e      	ldr	r2, [pc, #56]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x278>)
 800676c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006774:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x278>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x278>)
 800677a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800677e:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3724      	adds	r7, #36	; 0x24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd90      	pop	{r4, r7, pc}
 80067a2:	bf00      	nop
 80067a4:	58000800 	.word	0x58000800

080067a8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_RTC_DeactivateAlarm+0x18>
 80067bc:	2302      	movs	r3, #2
 80067be:	e083      	b.n	80068c8 <HAL_RTC_DeactivateAlarm+0x120>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	22ca      	movs	r2, #202	; 0xca
 80067d6:	625a      	str	r2, [r3, #36]	; 0x24
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2253      	movs	r2, #83	; 0x53
 80067de:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e6:	d131      	bne.n	800684c <HAL_RTC_DeactivateAlarm+0xa4>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006806:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006808:	f7fb ff28 	bl	800265c <HAL_GetTick>
 800680c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800680e:	e015      	b.n	800683c <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006810:	f7fb ff24 	bl	800265c <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800681e:	d90d      	bls.n	800683c <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2203      	movs	r2, #3
 800682c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e045      	b.n	80068c8 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0e2      	beq.n	8006810 <HAL_RTC_DeactivateAlarm+0x68>
 800684a:	e030      	b.n	80068ae <HAL_RTC_DeactivateAlarm+0x106>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800685a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800686a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800686c:	f7fb fef6 	bl	800265c <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006872:	e015      	b.n	80068a0 <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006874:	f7fb fef2 	bl	800265c <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006882:	d90d      	bls.n	80068a0 <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	22ff      	movs	r2, #255	; 0xff
 800688a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2203      	movs	r2, #3
 8006890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e013      	b.n	80068c8 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0e2      	beq.n	8006874 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	22ff      	movs	r2, #255	; 0xff
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e4:	d143      	bne.n	800696e <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068ec:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006900:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	0c1b      	lsrs	r3, r3, #16
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691c:	b2da      	uxtb	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692a:	b2da      	uxtb	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	b2da      	uxtb	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	0e1b      	lsrs	r3, r3, #24
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006950:	b2da      	uxtb	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	615a      	str	r2, [r3, #20]
 800696c:	e042      	b.n	80069f4 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006974:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006984:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006988:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> 16U);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006994:	b2da      	uxtb	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> 8U);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	0a1b      	lsrs	r3, r3, #8
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)(tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU));
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> 16U);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	0c1b      	lsrs	r3, r3, #16
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	0e1b      	lsrs	r3, r3, #24
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d125      	bne.n	8006a46 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f8e6 	bl	8006bd0 <RTC_Bcd2ToByte>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 f8dd 	bl	8006bd0 <RTC_Bcd2ToByte>
 8006a16:	4603      	mov	r3, r0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	789b      	ldrb	r3, [r3, #2]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f8d4 	bl	8006bd0 <RTC_Bcd2ToByte>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 f8ca 	bl	8006bd0 <RTC_Bcd2ToByte>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d012      	beq.n	8006a8c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f831 	bl	8006adc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006a8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d012      	beq.n	8006ac0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8ad 	bl	8006c08 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006abe:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006ac2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ac6:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	58000800 	.word	0x58000800

08006adc <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b06:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b08:	f7fb fda8 	bl	800265c <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b0e:	e009      	b.n	8006b24 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b10:	f7fb fda4 	bl	800265c <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b1e:	d901      	bls.n	8006b24 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e007      	b.n	8006b34 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0ee      	beq.n	8006b10 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d119      	bne.n	8006b86 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006b5c:	f7fb fd7e 	bl	800265c <HAL_GetTick>
 8006b60:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b62:	e009      	b.n	8006b78 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b64:	f7fb fd7a 	bl	800265c <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b72:	d901      	bls.n	8006b78 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e007      	b.n	8006b88 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0ee      	beq.n	8006b64 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006ba2:	e005      	b.n	8006bb0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	3b0a      	subs	r3, #10
 8006bae:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	2b09      	cmp	r3, #9
 8006bb4:	d8f6      	bhi.n	8006ba4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	7afb      	ldrb	r3, [r7, #11]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b2db      	uxtb	r3, r3
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	b2db      	uxtb	r3, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d904      	bls.n	8006c3a <HAL_SAI_InitProtocol+0x1e>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3b03      	subs	r3, #3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d812      	bhi.n	8006c5e <HAL_SAI_InitProtocol+0x42>
 8006c38:	e008      	b.n	8006c4c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fa83 	bl	800714c <SAI_InitI2S>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4a:	e00b      	b.n	8006c64 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fb2c 	bl	80072b0 <SAI_InitPCM>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	e002      	b.n	8006c64 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
      break;
 8006c62:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f808 	bl	8006c80 <HAL_SAI_Init>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e17c      	b.n	8006f8c <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d10e      	bne.n	8006cba <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a5c      	ldr	r2, [pc, #368]	; (8006e14 <HAL_SAI_Init+0x194>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d107      	bne.n	8006cb6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d103      	bne.n	8006cb6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e168      	b.n	8006f8c <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fb f890 	bl	8001df4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fba5 	bl	8007424 <SAI_Disable>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e153      	b.n	8006f8c <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_SAI_Init+0x7a>
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d003      	beq.n	8006d00 <HAL_SAI_Init+0x80>
 8006cf8:	e006      	b.n	8006d08 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61bb      	str	r3, [r7, #24]
      break;
 8006cfe:	e006      	b.n	8006d0e <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d04:	61bb      	str	r3, [r7, #24]
      break;
 8006d06:	e002      	b.n	8006d0e <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61bb      	str	r3, [r7, #24]
      break;
 8006d0c:	bf00      	nop
  }

  SAI1->GCR = 0;
 8006d0e:	4b42      	ldr	r3, [pc, #264]	; (8006e18 <HAL_SAI_Init+0x198>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d062      	beq.n	8006de2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006d1c:	2040      	movs	r0, #64	; 0x40
 8006d1e:	f7fe fa6f 	bl	8005200 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d22:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d2c:	d120      	bne.n	8006d70 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d102      	bne.n	8006d3c <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8006d36:	2340      	movs	r3, #64	; 0x40
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	e00a      	b.n	8006d52 <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d103      	bne.n	8006d4c <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8006d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d48:	613b      	str	r3, [r7, #16]
 8006d4a:	e002      	b.n	8006d52 <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d50:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	fb02 f303 	mul.w	r3, r2, r3
 8006d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	e017      	b.n	8006da0 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d78:	d101      	bne.n	8006d7e <HAL_SAI_Init+0xfe>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e000      	b.n	8006d80 <HAL_SAI_Init+0x100>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	fb02 f303 	mul.w	r3, r2, r3
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d9e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <HAL_SAI_Init+0x19c>)
 8006da4:	fba2 2303 	umull	r2, r3, r2, r3
 8006da8:	08da      	lsrs	r2, r3, #3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006dae:	6979      	ldr	r1, [r7, #20]
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <HAL_SAI_Init+0x19c>)
 8006db2:	fba3 2301 	umull	r2, r3, r3, r1
 8006db6:	08da      	lsrs	r2, r3, #3
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	1aca      	subs	r2, r1, r3
 8006dc2:	2a08      	cmp	r2, #8
 8006dc4:	d904      	bls.n	8006dd0 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d104      	bne.n	8006de2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	085a      	lsrs	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_SAI_Init+0x172>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d109      	bne.n	8006e06 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_SAI_Init+0x17e>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e001      	b.n	8006e02 <HAL_SAI_Init+0x182>
 8006dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e02:	61fb      	str	r3, [r7, #28]
 8006e04:	e00e      	b.n	8006e24 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d108      	bne.n	8006e20 <HAL_SAI_Init+0x1a0>
 8006e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e12:	e006      	b.n	8006e22 <HAL_SAI_Init+0x1a2>
 8006e14:	40015404 	.word	0x40015404
 8006e18:	40015400 	.word	0x40015400
 8006e1c:	cccccccd 	.word	0xcccccccd
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6819      	ldr	r1, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b59      	ldr	r3, [pc, #356]	; (8006f94 <HAL_SAI_Init+0x314>)
 8006e30:	400b      	ands	r3, r1
 8006e32:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6819      	ldr	r1, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e42:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e48:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8006e5c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e68:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	051b      	lsls	r3, r3, #20
 8006e70:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006e76:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006e94:	f023 030f 	bic.w	r3, r3, #15
 8006e98:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6899      	ldr	r1, [r3, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <HAL_SAI_Init+0x318>)
 8006ec4:	400b      	ands	r3, r1
 8006ec6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6899      	ldr	r1, [r3, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006ed8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8006ede:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8006ee4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	3b01      	subs	r3, #1
 8006eec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006eee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68d9      	ldr	r1, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006f06:	400b      	ands	r3, r1
 8006f08:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68d9      	ldr	r1, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f18:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006f20:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	3b01      	subs	r3, #1
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a18      	ldr	r2, [pc, #96]	; (8006f9c <HAL_SAI_Init+0x31c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d119      	bne.n	8006f72 <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006f3e:	4b18      	ldr	r3, [pc, #96]	; (8006fa0 <HAL_SAI_Init+0x320>)
 8006f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f42:	4a17      	ldr	r2, [pc, #92]	; (8006fa0 <HAL_SAI_Init+0x320>)
 8006f44:	f023 0301 	bic.w	r3, r3, #1
 8006f48:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d10e      	bne.n	8006f72 <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006f60:	490f      	ldr	r1, [pc, #60]	; (8006fa0 <HAL_SAI_Init+0x320>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8006f66:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <HAL_SAI_Init+0x320>)
 8006f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6a:	4a0d      	ldr	r2, [pc, #52]	; (8006fa0 <HAL_SAI_Init+0x320>)
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	f005c010 	.word	0xf005c010
 8006f98:	fff88000 	.word	0xfff88000
 8006f9c:	40015404 	.word	0x40015404
 8006fa0:	40015400 	.word	0x40015400

08006fa4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8006fb2:	f7fb fb53 	bl	800265c <HAL_GetTick>
 8006fb6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_SAI_Transmit_DMA+0x20>
 8006fbe:	88fb      	ldrh	r3, [r7, #6]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e098      	b.n	80070fa <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	f040 8091 	bne.w	80070f8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_SAI_Transmit_DMA+0x40>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e08a      	b.n	80070fa <HAL_SAI_Transmit_DMA+0x156>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	88fa      	ldrh	r2, [r7, #6]
 8006ff6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	88fa      	ldrh	r2, [r7, #6]
 8006ffe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2212      	movs	r2, #18
 800700e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007018:	4a3a      	ldr	r2, [pc, #232]	; (8007104 <HAL_SAI_Transmit_DMA+0x160>)
 800701a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007022:	4a39      	ldr	r2, [pc, #228]	; (8007108 <HAL_SAI_Transmit_DMA+0x164>)
 8007024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702c:	4a37      	ldr	r2, [pc, #220]	; (800710c <HAL_SAI_Transmit_DMA+0x168>)
 800702e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007036:	2200      	movs	r2, #0
 8007038:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007044:	4619      	mov	r1, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	331c      	adds	r3, #28
 800704c:	461a      	mov	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007054:	f7fb fcf6 	bl	8002a44 <HAL_DMA_Start_IT>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e047      	b.n	80070fa <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800706a:	2100      	movs	r1, #0
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f9a1 	bl	80073b4 <SAI_InterruptFlag>
 8007072:	4601      	mov	r1, r0
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007090:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007092:	e015      	b.n	80070c0 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007094:	f7fb fae2 	bl	800265c <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070a2:	d90d      	bls.n	80070c0 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e01c      	b.n	80070fa <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0e2      	beq.n	8007094 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80070ea:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	080074f7 	.word	0x080074f7
 8007108:	08007499 	.word	0x08007499
 800710c:	08007513 	.word	0x08007513

08007110 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <SAI_InitI2S+0x2e>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d103      	bne.n	8007182 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	651a      	str	r2, [r3, #80]	; 0x50
 8007180:	e002      	b.n	8007188 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800718e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007196:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e077      	b.n	80072a2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d107      	bne.n	80071c8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80071c4:	665a      	str	r2, [r3, #100]	; 0x64
 80071c6:	e006      	b.n	80071d6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071ce:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	665a      	str	r2, [r3, #100]	; 0x64
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d84f      	bhi.n	800727c <SAI_InitI2S+0x130>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <SAI_InitI2S+0x98>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	080071f5 	.word	0x080071f5
 80071e8:	08007217 	.word	0x08007217
 80071ec:	08007239 	.word	0x08007239
 80071f0:	0800725b 	.word	0x0800725b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2280      	movs	r2, #128	; 0x80
 80071f8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	085b      	lsrs	r3, r3, #1
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	011a      	lsls	r2, r3, #4
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2240      	movs	r2, #64	; 0x40
 8007212:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007214:	e035      	b.n	8007282 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2280      	movs	r2, #128	; 0x80
 800721a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	085b      	lsrs	r3, r3, #1
 8007220:	019a      	lsls	r2, r3, #6
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2280      	movs	r2, #128	; 0x80
 8007234:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007236:	e024      	b.n	8007282 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	22c0      	movs	r2, #192	; 0xc0
 800723c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	085b      	lsrs	r3, r3, #1
 8007242:	019a      	lsls	r2, r3, #6
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2280      	movs	r2, #128	; 0x80
 8007256:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007258:	e013      	b.n	8007282 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22e0      	movs	r2, #224	; 0xe0
 800725e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	085b      	lsrs	r3, r3, #1
 8007264:	019a      	lsls	r2, r3, #6
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	085b      	lsrs	r3, r3, #1
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2280      	movs	r2, #128	; 0x80
 8007278:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800727a:	e002      	b.n	8007282 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d10b      	bne.n	80072a0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d102      	bne.n	8007294 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2210      	movs	r2, #16
 8007292:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d102      	bne.n	80072a0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2208      	movs	r2, #8
 800729e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop

080072b0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <SAI_InitPCM+0x2e>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d103      	bne.n	80072e6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	651a      	str	r2, [r3, #80]	; 0x50
 80072e4:	e002      	b.n	80072ec <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072f8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007300:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007314:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b04      	cmp	r3, #4
 800731a:	d103      	bne.n	8007324 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2201      	movs	r2, #1
 8007320:	659a      	str	r2, [r3, #88]	; 0x58
 8007322:	e002      	b.n	800732a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	220d      	movs	r2, #13
 8007328:	659a      	str	r2, [r3, #88]	; 0x58
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b03      	cmp	r3, #3
 800732e:	d837      	bhi.n	80073a0 <SAI_InitPCM+0xf0>
 8007330:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <SAI_InitPCM+0x88>)
 8007332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007336:	bf00      	nop
 8007338:	08007349 	.word	0x08007349
 800733c:	0800735f 	.word	0x0800735f
 8007340:	08007375 	.word	0x08007375
 8007344:	0800738b 	.word	0x0800738b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2280      	movs	r2, #128	; 0x80
 800734c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	011a      	lsls	r2, r3, #4
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2240      	movs	r2, #64	; 0x40
 800735a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800735c:	e023      	b.n	80073a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2280      	movs	r2, #128	; 0x80
 8007362:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2280      	movs	r2, #128	; 0x80
 8007370:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007372:	e018      	b.n	80073a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	22c0      	movs	r2, #192	; 0xc0
 8007378:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2280      	movs	r2, #128	; 0x80
 8007386:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007388:	e00d      	b.n	80073a6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22e0      	movs	r2, #224	; 0xe0
 800738e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2280      	movs	r2, #128	; 0x80
 800739c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800739e:	e002      	b.n	80073a6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
      break;
 80073a4:	bf00      	nop
  }

  return status;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d103      	bne.n	80073d2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f043 0308 	orr.w	r3, r3, #8
 80073d0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d10b      	bne.n	80073f2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d003      	beq.n	80073ea <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d103      	bne.n	80073f2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f043 0310 	orr.w	r3, r3, #16
 80073f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d003      	beq.n	8007402 <SAI_InterruptFlag+0x4e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d104      	bne.n	800740c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e003      	b.n	8007414 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f043 0304 	orr.w	r3, r3, #4
 8007412:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007414:	68fb      	ldr	r3, [r7, #12]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800742c:	4b18      	ldr	r3, [pc, #96]	; (8007490 <SAI_Disable+0x6c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a18      	ldr	r2, [pc, #96]	; (8007494 <SAI_Disable+0x70>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	0b1b      	lsrs	r3, r3, #12
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800744e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800745c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	72fb      	strb	r3, [r7, #11]
      break;
 800746a:	e009      	b.n	8007480 <SAI_Disable+0x5c>
    }
    count--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3b01      	subs	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e7      	bne.n	8007450 <SAI_Disable+0x2c>

  return status;
 8007480:	7afb      	ldrb	r3, [r7, #11]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000004 	.word	0x20000004
 8007494:	95cbec1b 	.word	0x95cbec1b

08007498 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d01c      	beq.n	80074e8 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80074c4:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80074c6:	2100      	movs	r1, #0
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff ff73 	bl	80073b4 <SAI_InterruptFlag>
 80074ce:	4603      	mov	r3, r0
 80074d0:	43d9      	mvns	r1, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	400a      	ands	r2, r1
 80074de:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff fe11 	bl	8007110 <HAL_SAI_TxCpltCallback>
#endif
}
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff fe0d 	bl	8007124 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007526:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800753e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff ff6f 	bl	8007424 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fdee 	bl	8007138 <HAL_SAI_ErrorCallback>
#endif
}
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e097      	b.n	80076a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fa fe45 	bl	800221c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80075a8:	f023 0307 	bic.w	r3, r3, #7
 80075ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f000 f907 	bl	80077cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	4313      	orrs	r3, r2
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007604:	f023 030c 	bic.w	r3, r3, #12
 8007608:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	4313      	orrs	r3, r2
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	011a      	lsls	r2, r3, #4
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	031b      	lsls	r3, r3, #12
 8007634:	4313      	orrs	r3, r2
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	4313      	orrs	r3, r2
 800763a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007642:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	4313      	orrs	r3, r2
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d110      	bne.n	8007702 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d102      	bne.n	80076ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076e6:	7b7b      	ldrb	r3, [r7, #13]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d001      	beq.n	80076f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e069      	b.n	80077c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007700:	e031      	b.n	8007766 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b04      	cmp	r3, #4
 8007706:	d110      	bne.n	800772a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d102      	bne.n	8007714 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800770e:	7b3b      	ldrb	r3, [r7, #12]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d001      	beq.n	8007718 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e055      	b.n	80077c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007728:	e01d      	b.n	8007766 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d108      	bne.n	8007742 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d105      	bne.n	8007742 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007736:	7b7b      	ldrb	r3, [r7, #13]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d102      	bne.n	8007742 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800773c:	7b3b      	ldrb	r3, [r7, #12]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d001      	beq.n	8007746 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e03e      	b.n	80077c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2202      	movs	r2, #2
 800775a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_TIM_Encoder_Start+0xc4>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b04      	cmp	r3, #4
 8007770:	d008      	beq.n	8007784 <HAL_TIM_Encoder_Start+0xd4>
 8007772:	e00f      	b.n	8007794 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2201      	movs	r2, #1
 800777a:	2100      	movs	r1, #0
 800777c:	4618      	mov	r0, r3
 800777e:	f000 f889 	bl	8007894 <TIM_CCxChannelCmd>
      break;
 8007782:	e016      	b.n	80077b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2201      	movs	r2, #1
 800778a:	2104      	movs	r1, #4
 800778c:	4618      	mov	r0, r3
 800778e:	f000 f881 	bl	8007894 <TIM_CCxChannelCmd>
      break;
 8007792:	e00e      	b.n	80077b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2201      	movs	r2, #1
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f000 f879 	bl	8007894 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2201      	movs	r2, #1
 80077a8:	2104      	movs	r1, #4
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 f872 	bl	8007894 <TIM_CCxChannelCmd>
      break;
 80077b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0201 	orr.w	r2, r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a2a      	ldr	r2, [pc, #168]	; (8007888 <TIM_Base_SetConfig+0xbc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d003      	beq.n	80077ec <TIM_Base_SetConfig+0x20>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ea:	d108      	bne.n	80077fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a21      	ldr	r2, [pc, #132]	; (8007888 <TIM_Base_SetConfig+0xbc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d00b      	beq.n	800781e <TIM_Base_SetConfig+0x52>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780c:	d007      	beq.n	800781e <TIM_Base_SetConfig+0x52>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a1e      	ldr	r2, [pc, #120]	; (800788c <TIM_Base_SetConfig+0xc0>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d003      	beq.n	800781e <TIM_Base_SetConfig+0x52>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a1d      	ldr	r2, [pc, #116]	; (8007890 <TIM_Base_SetConfig+0xc4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d108      	bne.n	8007830 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	4313      	orrs	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <TIM_Base_SetConfig+0xbc>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d007      	beq.n	800786c <TIM_Base_SetConfig+0xa0>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a0b      	ldr	r2, [pc, #44]	; (800788c <TIM_Base_SetConfig+0xc0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_Base_SetConfig+0xa0>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <TIM_Base_SetConfig+0xc4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d103      	bne.n	8007874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	615a      	str	r2, [r3, #20]
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40014400 	.word	0x40014400
 8007890:	40014800 	.word	0x40014800

08007894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	2201      	movs	r2, #1
 80078a8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6a1a      	ldr	r2, [r3, #32]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	43db      	mvns	r3, r3
 80078b6:	401a      	ands	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a1a      	ldr	r2, [r3, #32]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f003 031f 	and.w	r3, r3, #31
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	fa01 f303 	lsl.w	r3, r1, r3
 80078cc:	431a      	orrs	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	621a      	str	r2, [r3, #32]
}
 80078d2:	bf00      	nop
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
	...

080078e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e04a      	b.n	800798e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a1f      	ldr	r2, [pc, #124]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d108      	bne.n	8007934 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007928:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a12      	ldr	r2, [pc, #72]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007960:	d10c      	bne.n	800797c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	4313      	orrs	r3, r2
 8007972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40012c00 	.word	0x40012c00

080079a0 <LL_RCC_GetUSARTClockSource>:
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80079a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4013      	ands	r3, r2
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <LL_RCC_GetLPUARTClockSource>:
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80079c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4013      	ands	r3, r2
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e042      	b.n	8007a78 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7fa fcb3 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2224      	movs	r2, #36	; 0x24
 8007a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f952 	bl	8007ccc <UART_SetConfig>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e022      	b.n	8007a78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fb4c 	bl	80080d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0201 	orr.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fbd3 	bl	800821c <UART_CheckIdleState>
 8007a76:	4603      	mov	r3, r0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08a      	sub	sp, #40	; 0x28
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	f040 8083 	bne.w	8007ba2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_UART_Transmit+0x28>
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e07b      	b.n	8007ba4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Transmit+0x3a>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e074      	b.n	8007ba4 <HAL_UART_Transmit+0x124>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2221      	movs	r2, #33	; 0x21
 8007ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ad2:	f7fa fdc3 	bl	800265c <HAL_GetTick>
 8007ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	88fa      	ldrh	r2, [r7, #6]
 8007adc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af0:	d108      	bne.n	8007b04 <HAL_UART_Transmit+0x84>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	e003      	b.n	8007b0c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007b14:	e02c      	b.n	8007b70 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2180      	movs	r1, #128	; 0x80
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 fbc6 	bl	80082b2 <UART_WaitOnFlagUntilTimeout>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e039      	b.n	8007ba4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	3302      	adds	r3, #2
 8007b4a:	61bb      	str	r3, [r7, #24]
 8007b4c:	e007      	b.n	8007b5e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1cc      	bne.n	8007b16 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2200      	movs	r2, #0
 8007b84:	2140      	movs	r1, #64	; 0x40
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fb93 	bl	80082b2 <UART_WaitOnFlagUntilTimeout>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e006      	b.n	8007ba4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e000      	b.n	8007ba4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007ba2:	2302      	movs	r3, #2
  }
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b094      	sub	sp, #80	; 0x50
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8007bd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e6      	bne.n	8007bb4 <HAL_UART_AbortTransmit+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3308      	adds	r3, #8
 8007bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <HAL_UART_AbortTransmit+0x3a>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c24:	2b80      	cmp	r3, #128	; 0x80
 8007c26:	d137      	bne.n	8007c98 <HAL_UART_AbortTransmit+0xec>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c48:	61ba      	str	r2, [r7, #24]
 8007c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6979      	ldr	r1, [r7, #20]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	613b      	str	r3, [r7, #16]
   return(result);
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e5      	bne.n	8007c28 <HAL_UART_AbortTransmit+0x7c>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d019      	beq.n	8007c98 <HAL_UART_AbortTransmit+0xec>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c68:	2200      	movs	r2, #0
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fa ff62 	bl	8002b3a <HAL_DMA_Abort>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <HAL_UART_AbortTransmit+0xec>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fb f868 	bl	8002d56 <HAL_DMA_GetError>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d105      	bne.n	8007c98 <HAL_UART_AbortTransmit+0xec>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2210      	movs	r2, #16
 8007c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e015      	b.n	8007cc4 <HAL_UART_AbortTransmit+0x118>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca8:	d107      	bne.n	8007cba <HAL_UART_AbortTransmit+0x10e>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	699a      	ldr	r2, [r3, #24]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0210 	orr.w	r2, r2, #16
 8007cb8:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3750      	adds	r7, #80	; 0x50
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	b5b0      	push	{r4, r5, r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	4ba3      	ldr	r3, [pc, #652]	; (8007f84 <UART_SetConfig+0x2b8>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	69f9      	ldr	r1, [r7, #28]
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a98      	ldr	r2, [pc, #608]	; (8007f88 <UART_SetConfig+0x2bc>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d004      	beq.n	8007d34 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6812      	ldr	r2, [r2, #0]
 8007d46:	69f9      	ldr	r1, [r7, #28]
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d52:	f023 010f 	bic.w	r1, r3, #15
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a89      	ldr	r2, [pc, #548]	; (8007f8c <UART_SetConfig+0x2c0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d120      	bne.n	8007dae <UART_SetConfig+0xe2>
 8007d6c:	2003      	movs	r0, #3
 8007d6e:	f7ff fe17 	bl	80079a0 <LL_RCC_GetUSARTClockSource>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d817      	bhi.n	8007da8 <UART_SetConfig+0xdc>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <UART_SetConfig+0xb4>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007d9d 	.word	0x08007d9d
 8007d88:	08007d97 	.word	0x08007d97
 8007d8c:	08007da3 	.word	0x08007da3
 8007d90:	2301      	movs	r3, #1
 8007d92:	76fb      	strb	r3, [r7, #27]
 8007d94:	e038      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007d96:	2302      	movs	r3, #2
 8007d98:	76fb      	strb	r3, [r7, #27]
 8007d9a:	e035      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	76fb      	strb	r3, [r7, #27]
 8007da0:	e032      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007da2:	2308      	movs	r3, #8
 8007da4:	76fb      	strb	r3, [r7, #27]
 8007da6:	e02f      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007da8:	2310      	movs	r3, #16
 8007daa:	76fb      	strb	r3, [r7, #27]
 8007dac:	e02c      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a75      	ldr	r2, [pc, #468]	; (8007f88 <UART_SetConfig+0x2bc>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d125      	bne.n	8007e04 <UART_SetConfig+0x138>
 8007db8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007dbc:	f7ff fe00 	bl	80079c0 <LL_RCC_GetLPUARTClockSource>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dc6:	d017      	beq.n	8007df8 <UART_SetConfig+0x12c>
 8007dc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dcc:	d817      	bhi.n	8007dfe <UART_SetConfig+0x132>
 8007dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd2:	d00b      	beq.n	8007dec <UART_SetConfig+0x120>
 8007dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd8:	d811      	bhi.n	8007dfe <UART_SetConfig+0x132>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <UART_SetConfig+0x11a>
 8007dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de2:	d006      	beq.n	8007df2 <UART_SetConfig+0x126>
 8007de4:	e00b      	b.n	8007dfe <UART_SetConfig+0x132>
 8007de6:	2300      	movs	r3, #0
 8007de8:	76fb      	strb	r3, [r7, #27]
 8007dea:	e00d      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007dec:	2302      	movs	r3, #2
 8007dee:	76fb      	strb	r3, [r7, #27]
 8007df0:	e00a      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007df2:	2304      	movs	r3, #4
 8007df4:	76fb      	strb	r3, [r7, #27]
 8007df6:	e007      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007df8:	2308      	movs	r3, #8
 8007dfa:	76fb      	strb	r3, [r7, #27]
 8007dfc:	e004      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007dfe:	2310      	movs	r3, #16
 8007e00:	76fb      	strb	r3, [r7, #27]
 8007e02:	e001      	b.n	8007e08 <UART_SetConfig+0x13c>
 8007e04:	2310      	movs	r3, #16
 8007e06:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a5e      	ldr	r2, [pc, #376]	; (8007f88 <UART_SetConfig+0x2bc>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	f040 808b 	bne.w	8007f2a <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e14:	7efb      	ldrb	r3, [r7, #27]
 8007e16:	2b08      	cmp	r3, #8
 8007e18:	d823      	bhi.n	8007e62 <UART_SetConfig+0x196>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <UART_SetConfig+0x154>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e63 	.word	0x08007e63
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e63 	.word	0x08007e63
 8007e30:	08007e53 	.word	0x08007e53
 8007e34:	08007e63 	.word	0x08007e63
 8007e38:	08007e63 	.word	0x08007e63
 8007e3c:	08007e63 	.word	0x08007e63
 8007e40:	08007e5b 	.word	0x08007e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e44:	f7fc fbe8 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8007e48:	6178      	str	r0, [r7, #20]
        break;
 8007e4a:	e00f      	b.n	8007e6c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e4c:	4b50      	ldr	r3, [pc, #320]	; (8007f90 <UART_SetConfig+0x2c4>)
 8007e4e:	617b      	str	r3, [r7, #20]
        break;
 8007e50:	e00c      	b.n	8007e6c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e52:	f7fc fb61 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8007e56:	6178      	str	r0, [r7, #20]
        break;
 8007e58:	e008      	b.n	8007e6c <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e5e:	617b      	str	r3, [r7, #20]
        break;
 8007e60:	e004      	b.n	8007e6c <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	76bb      	strb	r3, [r7, #26]
        break;
 8007e6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 811a 	beq.w	80080a8 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	4a46      	ldr	r2, [pc, #280]	; (8007f94 <UART_SetConfig+0x2c8>)
 8007e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	4413      	add	r3, r2
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d305      	bcc.n	8007ea4 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d902      	bls.n	8007eaa <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	76bb      	strb	r3, [r7, #26]
 8007ea8:	e0fe      	b.n	80080a8 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f04f 0100 	mov.w	r1, #0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	4a37      	ldr	r2, [pc, #220]	; (8007f94 <UART_SetConfig+0x2c8>)
 8007eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	f7f8 fe2b 	bl	8000b1c <__aeabi_uldivmod>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4619      	mov	r1, r3
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	f04f 0300 	mov.w	r3, #0
 8007ed6:	020b      	lsls	r3, r1, #8
 8007ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007edc:	0202      	lsls	r2, r0, #8
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	6849      	ldr	r1, [r1, #4]
 8007ee2:	0849      	lsrs	r1, r1, #1
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	f04f 0100 	mov.w	r1, #0
 8007eea:	1814      	adds	r4, r2, r0
 8007eec:	eb43 0501 	adc.w	r5, r3, r1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 fe0d 	bl	8000b1c <__aeabi_uldivmod>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4613      	mov	r3, r2
 8007f08:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f10:	d308      	bcc.n	8007f24 <UART_SetConfig+0x258>
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f18:	d204      	bcs.n	8007f24 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	60da      	str	r2, [r3, #12]
 8007f22:	e0c1      	b.n	80080a8 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	76bb      	strb	r3, [r7, #26]
 8007f28:	e0be      	b.n	80080a8 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f32:	d16a      	bne.n	800800a <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007f34:	7efb      	ldrb	r3, [r7, #27]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	2b07      	cmp	r3, #7
 8007f3a:	d82d      	bhi.n	8007f98 <UART_SetConfig+0x2cc>
 8007f3c:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <UART_SetConfig+0x278>)
 8007f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f42:	bf00      	nop
 8007f44:	08007f65 	.word	0x08007f65
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f99 	.word	0x08007f99
 8007f50:	08007f73 	.word	0x08007f73
 8007f54:	08007f99 	.word	0x08007f99
 8007f58:	08007f99 	.word	0x08007f99
 8007f5c:	08007f99 	.word	0x08007f99
 8007f60:	08007f7b 	.word	0x08007f7b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f64:	f7fc fb6e 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 8007f68:	6178      	str	r0, [r7, #20]
        break;
 8007f6a:	e01a      	b.n	8007fa2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f6c:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <UART_SetConfig+0x2c4>)
 8007f6e:	617b      	str	r3, [r7, #20]
        break;
 8007f70:	e017      	b.n	8007fa2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f72:	f7fc fad1 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8007f76:	6178      	str	r0, [r7, #20]
        break;
 8007f78:	e013      	b.n	8007fa2 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f7e:	617b      	str	r3, [r7, #20]
        break;
 8007f80:	e00f      	b.n	8007fa2 <UART_SetConfig+0x2d6>
 8007f82:	bf00      	nop
 8007f84:	cfff69f3 	.word	0xcfff69f3
 8007f88:	40008000 	.word	0x40008000
 8007f8c:	40013800 	.word	0x40013800
 8007f90:	00f42400 	.word	0x00f42400
 8007f94:	0800a19c 	.word	0x0800a19c
      default:
        pclk = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	76bb      	strb	r3, [r7, #26]
        break;
 8007fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d07f      	beq.n	80080a8 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	4a48      	ldr	r2, [pc, #288]	; (80080d0 <UART_SetConfig+0x404>)
 8007fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fba:	005a      	lsls	r2, r3, #1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	441a      	add	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b0f      	cmp	r3, #15
 8007fd4:	d916      	bls.n	8008004 <UART_SetConfig+0x338>
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fdc:	d212      	bcs.n	8008004 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f023 030f 	bic.w	r3, r3, #15
 8007fe6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	89fb      	ldrh	r3, [r7, #14]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	89fa      	ldrh	r2, [r7, #14]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	e051      	b.n	80080a8 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	76bb      	strb	r3, [r7, #26]
 8008008:	e04e      	b.n	80080a8 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800800a:	7efb      	ldrb	r3, [r7, #27]
 800800c:	3b01      	subs	r3, #1
 800800e:	2b07      	cmp	r3, #7
 8008010:	d821      	bhi.n	8008056 <UART_SetConfig+0x38a>
 8008012:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <UART_SetConfig+0x34c>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008039 	.word	0x08008039
 800801c:	08008041 	.word	0x08008041
 8008020:	08008057 	.word	0x08008057
 8008024:	08008047 	.word	0x08008047
 8008028:	08008057 	.word	0x08008057
 800802c:	08008057 	.word	0x08008057
 8008030:	08008057 	.word	0x08008057
 8008034:	0800804f 	.word	0x0800804f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008038:	f7fc fb04 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 800803c:	6178      	str	r0, [r7, #20]
        break;
 800803e:	e00f      	b.n	8008060 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008040:	4b24      	ldr	r3, [pc, #144]	; (80080d4 <UART_SetConfig+0x408>)
 8008042:	617b      	str	r3, [r7, #20]
        break;
 8008044:	e00c      	b.n	8008060 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008046:	f7fc fa67 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 800804a:	6178      	str	r0, [r7, #20]
        break;
 800804c:	e008      	b.n	8008060 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008052:	617b      	str	r3, [r7, #20]
        break;
 8008054:	e004      	b.n	8008060 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	76bb      	strb	r3, [r7, #26]
        break;
 800805e:	bf00      	nop
    }

    if (pclk != 0U)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d020      	beq.n	80080a8 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <UART_SetConfig+0x404>)
 800806c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008070:	461a      	mov	r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	fbb3 f2f2 	udiv	r2, r3, r2
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	441a      	add	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	fbb2 f3f3 	udiv	r3, r2, r3
 8008088:	b29b      	uxth	r3, r3
 800808a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b0f      	cmp	r3, #15
 8008090:	d908      	bls.n	80080a4 <UART_SetConfig+0x3d8>
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008098:	d204      	bcs.n	80080a4 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	60da      	str	r2, [r3, #12]
 80080a2:	e001      	b.n	80080a8 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80080c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bdb0      	pop	{r4, r5, r7, pc}
 80080ce:	bf00      	nop
 80080d0:	0800a19c 	.word	0x0800a19c
 80080d4:	00f42400 	.word	0x00f42400

080080d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816c:	f003 0310 	and.w	r3, r3, #16
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	f003 0320 	and.w	r3, r3, #32
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01a      	beq.n	80081ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d6:	d10a      	bne.n	80081ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	605a      	str	r2, [r3, #4]
  }
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af02      	add	r7, sp, #8
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800822c:	f7fa fa16 	bl	800265c <HAL_GetTick>
 8008230:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0308 	and.w	r3, r3, #8
 800823c:	2b08      	cmp	r3, #8
 800823e:	d10e      	bne.n	800825e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f82f 	bl	80082b2 <UART_WaitOnFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e025      	b.n	80082aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b04      	cmp	r3, #4
 800826a:	d10e      	bne.n	800828a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f819 	bl	80082b2 <UART_WaitOnFlagUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e00f      	b.n	80082aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b09c      	sub	sp, #112	; 0x70
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	4613      	mov	r3, r2
 80082c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c2:	e0a9      	b.n	8008418 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ca:	f000 80a5 	beq.w	8008418 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ce:	f7fa f9c5 	bl	800265c <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082da:	429a      	cmp	r2, r3
 80082dc:	d302      	bcc.n	80082e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80082de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d140      	bne.n	8008366 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082f8:	667b      	str	r3, [r7, #100]	; 0x64
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008304:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008308:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e6      	bne.n	80082e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3308      	adds	r3, #8
 800831c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	f023 0301 	bic.w	r3, r3, #1
 800832c:	663b      	str	r3, [r7, #96]	; 0x60
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3308      	adds	r3, #8
 8008334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008336:	64ba      	str	r2, [r7, #72]	; 0x48
 8008338:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800833c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e5      	bne.n	8008316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2220      	movs	r2, #32
 800834e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2220      	movs	r2, #32
 8008356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e069      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b00      	cmp	r3, #0
 8008372:	d051      	beq.n	8008418 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800837e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008382:	d149      	bne.n	8008418 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800838c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
 80083ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e6      	bne.n	800838e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	613b      	str	r3, [r7, #16]
   return(result);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f023 0301 	bic.w	r3, r3, #1
 80083d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3308      	adds	r3, #8
 80083de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083e0:	623a      	str	r2, [r7, #32]
 80083e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	69f9      	ldr	r1, [r7, #28]
 80083e6:	6a3a      	ldr	r2, [r7, #32]
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e5      	bne.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2220      	movs	r2, #32
 8008400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2220      	movs	r2, #32
 8008408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e010      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69da      	ldr	r2, [r3, #28]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	4013      	ands	r3, r2
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	429a      	cmp	r2, r3
 8008426:	bf0c      	ite	eq
 8008428:	2301      	moveq	r3, #1
 800842a:	2300      	movne	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	461a      	mov	r2, r3
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	429a      	cmp	r2, r3
 8008434:	f43f af46 	beq.w	80082c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3770      	adds	r7, #112	; 0x70
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008442:	b480      	push	{r7}
 8008444:	b085      	sub	sp, #20
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_UARTEx_DisableFifoMode+0x16>
 8008454:	2302      	movs	r3, #2
 8008456:	e027      	b.n	80084a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2224      	movs	r2, #36	; 0x24
 8008464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008486:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e02d      	b.n	8008528 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2224      	movs	r2, #36	; 0x24
 80084d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0201 	bic.w	r2, r2, #1
 80084f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f84f 	bl	80085ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2220      	movs	r2, #32
 800851a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008540:	2b01      	cmp	r3, #1
 8008542:	d101      	bne.n	8008548 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008544:	2302      	movs	r3, #2
 8008546:	e02d      	b.n	80085a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2224      	movs	r2, #36	; 0x24
 8008554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0201 	bic.w	r2, r2, #1
 800856e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f811 	bl	80085ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d108      	bne.n	80085ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085cc:	e031      	b.n	8008632 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ce:	2308      	movs	r3, #8
 80085d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085d2:	2308      	movs	r3, #8
 80085d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	0e5b      	lsrs	r3, r3, #25
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	0f5b      	lsrs	r3, r3, #29
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	7b3a      	ldrb	r2, [r7, #12]
 80085fa:	4911      	ldr	r1, [pc, #68]	; (8008640 <UARTEx_SetNbDataToProcess+0x94>)
 80085fc:	5c8a      	ldrb	r2, [r1, r2]
 80085fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008602:	7b3a      	ldrb	r2, [r7, #12]
 8008604:	490f      	ldr	r1, [pc, #60]	; (8008644 <UARTEx_SetNbDataToProcess+0x98>)
 8008606:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008608:	fb93 f3f2 	sdiv	r3, r3, r2
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	7b7a      	ldrb	r2, [r7, #13]
 8008618:	4909      	ldr	r1, [pc, #36]	; (8008640 <UARTEx_SetNbDataToProcess+0x94>)
 800861a:	5c8a      	ldrb	r2, [r1, r2]
 800861c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008620:	7b7a      	ldrb	r2, [r7, #13]
 8008622:	4908      	ldr	r1, [pc, #32]	; (8008644 <UARTEx_SetNbDataToProcess+0x98>)
 8008624:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008626:	fb93 f3f2 	sdiv	r3, r3, r2
 800862a:	b29a      	uxth	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008632:	bf00      	nop
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	0800a1b4 	.word	0x0800a1b4
 8008644:	0800a1bc 	.word	0x0800a1bc

08008648 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008650:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008654:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	b29b      	uxth	r3, r3
 8008662:	43db      	mvns	r3, r3
 8008664:	b29b      	uxth	r3, r3
 8008666:	4013      	ands	r3, r2
 8008668:	b29a      	uxth	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800867e:	b084      	sub	sp, #16
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	f107 0014 	add.w	r0, r7, #20
 800868c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	b004      	add	sp, #16
 80086be:	4770      	bx	lr

080086c0 <__errno>:
 80086c0:	4b01      	ldr	r3, [pc, #4]	; (80086c8 <__errno+0x8>)
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	20000010 	.word	0x20000010

080086cc <__libc_init_array>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	4d0d      	ldr	r5, [pc, #52]	; (8008704 <__libc_init_array+0x38>)
 80086d0:	4c0d      	ldr	r4, [pc, #52]	; (8008708 <__libc_init_array+0x3c>)
 80086d2:	1b64      	subs	r4, r4, r5
 80086d4:	10a4      	asrs	r4, r4, #2
 80086d6:	2600      	movs	r6, #0
 80086d8:	42a6      	cmp	r6, r4
 80086da:	d109      	bne.n	80086f0 <__libc_init_array+0x24>
 80086dc:	4d0b      	ldr	r5, [pc, #44]	; (800870c <__libc_init_array+0x40>)
 80086de:	4c0c      	ldr	r4, [pc, #48]	; (8008710 <__libc_init_array+0x44>)
 80086e0:	f001 fc84 	bl	8009fec <_init>
 80086e4:	1b64      	subs	r4, r4, r5
 80086e6:	10a4      	asrs	r4, r4, #2
 80086e8:	2600      	movs	r6, #0
 80086ea:	42a6      	cmp	r6, r4
 80086ec:	d105      	bne.n	80086fa <__libc_init_array+0x2e>
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f4:	4798      	blx	r3
 80086f6:	3601      	adds	r6, #1
 80086f8:	e7ee      	b.n	80086d8 <__libc_init_array+0xc>
 80086fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80086fe:	4798      	blx	r3
 8008700:	3601      	adds	r6, #1
 8008702:	e7f2      	b.n	80086ea <__libc_init_array+0x1e>
 8008704:	0800a3d8 	.word	0x0800a3d8
 8008708:	0800a3d8 	.word	0x0800a3d8
 800870c:	0800a3d8 	.word	0x0800a3d8
 8008710:	0800a3dc 	.word	0x0800a3dc

08008714 <memset>:
 8008714:	4402      	add	r2, r0
 8008716:	4603      	mov	r3, r0
 8008718:	4293      	cmp	r3, r2
 800871a:	d100      	bne.n	800871e <memset+0xa>
 800871c:	4770      	bx	lr
 800871e:	f803 1b01 	strb.w	r1, [r3], #1
 8008722:	e7f9      	b.n	8008718 <memset+0x4>

08008724 <siprintf>:
 8008724:	b40e      	push	{r1, r2, r3}
 8008726:	b500      	push	{lr}
 8008728:	b09c      	sub	sp, #112	; 0x70
 800872a:	ab1d      	add	r3, sp, #116	; 0x74
 800872c:	9002      	str	r0, [sp, #8]
 800872e:	9006      	str	r0, [sp, #24]
 8008730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008734:	4809      	ldr	r0, [pc, #36]	; (800875c <siprintf+0x38>)
 8008736:	9107      	str	r1, [sp, #28]
 8008738:	9104      	str	r1, [sp, #16]
 800873a:	4909      	ldr	r1, [pc, #36]	; (8008760 <siprintf+0x3c>)
 800873c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008740:	9105      	str	r1, [sp, #20]
 8008742:	6800      	ldr	r0, [r0, #0]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	a902      	add	r1, sp, #8
 8008748:	f000 f868 	bl	800881c <_svfiprintf_r>
 800874c:	9b02      	ldr	r3, [sp, #8]
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	b01c      	add	sp, #112	; 0x70
 8008754:	f85d eb04 	ldr.w	lr, [sp], #4
 8008758:	b003      	add	sp, #12
 800875a:	4770      	bx	lr
 800875c:	20000010 	.word	0x20000010
 8008760:	ffff0208 	.word	0xffff0208

08008764 <__ssputs_r>:
 8008764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	688e      	ldr	r6, [r1, #8]
 800876a:	429e      	cmp	r6, r3
 800876c:	4682      	mov	sl, r0
 800876e:	460c      	mov	r4, r1
 8008770:	4690      	mov	r8, r2
 8008772:	461f      	mov	r7, r3
 8008774:	d838      	bhi.n	80087e8 <__ssputs_r+0x84>
 8008776:	898a      	ldrh	r2, [r1, #12]
 8008778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800877c:	d032      	beq.n	80087e4 <__ssputs_r+0x80>
 800877e:	6825      	ldr	r5, [r4, #0]
 8008780:	6909      	ldr	r1, [r1, #16]
 8008782:	eba5 0901 	sub.w	r9, r5, r1
 8008786:	6965      	ldr	r5, [r4, #20]
 8008788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800878c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008790:	3301      	adds	r3, #1
 8008792:	444b      	add	r3, r9
 8008794:	106d      	asrs	r5, r5, #1
 8008796:	429d      	cmp	r5, r3
 8008798:	bf38      	it	cc
 800879a:	461d      	movcc	r5, r3
 800879c:	0553      	lsls	r3, r2, #21
 800879e:	d531      	bpl.n	8008804 <__ssputs_r+0xa0>
 80087a0:	4629      	mov	r1, r5
 80087a2:	f000 fb47 	bl	8008e34 <_malloc_r>
 80087a6:	4606      	mov	r6, r0
 80087a8:	b950      	cbnz	r0, 80087c0 <__ssputs_r+0x5c>
 80087aa:	230c      	movs	r3, #12
 80087ac:	f8ca 3000 	str.w	r3, [sl]
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c0:	6921      	ldr	r1, [r4, #16]
 80087c2:	464a      	mov	r2, r9
 80087c4:	f000 fabe 	bl	8008d44 <memcpy>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d2:	81a3      	strh	r3, [r4, #12]
 80087d4:	6126      	str	r6, [r4, #16]
 80087d6:	6165      	str	r5, [r4, #20]
 80087d8:	444e      	add	r6, r9
 80087da:	eba5 0509 	sub.w	r5, r5, r9
 80087de:	6026      	str	r6, [r4, #0]
 80087e0:	60a5      	str	r5, [r4, #8]
 80087e2:	463e      	mov	r6, r7
 80087e4:	42be      	cmp	r6, r7
 80087e6:	d900      	bls.n	80087ea <__ssputs_r+0x86>
 80087e8:	463e      	mov	r6, r7
 80087ea:	4632      	mov	r2, r6
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	4641      	mov	r1, r8
 80087f0:	f000 fab6 	bl	8008d60 <memmove>
 80087f4:	68a3      	ldr	r3, [r4, #8]
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	1b9b      	subs	r3, r3, r6
 80087fa:	4432      	add	r2, r6
 80087fc:	60a3      	str	r3, [r4, #8]
 80087fe:	6022      	str	r2, [r4, #0]
 8008800:	2000      	movs	r0, #0
 8008802:	e7db      	b.n	80087bc <__ssputs_r+0x58>
 8008804:	462a      	mov	r2, r5
 8008806:	f000 fb6f 	bl	8008ee8 <_realloc_r>
 800880a:	4606      	mov	r6, r0
 800880c:	2800      	cmp	r0, #0
 800880e:	d1e1      	bne.n	80087d4 <__ssputs_r+0x70>
 8008810:	6921      	ldr	r1, [r4, #16]
 8008812:	4650      	mov	r0, sl
 8008814:	f000 fabe 	bl	8008d94 <_free_r>
 8008818:	e7c7      	b.n	80087aa <__ssputs_r+0x46>
	...

0800881c <_svfiprintf_r>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	4698      	mov	r8, r3
 8008822:	898b      	ldrh	r3, [r1, #12]
 8008824:	061b      	lsls	r3, r3, #24
 8008826:	b09d      	sub	sp, #116	; 0x74
 8008828:	4607      	mov	r7, r0
 800882a:	460d      	mov	r5, r1
 800882c:	4614      	mov	r4, r2
 800882e:	d50e      	bpl.n	800884e <_svfiprintf_r+0x32>
 8008830:	690b      	ldr	r3, [r1, #16]
 8008832:	b963      	cbnz	r3, 800884e <_svfiprintf_r+0x32>
 8008834:	2140      	movs	r1, #64	; 0x40
 8008836:	f000 fafd 	bl	8008e34 <_malloc_r>
 800883a:	6028      	str	r0, [r5, #0]
 800883c:	6128      	str	r0, [r5, #16]
 800883e:	b920      	cbnz	r0, 800884a <_svfiprintf_r+0x2e>
 8008840:	230c      	movs	r3, #12
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	f04f 30ff 	mov.w	r0, #4294967295
 8008848:	e0d1      	b.n	80089ee <_svfiprintf_r+0x1d2>
 800884a:	2340      	movs	r3, #64	; 0x40
 800884c:	616b      	str	r3, [r5, #20]
 800884e:	2300      	movs	r3, #0
 8008850:	9309      	str	r3, [sp, #36]	; 0x24
 8008852:	2320      	movs	r3, #32
 8008854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008858:	f8cd 800c 	str.w	r8, [sp, #12]
 800885c:	2330      	movs	r3, #48	; 0x30
 800885e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a08 <_svfiprintf_r+0x1ec>
 8008862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008866:	f04f 0901 	mov.w	r9, #1
 800886a:	4623      	mov	r3, r4
 800886c:	469a      	mov	sl, r3
 800886e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008872:	b10a      	cbz	r2, 8008878 <_svfiprintf_r+0x5c>
 8008874:	2a25      	cmp	r2, #37	; 0x25
 8008876:	d1f9      	bne.n	800886c <_svfiprintf_r+0x50>
 8008878:	ebba 0b04 	subs.w	fp, sl, r4
 800887c:	d00b      	beq.n	8008896 <_svfiprintf_r+0x7a>
 800887e:	465b      	mov	r3, fp
 8008880:	4622      	mov	r2, r4
 8008882:	4629      	mov	r1, r5
 8008884:	4638      	mov	r0, r7
 8008886:	f7ff ff6d 	bl	8008764 <__ssputs_r>
 800888a:	3001      	adds	r0, #1
 800888c:	f000 80aa 	beq.w	80089e4 <_svfiprintf_r+0x1c8>
 8008890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008892:	445a      	add	r2, fp
 8008894:	9209      	str	r2, [sp, #36]	; 0x24
 8008896:	f89a 3000 	ldrb.w	r3, [sl]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80a2 	beq.w	80089e4 <_svfiprintf_r+0x1c8>
 80088a0:	2300      	movs	r3, #0
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295
 80088a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088aa:	f10a 0a01 	add.w	sl, sl, #1
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	9307      	str	r3, [sp, #28]
 80088b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088b6:	931a      	str	r3, [sp, #104]	; 0x68
 80088b8:	4654      	mov	r4, sl
 80088ba:	2205      	movs	r2, #5
 80088bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c0:	4851      	ldr	r0, [pc, #324]	; (8008a08 <_svfiprintf_r+0x1ec>)
 80088c2:	f7f7 fc5d 	bl	8000180 <memchr>
 80088c6:	9a04      	ldr	r2, [sp, #16]
 80088c8:	b9d8      	cbnz	r0, 8008902 <_svfiprintf_r+0xe6>
 80088ca:	06d0      	lsls	r0, r2, #27
 80088cc:	bf44      	itt	mi
 80088ce:	2320      	movmi	r3, #32
 80088d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d4:	0711      	lsls	r1, r2, #28
 80088d6:	bf44      	itt	mi
 80088d8:	232b      	movmi	r3, #43	; 0x2b
 80088da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088de:	f89a 3000 	ldrb.w	r3, [sl]
 80088e2:	2b2a      	cmp	r3, #42	; 0x2a
 80088e4:	d015      	beq.n	8008912 <_svfiprintf_r+0xf6>
 80088e6:	9a07      	ldr	r2, [sp, #28]
 80088e8:	4654      	mov	r4, sl
 80088ea:	2000      	movs	r0, #0
 80088ec:	f04f 0c0a 	mov.w	ip, #10
 80088f0:	4621      	mov	r1, r4
 80088f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f6:	3b30      	subs	r3, #48	; 0x30
 80088f8:	2b09      	cmp	r3, #9
 80088fa:	d94e      	bls.n	800899a <_svfiprintf_r+0x17e>
 80088fc:	b1b0      	cbz	r0, 800892c <_svfiprintf_r+0x110>
 80088fe:	9207      	str	r2, [sp, #28]
 8008900:	e014      	b.n	800892c <_svfiprintf_r+0x110>
 8008902:	eba0 0308 	sub.w	r3, r0, r8
 8008906:	fa09 f303 	lsl.w	r3, r9, r3
 800890a:	4313      	orrs	r3, r2
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	46a2      	mov	sl, r4
 8008910:	e7d2      	b.n	80088b8 <_svfiprintf_r+0x9c>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	1d19      	adds	r1, r3, #4
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	9103      	str	r1, [sp, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	bfbb      	ittet	lt
 800891e:	425b      	neglt	r3, r3
 8008920:	f042 0202 	orrlt.w	r2, r2, #2
 8008924:	9307      	strge	r3, [sp, #28]
 8008926:	9307      	strlt	r3, [sp, #28]
 8008928:	bfb8      	it	lt
 800892a:	9204      	strlt	r2, [sp, #16]
 800892c:	7823      	ldrb	r3, [r4, #0]
 800892e:	2b2e      	cmp	r3, #46	; 0x2e
 8008930:	d10c      	bne.n	800894c <_svfiprintf_r+0x130>
 8008932:	7863      	ldrb	r3, [r4, #1]
 8008934:	2b2a      	cmp	r3, #42	; 0x2a
 8008936:	d135      	bne.n	80089a4 <_svfiprintf_r+0x188>
 8008938:	9b03      	ldr	r3, [sp, #12]
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	9203      	str	r2, [sp, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	bfb8      	it	lt
 8008944:	f04f 33ff 	movlt.w	r3, #4294967295
 8008948:	3402      	adds	r4, #2
 800894a:	9305      	str	r3, [sp, #20]
 800894c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a18 <_svfiprintf_r+0x1fc>
 8008950:	7821      	ldrb	r1, [r4, #0]
 8008952:	2203      	movs	r2, #3
 8008954:	4650      	mov	r0, sl
 8008956:	f7f7 fc13 	bl	8000180 <memchr>
 800895a:	b140      	cbz	r0, 800896e <_svfiprintf_r+0x152>
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	eba0 000a 	sub.w	r0, r0, sl
 8008962:	fa03 f000 	lsl.w	r0, r3, r0
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	4303      	orrs	r3, r0
 800896a:	3401      	adds	r4, #1
 800896c:	9304      	str	r3, [sp, #16]
 800896e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008972:	4826      	ldr	r0, [pc, #152]	; (8008a0c <_svfiprintf_r+0x1f0>)
 8008974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008978:	2206      	movs	r2, #6
 800897a:	f7f7 fc01 	bl	8000180 <memchr>
 800897e:	2800      	cmp	r0, #0
 8008980:	d038      	beq.n	80089f4 <_svfiprintf_r+0x1d8>
 8008982:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <_svfiprintf_r+0x1f4>)
 8008984:	bb1b      	cbnz	r3, 80089ce <_svfiprintf_r+0x1b2>
 8008986:	9b03      	ldr	r3, [sp, #12]
 8008988:	3307      	adds	r3, #7
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	3308      	adds	r3, #8
 8008990:	9303      	str	r3, [sp, #12]
 8008992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008994:	4433      	add	r3, r6
 8008996:	9309      	str	r3, [sp, #36]	; 0x24
 8008998:	e767      	b.n	800886a <_svfiprintf_r+0x4e>
 800899a:	fb0c 3202 	mla	r2, ip, r2, r3
 800899e:	460c      	mov	r4, r1
 80089a0:	2001      	movs	r0, #1
 80089a2:	e7a5      	b.n	80088f0 <_svfiprintf_r+0xd4>
 80089a4:	2300      	movs	r3, #0
 80089a6:	3401      	adds	r4, #1
 80089a8:	9305      	str	r3, [sp, #20]
 80089aa:	4619      	mov	r1, r3
 80089ac:	f04f 0c0a 	mov.w	ip, #10
 80089b0:	4620      	mov	r0, r4
 80089b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b6:	3a30      	subs	r2, #48	; 0x30
 80089b8:	2a09      	cmp	r2, #9
 80089ba:	d903      	bls.n	80089c4 <_svfiprintf_r+0x1a8>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0c5      	beq.n	800894c <_svfiprintf_r+0x130>
 80089c0:	9105      	str	r1, [sp, #20]
 80089c2:	e7c3      	b.n	800894c <_svfiprintf_r+0x130>
 80089c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089c8:	4604      	mov	r4, r0
 80089ca:	2301      	movs	r3, #1
 80089cc:	e7f0      	b.n	80089b0 <_svfiprintf_r+0x194>
 80089ce:	ab03      	add	r3, sp, #12
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	462a      	mov	r2, r5
 80089d4:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <_svfiprintf_r+0x1f8>)
 80089d6:	a904      	add	r1, sp, #16
 80089d8:	4638      	mov	r0, r7
 80089da:	f3af 8000 	nop.w
 80089de:	1c42      	adds	r2, r0, #1
 80089e0:	4606      	mov	r6, r0
 80089e2:	d1d6      	bne.n	8008992 <_svfiprintf_r+0x176>
 80089e4:	89ab      	ldrh	r3, [r5, #12]
 80089e6:	065b      	lsls	r3, r3, #25
 80089e8:	f53f af2c 	bmi.w	8008844 <_svfiprintf_r+0x28>
 80089ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ee:	b01d      	add	sp, #116	; 0x74
 80089f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f4:	ab03      	add	r3, sp, #12
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	462a      	mov	r2, r5
 80089fa:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <_svfiprintf_r+0x1f8>)
 80089fc:	a904      	add	r1, sp, #16
 80089fe:	4638      	mov	r0, r7
 8008a00:	f000 f87a 	bl	8008af8 <_printf_i>
 8008a04:	e7eb      	b.n	80089de <_svfiprintf_r+0x1c2>
 8008a06:	bf00      	nop
 8008a08:	0800a1c4 	.word	0x0800a1c4
 8008a0c:	0800a1ce 	.word	0x0800a1ce
 8008a10:	00000000 	.word	0x00000000
 8008a14:	08008765 	.word	0x08008765
 8008a18:	0800a1ca 	.word	0x0800a1ca

08008a1c <_printf_common>:
 8008a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	4616      	mov	r6, r2
 8008a22:	4699      	mov	r9, r3
 8008a24:	688a      	ldr	r2, [r1, #8]
 8008a26:	690b      	ldr	r3, [r1, #16]
 8008a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	bfb8      	it	lt
 8008a30:	4613      	movlt	r3, r2
 8008a32:	6033      	str	r3, [r6, #0]
 8008a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a38:	4607      	mov	r7, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	b10a      	cbz	r2, 8008a42 <_printf_common+0x26>
 8008a3e:	3301      	adds	r3, #1
 8008a40:	6033      	str	r3, [r6, #0]
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	0699      	lsls	r1, r3, #26
 8008a46:	bf42      	ittt	mi
 8008a48:	6833      	ldrmi	r3, [r6, #0]
 8008a4a:	3302      	addmi	r3, #2
 8008a4c:	6033      	strmi	r3, [r6, #0]
 8008a4e:	6825      	ldr	r5, [r4, #0]
 8008a50:	f015 0506 	ands.w	r5, r5, #6
 8008a54:	d106      	bne.n	8008a64 <_printf_common+0x48>
 8008a56:	f104 0a19 	add.w	sl, r4, #25
 8008a5a:	68e3      	ldr	r3, [r4, #12]
 8008a5c:	6832      	ldr	r2, [r6, #0]
 8008a5e:	1a9b      	subs	r3, r3, r2
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dc26      	bgt.n	8008ab2 <_printf_common+0x96>
 8008a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a68:	1e13      	subs	r3, r2, #0
 8008a6a:	6822      	ldr	r2, [r4, #0]
 8008a6c:	bf18      	it	ne
 8008a6e:	2301      	movne	r3, #1
 8008a70:	0692      	lsls	r2, r2, #26
 8008a72:	d42b      	bmi.n	8008acc <_printf_common+0xb0>
 8008a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a78:	4649      	mov	r1, r9
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	47c0      	blx	r8
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d01e      	beq.n	8008ac0 <_printf_common+0xa4>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	68e5      	ldr	r5, [r4, #12]
 8008a86:	6832      	ldr	r2, [r6, #0]
 8008a88:	f003 0306 	and.w	r3, r3, #6
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	bf08      	it	eq
 8008a90:	1aad      	subeq	r5, r5, r2
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	6922      	ldr	r2, [r4, #16]
 8008a96:	bf0c      	ite	eq
 8008a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a9c:	2500      	movne	r5, #0
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	bfc4      	itt	gt
 8008aa2:	1a9b      	subgt	r3, r3, r2
 8008aa4:	18ed      	addgt	r5, r5, r3
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	341a      	adds	r4, #26
 8008aaa:	42b5      	cmp	r5, r6
 8008aac:	d11a      	bne.n	8008ae4 <_printf_common+0xc8>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	e008      	b.n	8008ac4 <_printf_common+0xa8>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	4638      	mov	r0, r7
 8008aba:	47c0      	blx	r8
 8008abc:	3001      	adds	r0, #1
 8008abe:	d103      	bne.n	8008ac8 <_printf_common+0xac>
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac8:	3501      	adds	r5, #1
 8008aca:	e7c6      	b.n	8008a5a <_printf_common+0x3e>
 8008acc:	18e1      	adds	r1, r4, r3
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	2030      	movs	r0, #48	; 0x30
 8008ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ad6:	4422      	add	r2, r4
 8008ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ae0:	3302      	adds	r3, #2
 8008ae2:	e7c7      	b.n	8008a74 <_printf_common+0x58>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	4649      	mov	r1, r9
 8008aea:	4638      	mov	r0, r7
 8008aec:	47c0      	blx	r8
 8008aee:	3001      	adds	r0, #1
 8008af0:	d0e6      	beq.n	8008ac0 <_printf_common+0xa4>
 8008af2:	3601      	adds	r6, #1
 8008af4:	e7d9      	b.n	8008aaa <_printf_common+0x8e>
	...

08008af8 <_printf_i>:
 8008af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	460c      	mov	r4, r1
 8008afe:	4691      	mov	r9, r2
 8008b00:	7e27      	ldrb	r7, [r4, #24]
 8008b02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b04:	2f78      	cmp	r7, #120	; 0x78
 8008b06:	4680      	mov	r8, r0
 8008b08:	469a      	mov	sl, r3
 8008b0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b0e:	d807      	bhi.n	8008b20 <_printf_i+0x28>
 8008b10:	2f62      	cmp	r7, #98	; 0x62
 8008b12:	d80a      	bhi.n	8008b2a <_printf_i+0x32>
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	f000 80d8 	beq.w	8008cca <_printf_i+0x1d2>
 8008b1a:	2f58      	cmp	r7, #88	; 0x58
 8008b1c:	f000 80a3 	beq.w	8008c66 <_printf_i+0x16e>
 8008b20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b28:	e03a      	b.n	8008ba0 <_printf_i+0xa8>
 8008b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b2e:	2b15      	cmp	r3, #21
 8008b30:	d8f6      	bhi.n	8008b20 <_printf_i+0x28>
 8008b32:	a001      	add	r0, pc, #4	; (adr r0, 8008b38 <_printf_i+0x40>)
 8008b34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b38:	08008b91 	.word	0x08008b91
 8008b3c:	08008ba5 	.word	0x08008ba5
 8008b40:	08008b21 	.word	0x08008b21
 8008b44:	08008b21 	.word	0x08008b21
 8008b48:	08008b21 	.word	0x08008b21
 8008b4c:	08008b21 	.word	0x08008b21
 8008b50:	08008ba5 	.word	0x08008ba5
 8008b54:	08008b21 	.word	0x08008b21
 8008b58:	08008b21 	.word	0x08008b21
 8008b5c:	08008b21 	.word	0x08008b21
 8008b60:	08008b21 	.word	0x08008b21
 8008b64:	08008cb1 	.word	0x08008cb1
 8008b68:	08008bd5 	.word	0x08008bd5
 8008b6c:	08008c93 	.word	0x08008c93
 8008b70:	08008b21 	.word	0x08008b21
 8008b74:	08008b21 	.word	0x08008b21
 8008b78:	08008cd3 	.word	0x08008cd3
 8008b7c:	08008b21 	.word	0x08008b21
 8008b80:	08008bd5 	.word	0x08008bd5
 8008b84:	08008b21 	.word	0x08008b21
 8008b88:	08008b21 	.word	0x08008b21
 8008b8c:	08008c9b 	.word	0x08008c9b
 8008b90:	680b      	ldr	r3, [r1, #0]
 8008b92:	1d1a      	adds	r2, r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	600a      	str	r2, [r1, #0]
 8008b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e0a3      	b.n	8008cec <_printf_i+0x1f4>
 8008ba4:	6825      	ldr	r5, [r4, #0]
 8008ba6:	6808      	ldr	r0, [r1, #0]
 8008ba8:	062e      	lsls	r6, r5, #24
 8008baa:	f100 0304 	add.w	r3, r0, #4
 8008bae:	d50a      	bpl.n	8008bc6 <_printf_i+0xce>
 8008bb0:	6805      	ldr	r5, [r0, #0]
 8008bb2:	600b      	str	r3, [r1, #0]
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	da03      	bge.n	8008bc0 <_printf_i+0xc8>
 8008bb8:	232d      	movs	r3, #45	; 0x2d
 8008bba:	426d      	negs	r5, r5
 8008bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc0:	485e      	ldr	r0, [pc, #376]	; (8008d3c <_printf_i+0x244>)
 8008bc2:	230a      	movs	r3, #10
 8008bc4:	e019      	b.n	8008bfa <_printf_i+0x102>
 8008bc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008bca:	6805      	ldr	r5, [r0, #0]
 8008bcc:	600b      	str	r3, [r1, #0]
 8008bce:	bf18      	it	ne
 8008bd0:	b22d      	sxthne	r5, r5
 8008bd2:	e7ef      	b.n	8008bb4 <_printf_i+0xbc>
 8008bd4:	680b      	ldr	r3, [r1, #0]
 8008bd6:	6825      	ldr	r5, [r4, #0]
 8008bd8:	1d18      	adds	r0, r3, #4
 8008bda:	6008      	str	r0, [r1, #0]
 8008bdc:	0628      	lsls	r0, r5, #24
 8008bde:	d501      	bpl.n	8008be4 <_printf_i+0xec>
 8008be0:	681d      	ldr	r5, [r3, #0]
 8008be2:	e002      	b.n	8008bea <_printf_i+0xf2>
 8008be4:	0669      	lsls	r1, r5, #25
 8008be6:	d5fb      	bpl.n	8008be0 <_printf_i+0xe8>
 8008be8:	881d      	ldrh	r5, [r3, #0]
 8008bea:	4854      	ldr	r0, [pc, #336]	; (8008d3c <_printf_i+0x244>)
 8008bec:	2f6f      	cmp	r7, #111	; 0x6f
 8008bee:	bf0c      	ite	eq
 8008bf0:	2308      	moveq	r3, #8
 8008bf2:	230a      	movne	r3, #10
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bfa:	6866      	ldr	r6, [r4, #4]
 8008bfc:	60a6      	str	r6, [r4, #8]
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	bfa2      	ittt	ge
 8008c02:	6821      	ldrge	r1, [r4, #0]
 8008c04:	f021 0104 	bicge.w	r1, r1, #4
 8008c08:	6021      	strge	r1, [r4, #0]
 8008c0a:	b90d      	cbnz	r5, 8008c10 <_printf_i+0x118>
 8008c0c:	2e00      	cmp	r6, #0
 8008c0e:	d04d      	beq.n	8008cac <_printf_i+0x1b4>
 8008c10:	4616      	mov	r6, r2
 8008c12:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c16:	fb03 5711 	mls	r7, r3, r1, r5
 8008c1a:	5dc7      	ldrb	r7, [r0, r7]
 8008c1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c20:	462f      	mov	r7, r5
 8008c22:	42bb      	cmp	r3, r7
 8008c24:	460d      	mov	r5, r1
 8008c26:	d9f4      	bls.n	8008c12 <_printf_i+0x11a>
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d10b      	bne.n	8008c44 <_printf_i+0x14c>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	07df      	lsls	r7, r3, #31
 8008c30:	d508      	bpl.n	8008c44 <_printf_i+0x14c>
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	6861      	ldr	r1, [r4, #4]
 8008c36:	4299      	cmp	r1, r3
 8008c38:	bfde      	ittt	le
 8008c3a:	2330      	movle	r3, #48	; 0x30
 8008c3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c44:	1b92      	subs	r2, r2, r6
 8008c46:	6122      	str	r2, [r4, #16]
 8008c48:	f8cd a000 	str.w	sl, [sp]
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	aa03      	add	r2, sp, #12
 8008c50:	4621      	mov	r1, r4
 8008c52:	4640      	mov	r0, r8
 8008c54:	f7ff fee2 	bl	8008a1c <_printf_common>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d14c      	bne.n	8008cf6 <_printf_i+0x1fe>
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	b004      	add	sp, #16
 8008c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c66:	4835      	ldr	r0, [pc, #212]	; (8008d3c <_printf_i+0x244>)
 8008c68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	680e      	ldr	r6, [r1, #0]
 8008c70:	061f      	lsls	r7, r3, #24
 8008c72:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c76:	600e      	str	r6, [r1, #0]
 8008c78:	d514      	bpl.n	8008ca4 <_printf_i+0x1ac>
 8008c7a:	07d9      	lsls	r1, r3, #31
 8008c7c:	bf44      	itt	mi
 8008c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008c82:	6023      	strmi	r3, [r4, #0]
 8008c84:	b91d      	cbnz	r5, 8008c8e <_printf_i+0x196>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	f023 0320 	bic.w	r3, r3, #32
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	2310      	movs	r3, #16
 8008c90:	e7b0      	b.n	8008bf4 <_printf_i+0xfc>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	f043 0320 	orr.w	r3, r3, #32
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	2378      	movs	r3, #120	; 0x78
 8008c9c:	4828      	ldr	r0, [pc, #160]	; (8008d40 <_printf_i+0x248>)
 8008c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ca2:	e7e3      	b.n	8008c6c <_printf_i+0x174>
 8008ca4:	065e      	lsls	r6, r3, #25
 8008ca6:	bf48      	it	mi
 8008ca8:	b2ad      	uxthmi	r5, r5
 8008caa:	e7e6      	b.n	8008c7a <_printf_i+0x182>
 8008cac:	4616      	mov	r6, r2
 8008cae:	e7bb      	b.n	8008c28 <_printf_i+0x130>
 8008cb0:	680b      	ldr	r3, [r1, #0]
 8008cb2:	6826      	ldr	r6, [r4, #0]
 8008cb4:	6960      	ldr	r0, [r4, #20]
 8008cb6:	1d1d      	adds	r5, r3, #4
 8008cb8:	600d      	str	r5, [r1, #0]
 8008cba:	0635      	lsls	r5, r6, #24
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	d501      	bpl.n	8008cc4 <_printf_i+0x1cc>
 8008cc0:	6018      	str	r0, [r3, #0]
 8008cc2:	e002      	b.n	8008cca <_printf_i+0x1d2>
 8008cc4:	0671      	lsls	r1, r6, #25
 8008cc6:	d5fb      	bpl.n	8008cc0 <_printf_i+0x1c8>
 8008cc8:	8018      	strh	r0, [r3, #0]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	4616      	mov	r6, r2
 8008cd0:	e7ba      	b.n	8008c48 <_printf_i+0x150>
 8008cd2:	680b      	ldr	r3, [r1, #0]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	600a      	str	r2, [r1, #0]
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	6862      	ldr	r2, [r4, #4]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f7f7 fa4e 	bl	8000180 <memchr>
 8008ce4:	b108      	cbz	r0, 8008cea <_printf_i+0x1f2>
 8008ce6:	1b80      	subs	r0, r0, r6
 8008ce8:	6060      	str	r0, [r4, #4]
 8008cea:	6863      	ldr	r3, [r4, #4]
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf4:	e7a8      	b.n	8008c48 <_printf_i+0x150>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	47d0      	blx	sl
 8008d00:	3001      	adds	r0, #1
 8008d02:	d0ab      	beq.n	8008c5c <_printf_i+0x164>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	079b      	lsls	r3, r3, #30
 8008d08:	d413      	bmi.n	8008d32 <_printf_i+0x23a>
 8008d0a:	68e0      	ldr	r0, [r4, #12]
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	4298      	cmp	r0, r3
 8008d10:	bfb8      	it	lt
 8008d12:	4618      	movlt	r0, r3
 8008d14:	e7a4      	b.n	8008c60 <_printf_i+0x168>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4632      	mov	r2, r6
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	47d0      	blx	sl
 8008d20:	3001      	adds	r0, #1
 8008d22:	d09b      	beq.n	8008c5c <_printf_i+0x164>
 8008d24:	3501      	adds	r5, #1
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	9903      	ldr	r1, [sp, #12]
 8008d2a:	1a5b      	subs	r3, r3, r1
 8008d2c:	42ab      	cmp	r3, r5
 8008d2e:	dcf2      	bgt.n	8008d16 <_printf_i+0x21e>
 8008d30:	e7eb      	b.n	8008d0a <_printf_i+0x212>
 8008d32:	2500      	movs	r5, #0
 8008d34:	f104 0619 	add.w	r6, r4, #25
 8008d38:	e7f5      	b.n	8008d26 <_printf_i+0x22e>
 8008d3a:	bf00      	nop
 8008d3c:	0800a1d5 	.word	0x0800a1d5
 8008d40:	0800a1e6 	.word	0x0800a1e6

08008d44 <memcpy>:
 8008d44:	440a      	add	r2, r1
 8008d46:	4291      	cmp	r1, r2
 8008d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d4c:	d100      	bne.n	8008d50 <memcpy+0xc>
 8008d4e:	4770      	bx	lr
 8008d50:	b510      	push	{r4, lr}
 8008d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	d1f9      	bne.n	8008d52 <memcpy+0xe>
 8008d5e:	bd10      	pop	{r4, pc}

08008d60 <memmove>:
 8008d60:	4288      	cmp	r0, r1
 8008d62:	b510      	push	{r4, lr}
 8008d64:	eb01 0402 	add.w	r4, r1, r2
 8008d68:	d902      	bls.n	8008d70 <memmove+0x10>
 8008d6a:	4284      	cmp	r4, r0
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	d807      	bhi.n	8008d80 <memmove+0x20>
 8008d70:	1e43      	subs	r3, r0, #1
 8008d72:	42a1      	cmp	r1, r4
 8008d74:	d008      	beq.n	8008d88 <memmove+0x28>
 8008d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d7e:	e7f8      	b.n	8008d72 <memmove+0x12>
 8008d80:	4402      	add	r2, r0
 8008d82:	4601      	mov	r1, r0
 8008d84:	428a      	cmp	r2, r1
 8008d86:	d100      	bne.n	8008d8a <memmove+0x2a>
 8008d88:	bd10      	pop	{r4, pc}
 8008d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d92:	e7f7      	b.n	8008d84 <memmove+0x24>

08008d94 <_free_r>:
 8008d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d048      	beq.n	8008e2c <_free_r+0x98>
 8008d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d9e:	9001      	str	r0, [sp, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f1a1 0404 	sub.w	r4, r1, #4
 8008da6:	bfb8      	it	lt
 8008da8:	18e4      	addlt	r4, r4, r3
 8008daa:	f000 f8d3 	bl	8008f54 <__malloc_lock>
 8008dae:	4a20      	ldr	r2, [pc, #128]	; (8008e30 <_free_r+0x9c>)
 8008db0:	9801      	ldr	r0, [sp, #4]
 8008db2:	6813      	ldr	r3, [r2, #0]
 8008db4:	4615      	mov	r5, r2
 8008db6:	b933      	cbnz	r3, 8008dc6 <_free_r+0x32>
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	6014      	str	r4, [r2, #0]
 8008dbc:	b003      	add	sp, #12
 8008dbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dc2:	f000 b8cd 	b.w	8008f60 <__malloc_unlock>
 8008dc6:	42a3      	cmp	r3, r4
 8008dc8:	d90b      	bls.n	8008de2 <_free_r+0x4e>
 8008dca:	6821      	ldr	r1, [r4, #0]
 8008dcc:	1862      	adds	r2, r4, r1
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	bf04      	itt	eq
 8008dd2:	681a      	ldreq	r2, [r3, #0]
 8008dd4:	685b      	ldreq	r3, [r3, #4]
 8008dd6:	6063      	str	r3, [r4, #4]
 8008dd8:	bf04      	itt	eq
 8008dda:	1852      	addeq	r2, r2, r1
 8008ddc:	6022      	streq	r2, [r4, #0]
 8008dde:	602c      	str	r4, [r5, #0]
 8008de0:	e7ec      	b.n	8008dbc <_free_r+0x28>
 8008de2:	461a      	mov	r2, r3
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	b10b      	cbz	r3, 8008dec <_free_r+0x58>
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	d9fa      	bls.n	8008de2 <_free_r+0x4e>
 8008dec:	6811      	ldr	r1, [r2, #0]
 8008dee:	1855      	adds	r5, r2, r1
 8008df0:	42a5      	cmp	r5, r4
 8008df2:	d10b      	bne.n	8008e0c <_free_r+0x78>
 8008df4:	6824      	ldr	r4, [r4, #0]
 8008df6:	4421      	add	r1, r4
 8008df8:	1854      	adds	r4, r2, r1
 8008dfa:	42a3      	cmp	r3, r4
 8008dfc:	6011      	str	r1, [r2, #0]
 8008dfe:	d1dd      	bne.n	8008dbc <_free_r+0x28>
 8008e00:	681c      	ldr	r4, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	6053      	str	r3, [r2, #4]
 8008e06:	4421      	add	r1, r4
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	e7d7      	b.n	8008dbc <_free_r+0x28>
 8008e0c:	d902      	bls.n	8008e14 <_free_r+0x80>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	6003      	str	r3, [r0, #0]
 8008e12:	e7d3      	b.n	8008dbc <_free_r+0x28>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf04      	itt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	6063      	str	r3, [r4, #4]
 8008e22:	bf04      	itt	eq
 8008e24:	1949      	addeq	r1, r1, r5
 8008e26:	6021      	streq	r1, [r4, #0]
 8008e28:	6054      	str	r4, [r2, #4]
 8008e2a:	e7c7      	b.n	8008dbc <_free_r+0x28>
 8008e2c:	b003      	add	sp, #12
 8008e2e:	bd30      	pop	{r4, r5, pc}
 8008e30:	20000098 	.word	0x20000098

08008e34 <_malloc_r>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	1ccd      	adds	r5, r1, #3
 8008e38:	f025 0503 	bic.w	r5, r5, #3
 8008e3c:	3508      	adds	r5, #8
 8008e3e:	2d0c      	cmp	r5, #12
 8008e40:	bf38      	it	cc
 8008e42:	250c      	movcc	r5, #12
 8008e44:	2d00      	cmp	r5, #0
 8008e46:	4606      	mov	r6, r0
 8008e48:	db01      	blt.n	8008e4e <_malloc_r+0x1a>
 8008e4a:	42a9      	cmp	r1, r5
 8008e4c:	d903      	bls.n	8008e56 <_malloc_r+0x22>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	2000      	movs	r0, #0
 8008e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e56:	f000 f87d 	bl	8008f54 <__malloc_lock>
 8008e5a:	4921      	ldr	r1, [pc, #132]	; (8008ee0 <_malloc_r+0xac>)
 8008e5c:	680a      	ldr	r2, [r1, #0]
 8008e5e:	4614      	mov	r4, r2
 8008e60:	b99c      	cbnz	r4, 8008e8a <_malloc_r+0x56>
 8008e62:	4f20      	ldr	r7, [pc, #128]	; (8008ee4 <_malloc_r+0xb0>)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	b923      	cbnz	r3, 8008e72 <_malloc_r+0x3e>
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f000 f862 	bl	8008f34 <_sbrk_r>
 8008e70:	6038      	str	r0, [r7, #0]
 8008e72:	4629      	mov	r1, r5
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f85d 	bl	8008f34 <_sbrk_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d123      	bne.n	8008ec6 <_malloc_r+0x92>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	6033      	str	r3, [r6, #0]
 8008e82:	4630      	mov	r0, r6
 8008e84:	f000 f86c 	bl	8008f60 <__malloc_unlock>
 8008e88:	e7e3      	b.n	8008e52 <_malloc_r+0x1e>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	1b5b      	subs	r3, r3, r5
 8008e8e:	d417      	bmi.n	8008ec0 <_malloc_r+0x8c>
 8008e90:	2b0b      	cmp	r3, #11
 8008e92:	d903      	bls.n	8008e9c <_malloc_r+0x68>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	441c      	add	r4, r3
 8008e98:	6025      	str	r5, [r4, #0]
 8008e9a:	e004      	b.n	8008ea6 <_malloc_r+0x72>
 8008e9c:	6863      	ldr	r3, [r4, #4]
 8008e9e:	42a2      	cmp	r2, r4
 8008ea0:	bf0c      	ite	eq
 8008ea2:	600b      	streq	r3, [r1, #0]
 8008ea4:	6053      	strne	r3, [r2, #4]
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f000 f85a 	bl	8008f60 <__malloc_unlock>
 8008eac:	f104 000b 	add.w	r0, r4, #11
 8008eb0:	1d23      	adds	r3, r4, #4
 8008eb2:	f020 0007 	bic.w	r0, r0, #7
 8008eb6:	1ac2      	subs	r2, r0, r3
 8008eb8:	d0cc      	beq.n	8008e54 <_malloc_r+0x20>
 8008eba:	1a1b      	subs	r3, r3, r0
 8008ebc:	50a3      	str	r3, [r4, r2]
 8008ebe:	e7c9      	b.n	8008e54 <_malloc_r+0x20>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	6864      	ldr	r4, [r4, #4]
 8008ec4:	e7cc      	b.n	8008e60 <_malloc_r+0x2c>
 8008ec6:	1cc4      	adds	r4, r0, #3
 8008ec8:	f024 0403 	bic.w	r4, r4, #3
 8008ecc:	42a0      	cmp	r0, r4
 8008ece:	d0e3      	beq.n	8008e98 <_malloc_r+0x64>
 8008ed0:	1a21      	subs	r1, r4, r0
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f000 f82e 	bl	8008f34 <_sbrk_r>
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d1dd      	bne.n	8008e98 <_malloc_r+0x64>
 8008edc:	e7cf      	b.n	8008e7e <_malloc_r+0x4a>
 8008ede:	bf00      	nop
 8008ee0:	20000098 	.word	0x20000098
 8008ee4:	2000009c 	.word	0x2000009c

08008ee8 <_realloc_r>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	4607      	mov	r7, r0
 8008eec:	4614      	mov	r4, r2
 8008eee:	460e      	mov	r6, r1
 8008ef0:	b921      	cbnz	r1, 8008efc <_realloc_r+0x14>
 8008ef2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	f7ff bf9c 	b.w	8008e34 <_malloc_r>
 8008efc:	b922      	cbnz	r2, 8008f08 <_realloc_r+0x20>
 8008efe:	f7ff ff49 	bl	8008d94 <_free_r>
 8008f02:	4625      	mov	r5, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f08:	f000 f830 	bl	8008f6c <_malloc_usable_size_r>
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d20f      	bcs.n	8008f30 <_realloc_r+0x48>
 8008f10:	4621      	mov	r1, r4
 8008f12:	4638      	mov	r0, r7
 8008f14:	f7ff ff8e 	bl	8008e34 <_malloc_r>
 8008f18:	4605      	mov	r5, r0
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d0f2      	beq.n	8008f04 <_realloc_r+0x1c>
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4622      	mov	r2, r4
 8008f22:	f7ff ff0f 	bl	8008d44 <memcpy>
 8008f26:	4631      	mov	r1, r6
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ff33 	bl	8008d94 <_free_r>
 8008f2e:	e7e9      	b.n	8008f04 <_realloc_r+0x1c>
 8008f30:	4635      	mov	r5, r6
 8008f32:	e7e7      	b.n	8008f04 <_realloc_r+0x1c>

08008f34 <_sbrk_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d06      	ldr	r5, [pc, #24]	; (8008f50 <_sbrk_r+0x1c>)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f7f9 f85e 	bl	8002000 <_sbrk>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_sbrk_r+0x1a>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_sbrk_r+0x1a>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	200005a4 	.word	0x200005a4

08008f54 <__malloc_lock>:
 8008f54:	4801      	ldr	r0, [pc, #4]	; (8008f5c <__malloc_lock+0x8>)
 8008f56:	f000 b811 	b.w	8008f7c <__retarget_lock_acquire_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	200005ac 	.word	0x200005ac

08008f60 <__malloc_unlock>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__malloc_unlock+0x8>)
 8008f62:	f000 b80c 	b.w	8008f7e <__retarget_lock_release_recursive>
 8008f66:	bf00      	nop
 8008f68:	200005ac 	.word	0x200005ac

08008f6c <_malloc_usable_size_r>:
 8008f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f70:	1f18      	subs	r0, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bfbc      	itt	lt
 8008f76:	580b      	ldrlt	r3, [r1, r0]
 8008f78:	18c0      	addlt	r0, r0, r3
 8008f7a:	4770      	bx	lr

08008f7c <__retarget_lock_acquire_recursive>:
 8008f7c:	4770      	bx	lr

08008f7e <__retarget_lock_release_recursive>:
 8008f7e:	4770      	bx	lr

08008f80 <sin>:
 8008f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f82:	ec53 2b10 	vmov	r2, r3, d0
 8008f86:	4826      	ldr	r0, [pc, #152]	; (8009020 <sin+0xa0>)
 8008f88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008f8c:	4281      	cmp	r1, r0
 8008f8e:	dc07      	bgt.n	8008fa0 <sin+0x20>
 8008f90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009018 <sin+0x98>
 8008f94:	2000      	movs	r0, #0
 8008f96:	f000 fe5b 	bl	8009c50 <__kernel_sin>
 8008f9a:	ec51 0b10 	vmov	r0, r1, d0
 8008f9e:	e007      	b.n	8008fb0 <sin+0x30>
 8008fa0:	4820      	ldr	r0, [pc, #128]	; (8009024 <sin+0xa4>)
 8008fa2:	4281      	cmp	r1, r0
 8008fa4:	dd09      	ble.n	8008fba <sin+0x3a>
 8008fa6:	ee10 0a10 	vmov	r0, s0
 8008faa:	4619      	mov	r1, r3
 8008fac:	f7f7 f93c 	bl	8000228 <__aeabi_dsub>
 8008fb0:	ec41 0b10 	vmov	d0, r0, r1
 8008fb4:	b005      	add	sp, #20
 8008fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fba:	4668      	mov	r0, sp
 8008fbc:	f000 f834 	bl	8009028 <__ieee754_rem_pio2>
 8008fc0:	f000 0003 	and.w	r0, r0, #3
 8008fc4:	2801      	cmp	r0, #1
 8008fc6:	d008      	beq.n	8008fda <sin+0x5a>
 8008fc8:	2802      	cmp	r0, #2
 8008fca:	d00d      	beq.n	8008fe8 <sin+0x68>
 8008fcc:	b9d0      	cbnz	r0, 8009004 <sin+0x84>
 8008fce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008fd2:	ed9d 0b00 	vldr	d0, [sp]
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	e7dd      	b.n	8008f96 <sin+0x16>
 8008fda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008fde:	ed9d 0b00 	vldr	d0, [sp]
 8008fe2:	f000 fa2d 	bl	8009440 <__kernel_cos>
 8008fe6:	e7d8      	b.n	8008f9a <sin+0x1a>
 8008fe8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008fec:	ed9d 0b00 	vldr	d0, [sp]
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	f000 fe2d 	bl	8009c50 <__kernel_sin>
 8008ff6:	ec53 2b10 	vmov	r2, r3, d0
 8008ffa:	ee10 0a10 	vmov	r0, s0
 8008ffe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009002:	e7d5      	b.n	8008fb0 <sin+0x30>
 8009004:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009008:	ed9d 0b00 	vldr	d0, [sp]
 800900c:	f000 fa18 	bl	8009440 <__kernel_cos>
 8009010:	e7f1      	b.n	8008ff6 <sin+0x76>
 8009012:	bf00      	nop
 8009014:	f3af 8000 	nop.w
	...
 8009020:	3fe921fb 	.word	0x3fe921fb
 8009024:	7fefffff 	.word	0x7fefffff

08009028 <__ieee754_rem_pio2>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	ed2d 8b02 	vpush	{d8}
 8009030:	ec55 4b10 	vmov	r4, r5, d0
 8009034:	4bca      	ldr	r3, [pc, #808]	; (8009360 <__ieee754_rem_pio2+0x338>)
 8009036:	b08b      	sub	sp, #44	; 0x2c
 8009038:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800903c:	4598      	cmp	r8, r3
 800903e:	4682      	mov	sl, r0
 8009040:	9502      	str	r5, [sp, #8]
 8009042:	dc08      	bgt.n	8009056 <__ieee754_rem_pio2+0x2e>
 8009044:	2200      	movs	r2, #0
 8009046:	2300      	movs	r3, #0
 8009048:	ed80 0b00 	vstr	d0, [r0]
 800904c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009050:	f04f 0b00 	mov.w	fp, #0
 8009054:	e028      	b.n	80090a8 <__ieee754_rem_pio2+0x80>
 8009056:	4bc3      	ldr	r3, [pc, #780]	; (8009364 <__ieee754_rem_pio2+0x33c>)
 8009058:	4598      	cmp	r8, r3
 800905a:	dc78      	bgt.n	800914e <__ieee754_rem_pio2+0x126>
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	4ec2      	ldr	r6, [pc, #776]	; (8009368 <__ieee754_rem_pio2+0x340>)
 8009060:	2b00      	cmp	r3, #0
 8009062:	ee10 0a10 	vmov	r0, s0
 8009066:	a3b0      	add	r3, pc, #704	; (adr r3, 8009328 <__ieee754_rem_pio2+0x300>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	4629      	mov	r1, r5
 800906e:	dd39      	ble.n	80090e4 <__ieee754_rem_pio2+0xbc>
 8009070:	f7f7 f8da 	bl	8000228 <__aeabi_dsub>
 8009074:	45b0      	cmp	r8, r6
 8009076:	4604      	mov	r4, r0
 8009078:	460d      	mov	r5, r1
 800907a:	d01b      	beq.n	80090b4 <__ieee754_rem_pio2+0x8c>
 800907c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009330 <__ieee754_rem_pio2+0x308>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f8d1 	bl	8000228 <__aeabi_dsub>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	e9ca 2300 	strd	r2, r3, [sl]
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7f7 f8c9 	bl	8000228 <__aeabi_dsub>
 8009096:	a3a6      	add	r3, pc, #664	; (adr r3, 8009330 <__ieee754_rem_pio2+0x308>)
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f7f7 f8c4 	bl	8000228 <__aeabi_dsub>
 80090a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090a4:	f04f 0b01 	mov.w	fp, #1
 80090a8:	4658      	mov	r0, fp
 80090aa:	b00b      	add	sp, #44	; 0x2c
 80090ac:	ecbd 8b02 	vpop	{d8}
 80090b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009338 <__ieee754_rem_pio2+0x310>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f8b5 	bl	8000228 <__aeabi_dsub>
 80090be:	a3a0      	add	r3, pc, #640	; (adr r3, 8009340 <__ieee754_rem_pio2+0x318>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	f7f7 f8ae 	bl	8000228 <__aeabi_dsub>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	e9ca 2300 	strd	r2, r3, [sl]
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 f8a6 	bl	8000228 <__aeabi_dsub>
 80090dc:	a398      	add	r3, pc, #608	; (adr r3, 8009340 <__ieee754_rem_pio2+0x318>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	e7db      	b.n	800909c <__ieee754_rem_pio2+0x74>
 80090e4:	f7f7 f8a2 	bl	800022c <__adddf3>
 80090e8:	45b0      	cmp	r8, r6
 80090ea:	4604      	mov	r4, r0
 80090ec:	460d      	mov	r5, r1
 80090ee:	d016      	beq.n	800911e <__ieee754_rem_pio2+0xf6>
 80090f0:	a38f      	add	r3, pc, #572	; (adr r3, 8009330 <__ieee754_rem_pio2+0x308>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f7f7 f899 	bl	800022c <__adddf3>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	e9ca 2300 	strd	r2, r3, [sl]
 8009102:	4620      	mov	r0, r4
 8009104:	4629      	mov	r1, r5
 8009106:	f7f7 f88f 	bl	8000228 <__aeabi_dsub>
 800910a:	a389      	add	r3, pc, #548	; (adr r3, 8009330 <__ieee754_rem_pio2+0x308>)
 800910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009110:	f7f7 f88c 	bl	800022c <__adddf3>
 8009114:	f04f 3bff 	mov.w	fp, #4294967295
 8009118:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800911c:	e7c4      	b.n	80090a8 <__ieee754_rem_pio2+0x80>
 800911e:	a386      	add	r3, pc, #536	; (adr r3, 8009338 <__ieee754_rem_pio2+0x310>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 f882 	bl	800022c <__adddf3>
 8009128:	a385      	add	r3, pc, #532	; (adr r3, 8009340 <__ieee754_rem_pio2+0x318>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	f7f7 f87b 	bl	800022c <__adddf3>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	e9ca 2300 	strd	r2, r3, [sl]
 800913e:	4620      	mov	r0, r4
 8009140:	4629      	mov	r1, r5
 8009142:	f7f7 f871 	bl	8000228 <__aeabi_dsub>
 8009146:	a37e      	add	r3, pc, #504	; (adr r3, 8009340 <__ieee754_rem_pio2+0x318>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	e7e0      	b.n	8009110 <__ieee754_rem_pio2+0xe8>
 800914e:	4b87      	ldr	r3, [pc, #540]	; (800936c <__ieee754_rem_pio2+0x344>)
 8009150:	4598      	cmp	r8, r3
 8009152:	f300 80d9 	bgt.w	8009308 <__ieee754_rem_pio2+0x2e0>
 8009156:	f000 fe39 	bl	8009dcc <fabs>
 800915a:	ec55 4b10 	vmov	r4, r5, d0
 800915e:	ee10 0a10 	vmov	r0, s0
 8009162:	a379      	add	r3, pc, #484	; (adr r3, 8009348 <__ieee754_rem_pio2+0x320>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fa15 	bl	8000598 <__aeabi_dmul>
 800916e:	4b80      	ldr	r3, [pc, #512]	; (8009370 <__ieee754_rem_pio2+0x348>)
 8009170:	2200      	movs	r2, #0
 8009172:	f7f7 f85b 	bl	800022c <__adddf3>
 8009176:	f7f7 fca9 	bl	8000acc <__aeabi_d2iz>
 800917a:	4683      	mov	fp, r0
 800917c:	f7f7 f9a2 	bl	80004c4 <__aeabi_i2d>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	ec43 2b18 	vmov	d8, r2, r3
 8009188:	a367      	add	r3, pc, #412	; (adr r3, 8009328 <__ieee754_rem_pio2+0x300>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f7 fa03 	bl	8000598 <__aeabi_dmul>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4620      	mov	r0, r4
 8009198:	4629      	mov	r1, r5
 800919a:	f7f7 f845 	bl	8000228 <__aeabi_dsub>
 800919e:	a364      	add	r3, pc, #400	; (adr r3, 8009330 <__ieee754_rem_pio2+0x308>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	ec51 0b18 	vmov	r0, r1, d8
 80091ac:	f7f7 f9f4 	bl	8000598 <__aeabi_dmul>
 80091b0:	f1bb 0f1f 	cmp.w	fp, #31
 80091b4:	4604      	mov	r4, r0
 80091b6:	460d      	mov	r5, r1
 80091b8:	dc0d      	bgt.n	80091d6 <__ieee754_rem_pio2+0x1ae>
 80091ba:	4b6e      	ldr	r3, [pc, #440]	; (8009374 <__ieee754_rem_pio2+0x34c>)
 80091bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80091c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c4:	4543      	cmp	r3, r8
 80091c6:	d006      	beq.n	80091d6 <__ieee754_rem_pio2+0x1ae>
 80091c8:	4622      	mov	r2, r4
 80091ca:	462b      	mov	r3, r5
 80091cc:	4630      	mov	r0, r6
 80091ce:	4639      	mov	r1, r7
 80091d0:	f7f7 f82a 	bl	8000228 <__aeabi_dsub>
 80091d4:	e00f      	b.n	80091f6 <__ieee754_rem_pio2+0x1ce>
 80091d6:	462b      	mov	r3, r5
 80091d8:	4622      	mov	r2, r4
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 f823 	bl	8000228 <__aeabi_dsub>
 80091e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80091ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80091f0:	f1b8 0f10 	cmp.w	r8, #16
 80091f4:	dc02      	bgt.n	80091fc <__ieee754_rem_pio2+0x1d4>
 80091f6:	e9ca 0100 	strd	r0, r1, [sl]
 80091fa:	e039      	b.n	8009270 <__ieee754_rem_pio2+0x248>
 80091fc:	a34e      	add	r3, pc, #312	; (adr r3, 8009338 <__ieee754_rem_pio2+0x310>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	ec51 0b18 	vmov	r0, r1, d8
 8009206:	f7f7 f9c7 	bl	8000598 <__aeabi_dmul>
 800920a:	4604      	mov	r4, r0
 800920c:	460d      	mov	r5, r1
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4630      	mov	r0, r6
 8009214:	4639      	mov	r1, r7
 8009216:	f7f7 f807 	bl	8000228 <__aeabi_dsub>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4680      	mov	r8, r0
 8009220:	4689      	mov	r9, r1
 8009222:	4630      	mov	r0, r6
 8009224:	4639      	mov	r1, r7
 8009226:	f7f6 ffff 	bl	8000228 <__aeabi_dsub>
 800922a:	4622      	mov	r2, r4
 800922c:	462b      	mov	r3, r5
 800922e:	f7f6 fffb 	bl	8000228 <__aeabi_dsub>
 8009232:	a343      	add	r3, pc, #268	; (adr r3, 8009340 <__ieee754_rem_pio2+0x318>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	ec51 0b18 	vmov	r0, r1, d8
 8009240:	f7f7 f9aa 	bl	8000598 <__aeabi_dmul>
 8009244:	4622      	mov	r2, r4
 8009246:	462b      	mov	r3, r5
 8009248:	f7f6 ffee 	bl	8000228 <__aeabi_dsub>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4604      	mov	r4, r0
 8009252:	460d      	mov	r5, r1
 8009254:	4640      	mov	r0, r8
 8009256:	4649      	mov	r1, r9
 8009258:	f7f6 ffe6 	bl	8000228 <__aeabi_dsub>
 800925c:	9a03      	ldr	r2, [sp, #12]
 800925e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b31      	cmp	r3, #49	; 0x31
 8009266:	dc24      	bgt.n	80092b2 <__ieee754_rem_pio2+0x28a>
 8009268:	e9ca 0100 	strd	r0, r1, [sl]
 800926c:	4646      	mov	r6, r8
 800926e:	464f      	mov	r7, r9
 8009270:	e9da 8900 	ldrd	r8, r9, [sl]
 8009274:	4630      	mov	r0, r6
 8009276:	4642      	mov	r2, r8
 8009278:	464b      	mov	r3, r9
 800927a:	4639      	mov	r1, r7
 800927c:	f7f6 ffd4 	bl	8000228 <__aeabi_dsub>
 8009280:	462b      	mov	r3, r5
 8009282:	4622      	mov	r2, r4
 8009284:	f7f6 ffd0 	bl	8000228 <__aeabi_dsub>
 8009288:	9b02      	ldr	r3, [sp, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009290:	f6bf af0a 	bge.w	80090a8 <__ieee754_rem_pio2+0x80>
 8009294:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009298:	f8ca 3004 	str.w	r3, [sl, #4]
 800929c:	f8ca 8000 	str.w	r8, [sl]
 80092a0:	f8ca 0008 	str.w	r0, [sl, #8]
 80092a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80092ac:	f1cb 0b00 	rsb	fp, fp, #0
 80092b0:	e6fa      	b.n	80090a8 <__ieee754_rem_pio2+0x80>
 80092b2:	a327      	add	r3, pc, #156	; (adr r3, 8009350 <__ieee754_rem_pio2+0x328>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	ec51 0b18 	vmov	r0, r1, d8
 80092bc:	f7f7 f96c 	bl	8000598 <__aeabi_dmul>
 80092c0:	4604      	mov	r4, r0
 80092c2:	460d      	mov	r5, r1
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f6 ffac 	bl	8000228 <__aeabi_dsub>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4606      	mov	r6, r0
 80092d6:	460f      	mov	r7, r1
 80092d8:	4640      	mov	r0, r8
 80092da:	4649      	mov	r1, r9
 80092dc:	f7f6 ffa4 	bl	8000228 <__aeabi_dsub>
 80092e0:	4622      	mov	r2, r4
 80092e2:	462b      	mov	r3, r5
 80092e4:	f7f6 ffa0 	bl	8000228 <__aeabi_dsub>
 80092e8:	a31b      	add	r3, pc, #108	; (adr r3, 8009358 <__ieee754_rem_pio2+0x330>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	4604      	mov	r4, r0
 80092f0:	460d      	mov	r5, r1
 80092f2:	ec51 0b18 	vmov	r0, r1, d8
 80092f6:	f7f7 f94f 	bl	8000598 <__aeabi_dmul>
 80092fa:	4622      	mov	r2, r4
 80092fc:	462b      	mov	r3, r5
 80092fe:	f7f6 ff93 	bl	8000228 <__aeabi_dsub>
 8009302:	4604      	mov	r4, r0
 8009304:	460d      	mov	r5, r1
 8009306:	e75f      	b.n	80091c8 <__ieee754_rem_pio2+0x1a0>
 8009308:	4b1b      	ldr	r3, [pc, #108]	; (8009378 <__ieee754_rem_pio2+0x350>)
 800930a:	4598      	cmp	r8, r3
 800930c:	dd36      	ble.n	800937c <__ieee754_rem_pio2+0x354>
 800930e:	ee10 2a10 	vmov	r2, s0
 8009312:	462b      	mov	r3, r5
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f6 ff86 	bl	8000228 <__aeabi_dsub>
 800931c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009320:	e9ca 0100 	strd	r0, r1, [sl]
 8009324:	e694      	b.n	8009050 <__ieee754_rem_pio2+0x28>
 8009326:	bf00      	nop
 8009328:	54400000 	.word	0x54400000
 800932c:	3ff921fb 	.word	0x3ff921fb
 8009330:	1a626331 	.word	0x1a626331
 8009334:	3dd0b461 	.word	0x3dd0b461
 8009338:	1a600000 	.word	0x1a600000
 800933c:	3dd0b461 	.word	0x3dd0b461
 8009340:	2e037073 	.word	0x2e037073
 8009344:	3ba3198a 	.word	0x3ba3198a
 8009348:	6dc9c883 	.word	0x6dc9c883
 800934c:	3fe45f30 	.word	0x3fe45f30
 8009350:	2e000000 	.word	0x2e000000
 8009354:	3ba3198a 	.word	0x3ba3198a
 8009358:	252049c1 	.word	0x252049c1
 800935c:	397b839a 	.word	0x397b839a
 8009360:	3fe921fb 	.word	0x3fe921fb
 8009364:	4002d97b 	.word	0x4002d97b
 8009368:	3ff921fb 	.word	0x3ff921fb
 800936c:	413921fb 	.word	0x413921fb
 8009370:	3fe00000 	.word	0x3fe00000
 8009374:	0800a1f8 	.word	0x0800a1f8
 8009378:	7fefffff 	.word	0x7fefffff
 800937c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009380:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009384:	ee10 0a10 	vmov	r0, s0
 8009388:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800938c:	ee10 6a10 	vmov	r6, s0
 8009390:	460f      	mov	r7, r1
 8009392:	f7f7 fb9b 	bl	8000acc <__aeabi_d2iz>
 8009396:	f7f7 f895 	bl	80004c4 <__aeabi_i2d>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4630      	mov	r0, r6
 80093a0:	4639      	mov	r1, r7
 80093a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093a6:	f7f6 ff3f 	bl	8000228 <__aeabi_dsub>
 80093aa:	4b22      	ldr	r3, [pc, #136]	; (8009434 <__ieee754_rem_pio2+0x40c>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	f7f7 f8f3 	bl	8000598 <__aeabi_dmul>
 80093b2:	460f      	mov	r7, r1
 80093b4:	4606      	mov	r6, r0
 80093b6:	f7f7 fb89 	bl	8000acc <__aeabi_d2iz>
 80093ba:	f7f7 f883 	bl	80004c4 <__aeabi_i2d>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4630      	mov	r0, r6
 80093c4:	4639      	mov	r1, r7
 80093c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093ca:	f7f6 ff2d 	bl	8000228 <__aeabi_dsub>
 80093ce:	4b19      	ldr	r3, [pc, #100]	; (8009434 <__ieee754_rem_pio2+0x40c>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	f7f7 f8e1 	bl	8000598 <__aeabi_dmul>
 80093d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093da:	ad04      	add	r5, sp, #16
 80093dc:	f04f 0803 	mov.w	r8, #3
 80093e0:	46a9      	mov	r9, r5
 80093e2:	2600      	movs	r6, #0
 80093e4:	2700      	movs	r7, #0
 80093e6:	4632      	mov	r2, r6
 80093e8:	463b      	mov	r3, r7
 80093ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80093ee:	46c3      	mov	fp, r8
 80093f0:	3d08      	subs	r5, #8
 80093f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80093f6:	f7f7 fb37 	bl	8000a68 <__aeabi_dcmpeq>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d1f3      	bne.n	80093e6 <__ieee754_rem_pio2+0x3be>
 80093fe:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <__ieee754_rem_pio2+0x410>)
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	2302      	movs	r3, #2
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	4622      	mov	r2, r4
 8009408:	465b      	mov	r3, fp
 800940a:	4651      	mov	r1, sl
 800940c:	4648      	mov	r0, r9
 800940e:	f000 f8df 	bl	80095d0 <__kernel_rem_pio2>
 8009412:	9b02      	ldr	r3, [sp, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	4683      	mov	fp, r0
 8009418:	f6bf ae46 	bge.w	80090a8 <__ieee754_rem_pio2+0x80>
 800941c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009420:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009424:	f8ca 3004 	str.w	r3, [sl, #4]
 8009428:	f8da 300c 	ldr.w	r3, [sl, #12]
 800942c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009430:	e73a      	b.n	80092a8 <__ieee754_rem_pio2+0x280>
 8009432:	bf00      	nop
 8009434:	41700000 	.word	0x41700000
 8009438:	0800a278 	.word	0x0800a278
 800943c:	00000000 	.word	0x00000000

08009440 <__kernel_cos>:
 8009440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	ec57 6b10 	vmov	r6, r7, d0
 8009448:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800944c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009450:	ed8d 1b00 	vstr	d1, [sp]
 8009454:	da07      	bge.n	8009466 <__kernel_cos+0x26>
 8009456:	ee10 0a10 	vmov	r0, s0
 800945a:	4639      	mov	r1, r7
 800945c:	f7f7 fb36 	bl	8000acc <__aeabi_d2iz>
 8009460:	2800      	cmp	r0, #0
 8009462:	f000 8088 	beq.w	8009576 <__kernel_cos+0x136>
 8009466:	4632      	mov	r2, r6
 8009468:	463b      	mov	r3, r7
 800946a:	4630      	mov	r0, r6
 800946c:	4639      	mov	r1, r7
 800946e:	f7f7 f893 	bl	8000598 <__aeabi_dmul>
 8009472:	4b51      	ldr	r3, [pc, #324]	; (80095b8 <__kernel_cos+0x178>)
 8009474:	2200      	movs	r2, #0
 8009476:	4604      	mov	r4, r0
 8009478:	460d      	mov	r5, r1
 800947a:	f7f7 f88d 	bl	8000598 <__aeabi_dmul>
 800947e:	a340      	add	r3, pc, #256	; (adr r3, 8009580 <__kernel_cos+0x140>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	4682      	mov	sl, r0
 8009486:	468b      	mov	fp, r1
 8009488:	4620      	mov	r0, r4
 800948a:	4629      	mov	r1, r5
 800948c:	f7f7 f884 	bl	8000598 <__aeabi_dmul>
 8009490:	a33d      	add	r3, pc, #244	; (adr r3, 8009588 <__kernel_cos+0x148>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f6 fec9 	bl	800022c <__adddf3>
 800949a:	4622      	mov	r2, r4
 800949c:	462b      	mov	r3, r5
 800949e:	f7f7 f87b 	bl	8000598 <__aeabi_dmul>
 80094a2:	a33b      	add	r3, pc, #236	; (adr r3, 8009590 <__kernel_cos+0x150>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f7f6 febe 	bl	8000228 <__aeabi_dsub>
 80094ac:	4622      	mov	r2, r4
 80094ae:	462b      	mov	r3, r5
 80094b0:	f7f7 f872 	bl	8000598 <__aeabi_dmul>
 80094b4:	a338      	add	r3, pc, #224	; (adr r3, 8009598 <__kernel_cos+0x158>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f7f6 feb7 	bl	800022c <__adddf3>
 80094be:	4622      	mov	r2, r4
 80094c0:	462b      	mov	r3, r5
 80094c2:	f7f7 f869 	bl	8000598 <__aeabi_dmul>
 80094c6:	a336      	add	r3, pc, #216	; (adr r3, 80095a0 <__kernel_cos+0x160>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f7f6 feac 	bl	8000228 <__aeabi_dsub>
 80094d0:	4622      	mov	r2, r4
 80094d2:	462b      	mov	r3, r5
 80094d4:	f7f7 f860 	bl	8000598 <__aeabi_dmul>
 80094d8:	a333      	add	r3, pc, #204	; (adr r3, 80095a8 <__kernel_cos+0x168>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	f7f6 fea5 	bl	800022c <__adddf3>
 80094e2:	4622      	mov	r2, r4
 80094e4:	462b      	mov	r3, r5
 80094e6:	f7f7 f857 	bl	8000598 <__aeabi_dmul>
 80094ea:	4622      	mov	r2, r4
 80094ec:	462b      	mov	r3, r5
 80094ee:	f7f7 f853 	bl	8000598 <__aeabi_dmul>
 80094f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094f6:	4604      	mov	r4, r0
 80094f8:	460d      	mov	r5, r1
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f7 f84b 	bl	8000598 <__aeabi_dmul>
 8009502:	460b      	mov	r3, r1
 8009504:	4602      	mov	r2, r0
 8009506:	4629      	mov	r1, r5
 8009508:	4620      	mov	r0, r4
 800950a:	f7f6 fe8d 	bl	8000228 <__aeabi_dsub>
 800950e:	4b2b      	ldr	r3, [pc, #172]	; (80095bc <__kernel_cos+0x17c>)
 8009510:	4598      	cmp	r8, r3
 8009512:	4606      	mov	r6, r0
 8009514:	460f      	mov	r7, r1
 8009516:	dc10      	bgt.n	800953a <__kernel_cos+0xfa>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4650      	mov	r0, sl
 800951e:	4659      	mov	r1, fp
 8009520:	f7f6 fe82 	bl	8000228 <__aeabi_dsub>
 8009524:	460b      	mov	r3, r1
 8009526:	4926      	ldr	r1, [pc, #152]	; (80095c0 <__kernel_cos+0x180>)
 8009528:	4602      	mov	r2, r0
 800952a:	2000      	movs	r0, #0
 800952c:	f7f6 fe7c 	bl	8000228 <__aeabi_dsub>
 8009530:	ec41 0b10 	vmov	d0, r0, r1
 8009534:	b003      	add	sp, #12
 8009536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953a:	4b22      	ldr	r3, [pc, #136]	; (80095c4 <__kernel_cos+0x184>)
 800953c:	4920      	ldr	r1, [pc, #128]	; (80095c0 <__kernel_cos+0x180>)
 800953e:	4598      	cmp	r8, r3
 8009540:	bfcc      	ite	gt
 8009542:	4d21      	ldrgt	r5, [pc, #132]	; (80095c8 <__kernel_cos+0x188>)
 8009544:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009548:	2400      	movs	r4, #0
 800954a:	4622      	mov	r2, r4
 800954c:	462b      	mov	r3, r5
 800954e:	2000      	movs	r0, #0
 8009550:	f7f6 fe6a 	bl	8000228 <__aeabi_dsub>
 8009554:	4622      	mov	r2, r4
 8009556:	4680      	mov	r8, r0
 8009558:	4689      	mov	r9, r1
 800955a:	462b      	mov	r3, r5
 800955c:	4650      	mov	r0, sl
 800955e:	4659      	mov	r1, fp
 8009560:	f7f6 fe62 	bl	8000228 <__aeabi_dsub>
 8009564:	4632      	mov	r2, r6
 8009566:	463b      	mov	r3, r7
 8009568:	f7f6 fe5e 	bl	8000228 <__aeabi_dsub>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4640      	mov	r0, r8
 8009572:	4649      	mov	r1, r9
 8009574:	e7da      	b.n	800952c <__kernel_cos+0xec>
 8009576:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80095b0 <__kernel_cos+0x170>
 800957a:	e7db      	b.n	8009534 <__kernel_cos+0xf4>
 800957c:	f3af 8000 	nop.w
 8009580:	be8838d4 	.word	0xbe8838d4
 8009584:	bda8fae9 	.word	0xbda8fae9
 8009588:	bdb4b1c4 	.word	0xbdb4b1c4
 800958c:	3e21ee9e 	.word	0x3e21ee9e
 8009590:	809c52ad 	.word	0x809c52ad
 8009594:	3e927e4f 	.word	0x3e927e4f
 8009598:	19cb1590 	.word	0x19cb1590
 800959c:	3efa01a0 	.word	0x3efa01a0
 80095a0:	16c15177 	.word	0x16c15177
 80095a4:	3f56c16c 	.word	0x3f56c16c
 80095a8:	5555554c 	.word	0x5555554c
 80095ac:	3fa55555 	.word	0x3fa55555
 80095b0:	00000000 	.word	0x00000000
 80095b4:	3ff00000 	.word	0x3ff00000
 80095b8:	3fe00000 	.word	0x3fe00000
 80095bc:	3fd33332 	.word	0x3fd33332
 80095c0:	3ff00000 	.word	0x3ff00000
 80095c4:	3fe90000 	.word	0x3fe90000
 80095c8:	3fd20000 	.word	0x3fd20000
 80095cc:	00000000 	.word	0x00000000

080095d0 <__kernel_rem_pio2>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ed2d 8b02 	vpush	{d8}
 80095d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80095dc:	f112 0f14 	cmn.w	r2, #20
 80095e0:	9308      	str	r3, [sp, #32]
 80095e2:	9101      	str	r1, [sp, #4]
 80095e4:	4bc6      	ldr	r3, [pc, #792]	; (8009900 <__kernel_rem_pio2+0x330>)
 80095e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80095e8:	9009      	str	r0, [sp, #36]	; 0x24
 80095ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	9b08      	ldr	r3, [sp, #32]
 80095f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80095f6:	bfa8      	it	ge
 80095f8:	1ed4      	subge	r4, r2, #3
 80095fa:	9306      	str	r3, [sp, #24]
 80095fc:	bfb2      	itee	lt
 80095fe:	2400      	movlt	r4, #0
 8009600:	2318      	movge	r3, #24
 8009602:	fb94 f4f3 	sdivge	r4, r4, r3
 8009606:	f06f 0317 	mvn.w	r3, #23
 800960a:	fb04 3303 	mla	r3, r4, r3, r3
 800960e:	eb03 0a02 	add.w	sl, r3, r2
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	9a06      	ldr	r2, [sp, #24]
 8009616:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80098f0 <__kernel_rem_pio2+0x320>
 800961a:	eb03 0802 	add.w	r8, r3, r2
 800961e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009620:	1aa7      	subs	r7, r4, r2
 8009622:	ae20      	add	r6, sp, #128	; 0x80
 8009624:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009628:	2500      	movs	r5, #0
 800962a:	4545      	cmp	r5, r8
 800962c:	dd18      	ble.n	8009660 <__kernel_rem_pio2+0x90>
 800962e:	9b08      	ldr	r3, [sp, #32]
 8009630:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009634:	aa20      	add	r2, sp, #128	; 0x80
 8009636:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80098f0 <__kernel_rem_pio2+0x320>
 800963a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800963e:	f1c3 0301 	rsb	r3, r3, #1
 8009642:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	9b07      	ldr	r3, [sp, #28]
 800964a:	9a04      	ldr	r2, [sp, #16]
 800964c:	4443      	add	r3, r8
 800964e:	429a      	cmp	r2, r3
 8009650:	db2f      	blt.n	80096b2 <__kernel_rem_pio2+0xe2>
 8009652:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009656:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800965a:	462f      	mov	r7, r5
 800965c:	2600      	movs	r6, #0
 800965e:	e01b      	b.n	8009698 <__kernel_rem_pio2+0xc8>
 8009660:	42ef      	cmn	r7, r5
 8009662:	d407      	bmi.n	8009674 <__kernel_rem_pio2+0xa4>
 8009664:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009668:	f7f6 ff2c 	bl	80004c4 <__aeabi_i2d>
 800966c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009670:	3501      	adds	r5, #1
 8009672:	e7da      	b.n	800962a <__kernel_rem_pio2+0x5a>
 8009674:	ec51 0b18 	vmov	r0, r1, d8
 8009678:	e7f8      	b.n	800966c <__kernel_rem_pio2+0x9c>
 800967a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800967e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009682:	f7f6 ff89 	bl	8000598 <__aeabi_dmul>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800968e:	f7f6 fdcd 	bl	800022c <__adddf3>
 8009692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009696:	3601      	adds	r6, #1
 8009698:	9b06      	ldr	r3, [sp, #24]
 800969a:	429e      	cmp	r6, r3
 800969c:	f1a7 0708 	sub.w	r7, r7, #8
 80096a0:	ddeb      	ble.n	800967a <__kernel_rem_pio2+0xaa>
 80096a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096a6:	3508      	adds	r5, #8
 80096a8:	ecab 7b02 	vstmia	fp!, {d7}
 80096ac:	f108 0801 	add.w	r8, r8, #1
 80096b0:	e7ca      	b.n	8009648 <__kernel_rem_pio2+0x78>
 80096b2:	9b04      	ldr	r3, [sp, #16]
 80096b4:	aa0c      	add	r2, sp, #48	; 0x30
 80096b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80096bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80096be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80096c2:	9c04      	ldr	r4, [sp, #16]
 80096c4:	930a      	str	r3, [sp, #40]	; 0x28
 80096c6:	ab98      	add	r3, sp, #608	; 0x260
 80096c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096cc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80096d0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80096d4:	f8cd b008 	str.w	fp, [sp, #8]
 80096d8:	4625      	mov	r5, r4
 80096da:	2d00      	cmp	r5, #0
 80096dc:	dc78      	bgt.n	80097d0 <__kernel_rem_pio2+0x200>
 80096de:	ec47 6b10 	vmov	d0, r6, r7
 80096e2:	4650      	mov	r0, sl
 80096e4:	f000 fbfc 	bl	8009ee0 <scalbn>
 80096e8:	ec57 6b10 	vmov	r6, r7, d0
 80096ec:	2200      	movs	r2, #0
 80096ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80096f2:	ee10 0a10 	vmov	r0, s0
 80096f6:	4639      	mov	r1, r7
 80096f8:	f7f6 ff4e 	bl	8000598 <__aeabi_dmul>
 80096fc:	ec41 0b10 	vmov	d0, r0, r1
 8009700:	f000 fb6e 	bl	8009de0 <floor>
 8009704:	4b7f      	ldr	r3, [pc, #508]	; (8009904 <__kernel_rem_pio2+0x334>)
 8009706:	ec51 0b10 	vmov	r0, r1, d0
 800970a:	2200      	movs	r2, #0
 800970c:	f7f6 ff44 	bl	8000598 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4630      	mov	r0, r6
 8009716:	4639      	mov	r1, r7
 8009718:	f7f6 fd86 	bl	8000228 <__aeabi_dsub>
 800971c:	460f      	mov	r7, r1
 800971e:	4606      	mov	r6, r0
 8009720:	f7f7 f9d4 	bl	8000acc <__aeabi_d2iz>
 8009724:	9007      	str	r0, [sp, #28]
 8009726:	f7f6 fecd 	bl	80004c4 <__aeabi_i2d>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4630      	mov	r0, r6
 8009730:	4639      	mov	r1, r7
 8009732:	f7f6 fd79 	bl	8000228 <__aeabi_dsub>
 8009736:	f1ba 0f00 	cmp.w	sl, #0
 800973a:	4606      	mov	r6, r0
 800973c:	460f      	mov	r7, r1
 800973e:	dd70      	ble.n	8009822 <__kernel_rem_pio2+0x252>
 8009740:	1e62      	subs	r2, r4, #1
 8009742:	ab0c      	add	r3, sp, #48	; 0x30
 8009744:	9d07      	ldr	r5, [sp, #28]
 8009746:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800974a:	f1ca 0118 	rsb	r1, sl, #24
 800974e:	fa40 f301 	asr.w	r3, r0, r1
 8009752:	441d      	add	r5, r3
 8009754:	408b      	lsls	r3, r1
 8009756:	1ac0      	subs	r0, r0, r3
 8009758:	ab0c      	add	r3, sp, #48	; 0x30
 800975a:	9507      	str	r5, [sp, #28]
 800975c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009760:	f1ca 0317 	rsb	r3, sl, #23
 8009764:	fa40 f303 	asr.w	r3, r0, r3
 8009768:	9302      	str	r3, [sp, #8]
 800976a:	9b02      	ldr	r3, [sp, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	dd66      	ble.n	800983e <__kernel_rem_pio2+0x26e>
 8009770:	9b07      	ldr	r3, [sp, #28]
 8009772:	2200      	movs	r2, #0
 8009774:	3301      	adds	r3, #1
 8009776:	9307      	str	r3, [sp, #28]
 8009778:	4615      	mov	r5, r2
 800977a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800977e:	4294      	cmp	r4, r2
 8009780:	f300 8099 	bgt.w	80098b6 <__kernel_rem_pio2+0x2e6>
 8009784:	f1ba 0f00 	cmp.w	sl, #0
 8009788:	dd07      	ble.n	800979a <__kernel_rem_pio2+0x1ca>
 800978a:	f1ba 0f01 	cmp.w	sl, #1
 800978e:	f000 80a5 	beq.w	80098dc <__kernel_rem_pio2+0x30c>
 8009792:	f1ba 0f02 	cmp.w	sl, #2
 8009796:	f000 80c1 	beq.w	800991c <__kernel_rem_pio2+0x34c>
 800979a:	9b02      	ldr	r3, [sp, #8]
 800979c:	2b02      	cmp	r3, #2
 800979e:	d14e      	bne.n	800983e <__kernel_rem_pio2+0x26e>
 80097a0:	4632      	mov	r2, r6
 80097a2:	463b      	mov	r3, r7
 80097a4:	4958      	ldr	r1, [pc, #352]	; (8009908 <__kernel_rem_pio2+0x338>)
 80097a6:	2000      	movs	r0, #0
 80097a8:	f7f6 fd3e 	bl	8000228 <__aeabi_dsub>
 80097ac:	4606      	mov	r6, r0
 80097ae:	460f      	mov	r7, r1
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	d044      	beq.n	800983e <__kernel_rem_pio2+0x26e>
 80097b4:	4650      	mov	r0, sl
 80097b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80098f8 <__kernel_rem_pio2+0x328>
 80097ba:	f000 fb91 	bl	8009ee0 <scalbn>
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	ec53 2b10 	vmov	r2, r3, d0
 80097c6:	f7f6 fd2f 	bl	8000228 <__aeabi_dsub>
 80097ca:	4606      	mov	r6, r0
 80097cc:	460f      	mov	r7, r1
 80097ce:	e036      	b.n	800983e <__kernel_rem_pio2+0x26e>
 80097d0:	4b4e      	ldr	r3, [pc, #312]	; (800990c <__kernel_rem_pio2+0x33c>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	4630      	mov	r0, r6
 80097d6:	4639      	mov	r1, r7
 80097d8:	f7f6 fede 	bl	8000598 <__aeabi_dmul>
 80097dc:	f7f7 f976 	bl	8000acc <__aeabi_d2iz>
 80097e0:	f7f6 fe70 	bl	80004c4 <__aeabi_i2d>
 80097e4:	4b4a      	ldr	r3, [pc, #296]	; (8009910 <__kernel_rem_pio2+0x340>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	4680      	mov	r8, r0
 80097ea:	4689      	mov	r9, r1
 80097ec:	f7f6 fed4 	bl	8000598 <__aeabi_dmul>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	4630      	mov	r0, r6
 80097f6:	4639      	mov	r1, r7
 80097f8:	f7f6 fd16 	bl	8000228 <__aeabi_dsub>
 80097fc:	f7f7 f966 	bl	8000acc <__aeabi_d2iz>
 8009800:	9b02      	ldr	r3, [sp, #8]
 8009802:	f843 0b04 	str.w	r0, [r3], #4
 8009806:	3d01      	subs	r5, #1
 8009808:	9302      	str	r3, [sp, #8]
 800980a:	ab70      	add	r3, sp, #448	; 0x1c0
 800980c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	4640      	mov	r0, r8
 8009816:	4649      	mov	r1, r9
 8009818:	f7f6 fd08 	bl	800022c <__adddf3>
 800981c:	4606      	mov	r6, r0
 800981e:	460f      	mov	r7, r1
 8009820:	e75b      	b.n	80096da <__kernel_rem_pio2+0x10a>
 8009822:	d105      	bne.n	8009830 <__kernel_rem_pio2+0x260>
 8009824:	1e63      	subs	r3, r4, #1
 8009826:	aa0c      	add	r2, sp, #48	; 0x30
 8009828:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800982c:	15c3      	asrs	r3, r0, #23
 800982e:	e79b      	b.n	8009768 <__kernel_rem_pio2+0x198>
 8009830:	4b38      	ldr	r3, [pc, #224]	; (8009914 <__kernel_rem_pio2+0x344>)
 8009832:	2200      	movs	r2, #0
 8009834:	f7f7 f936 	bl	8000aa4 <__aeabi_dcmpge>
 8009838:	2800      	cmp	r0, #0
 800983a:	d139      	bne.n	80098b0 <__kernel_rem_pio2+0x2e0>
 800983c:	9002      	str	r0, [sp, #8]
 800983e:	2200      	movs	r2, #0
 8009840:	2300      	movs	r3, #0
 8009842:	4630      	mov	r0, r6
 8009844:	4639      	mov	r1, r7
 8009846:	f7f7 f90f 	bl	8000a68 <__aeabi_dcmpeq>
 800984a:	2800      	cmp	r0, #0
 800984c:	f000 80b4 	beq.w	80099b8 <__kernel_rem_pio2+0x3e8>
 8009850:	f104 3bff 	add.w	fp, r4, #4294967295
 8009854:	465b      	mov	r3, fp
 8009856:	2200      	movs	r2, #0
 8009858:	9904      	ldr	r1, [sp, #16]
 800985a:	428b      	cmp	r3, r1
 800985c:	da65      	bge.n	800992a <__kernel_rem_pio2+0x35a>
 800985e:	2a00      	cmp	r2, #0
 8009860:	d07b      	beq.n	800995a <__kernel_rem_pio2+0x38a>
 8009862:	ab0c      	add	r3, sp, #48	; 0x30
 8009864:	f1aa 0a18 	sub.w	sl, sl, #24
 8009868:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 80a0 	beq.w	80099b2 <__kernel_rem_pio2+0x3e2>
 8009872:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80098f8 <__kernel_rem_pio2+0x328>
 8009876:	4650      	mov	r0, sl
 8009878:	f000 fb32 	bl	8009ee0 <scalbn>
 800987c:	4f23      	ldr	r7, [pc, #140]	; (800990c <__kernel_rem_pio2+0x33c>)
 800987e:	ec55 4b10 	vmov	r4, r5, d0
 8009882:	46d8      	mov	r8, fp
 8009884:	2600      	movs	r6, #0
 8009886:	f1b8 0f00 	cmp.w	r8, #0
 800988a:	f280 80cf 	bge.w	8009a2c <__kernel_rem_pio2+0x45c>
 800988e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80098f0 <__kernel_rem_pio2+0x320>
 8009892:	465f      	mov	r7, fp
 8009894:	f04f 0800 	mov.w	r8, #0
 8009898:	2f00      	cmp	r7, #0
 800989a:	f2c0 80fd 	blt.w	8009a98 <__kernel_rem_pio2+0x4c8>
 800989e:	ab70      	add	r3, sp, #448	; 0x1c0
 80098a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009918 <__kernel_rem_pio2+0x348>
 80098a4:	ec55 4b18 	vmov	r4, r5, d8
 80098a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80098ac:	2600      	movs	r6, #0
 80098ae:	e0e5      	b.n	8009a7c <__kernel_rem_pio2+0x4ac>
 80098b0:	2302      	movs	r3, #2
 80098b2:	9302      	str	r3, [sp, #8]
 80098b4:	e75c      	b.n	8009770 <__kernel_rem_pio2+0x1a0>
 80098b6:	f8db 3000 	ldr.w	r3, [fp]
 80098ba:	b955      	cbnz	r5, 80098d2 <__kernel_rem_pio2+0x302>
 80098bc:	b123      	cbz	r3, 80098c8 <__kernel_rem_pio2+0x2f8>
 80098be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80098c2:	f8cb 3000 	str.w	r3, [fp]
 80098c6:	2301      	movs	r3, #1
 80098c8:	3201      	adds	r2, #1
 80098ca:	f10b 0b04 	add.w	fp, fp, #4
 80098ce:	461d      	mov	r5, r3
 80098d0:	e755      	b.n	800977e <__kernel_rem_pio2+0x1ae>
 80098d2:	1acb      	subs	r3, r1, r3
 80098d4:	f8cb 3000 	str.w	r3, [fp]
 80098d8:	462b      	mov	r3, r5
 80098da:	e7f5      	b.n	80098c8 <__kernel_rem_pio2+0x2f8>
 80098dc:	1e62      	subs	r2, r4, #1
 80098de:	ab0c      	add	r3, sp, #48	; 0x30
 80098e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80098e8:	a90c      	add	r1, sp, #48	; 0x30
 80098ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80098ee:	e754      	b.n	800979a <__kernel_rem_pio2+0x1ca>
	...
 80098fc:	3ff00000 	.word	0x3ff00000
 8009900:	0800a3c0 	.word	0x0800a3c0
 8009904:	40200000 	.word	0x40200000
 8009908:	3ff00000 	.word	0x3ff00000
 800990c:	3e700000 	.word	0x3e700000
 8009910:	41700000 	.word	0x41700000
 8009914:	3fe00000 	.word	0x3fe00000
 8009918:	0800a380 	.word	0x0800a380
 800991c:	1e62      	subs	r2, r4, #1
 800991e:	ab0c      	add	r3, sp, #48	; 0x30
 8009920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009924:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009928:	e7de      	b.n	80098e8 <__kernel_rem_pio2+0x318>
 800992a:	a90c      	add	r1, sp, #48	; 0x30
 800992c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009930:	3b01      	subs	r3, #1
 8009932:	430a      	orrs	r2, r1
 8009934:	e790      	b.n	8009858 <__kernel_rem_pio2+0x288>
 8009936:	3301      	adds	r3, #1
 8009938:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800993c:	2900      	cmp	r1, #0
 800993e:	d0fa      	beq.n	8009936 <__kernel_rem_pio2+0x366>
 8009940:	9a08      	ldr	r2, [sp, #32]
 8009942:	18e3      	adds	r3, r4, r3
 8009944:	18a6      	adds	r6, r4, r2
 8009946:	aa20      	add	r2, sp, #128	; 0x80
 8009948:	1c65      	adds	r5, r4, #1
 800994a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800994e:	9302      	str	r3, [sp, #8]
 8009950:	9b02      	ldr	r3, [sp, #8]
 8009952:	42ab      	cmp	r3, r5
 8009954:	da04      	bge.n	8009960 <__kernel_rem_pio2+0x390>
 8009956:	461c      	mov	r4, r3
 8009958:	e6b5      	b.n	80096c6 <__kernel_rem_pio2+0xf6>
 800995a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800995c:	2301      	movs	r3, #1
 800995e:	e7eb      	b.n	8009938 <__kernel_rem_pio2+0x368>
 8009960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009966:	f7f6 fdad 	bl	80004c4 <__aeabi_i2d>
 800996a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009970:	46b3      	mov	fp, r6
 8009972:	461c      	mov	r4, r3
 8009974:	2700      	movs	r7, #0
 8009976:	f04f 0800 	mov.w	r8, #0
 800997a:	f04f 0900 	mov.w	r9, #0
 800997e:	9b06      	ldr	r3, [sp, #24]
 8009980:	429f      	cmp	r7, r3
 8009982:	dd06      	ble.n	8009992 <__kernel_rem_pio2+0x3c2>
 8009984:	ab70      	add	r3, sp, #448	; 0x1c0
 8009986:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800998a:	e9c3 8900 	strd	r8, r9, [r3]
 800998e:	3501      	adds	r5, #1
 8009990:	e7de      	b.n	8009950 <__kernel_rem_pio2+0x380>
 8009992:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009996:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800999a:	f7f6 fdfd 	bl	8000598 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7f6 fc41 	bl	800022c <__adddf3>
 80099aa:	3701      	adds	r7, #1
 80099ac:	4680      	mov	r8, r0
 80099ae:	4689      	mov	r9, r1
 80099b0:	e7e5      	b.n	800997e <__kernel_rem_pio2+0x3ae>
 80099b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099b6:	e754      	b.n	8009862 <__kernel_rem_pio2+0x292>
 80099b8:	ec47 6b10 	vmov	d0, r6, r7
 80099bc:	f1ca 0000 	rsb	r0, sl, #0
 80099c0:	f000 fa8e 	bl	8009ee0 <scalbn>
 80099c4:	ec57 6b10 	vmov	r6, r7, d0
 80099c8:	4b9f      	ldr	r3, [pc, #636]	; (8009c48 <__kernel_rem_pio2+0x678>)
 80099ca:	ee10 0a10 	vmov	r0, s0
 80099ce:	2200      	movs	r2, #0
 80099d0:	4639      	mov	r1, r7
 80099d2:	f7f7 f867 	bl	8000aa4 <__aeabi_dcmpge>
 80099d6:	b300      	cbz	r0, 8009a1a <__kernel_rem_pio2+0x44a>
 80099d8:	4b9c      	ldr	r3, [pc, #624]	; (8009c4c <__kernel_rem_pio2+0x67c>)
 80099da:	2200      	movs	r2, #0
 80099dc:	4630      	mov	r0, r6
 80099de:	4639      	mov	r1, r7
 80099e0:	f7f6 fdda 	bl	8000598 <__aeabi_dmul>
 80099e4:	f7f7 f872 	bl	8000acc <__aeabi_d2iz>
 80099e8:	4605      	mov	r5, r0
 80099ea:	f7f6 fd6b 	bl	80004c4 <__aeabi_i2d>
 80099ee:	4b96      	ldr	r3, [pc, #600]	; (8009c48 <__kernel_rem_pio2+0x678>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	f7f6 fdd1 	bl	8000598 <__aeabi_dmul>
 80099f6:	460b      	mov	r3, r1
 80099f8:	4602      	mov	r2, r0
 80099fa:	4639      	mov	r1, r7
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7f6 fc13 	bl	8000228 <__aeabi_dsub>
 8009a02:	f7f7 f863 	bl	8000acc <__aeabi_d2iz>
 8009a06:	f104 0b01 	add.w	fp, r4, #1
 8009a0a:	ab0c      	add	r3, sp, #48	; 0x30
 8009a0c:	f10a 0a18 	add.w	sl, sl, #24
 8009a10:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a14:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009a18:	e72b      	b.n	8009872 <__kernel_rem_pio2+0x2a2>
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	f7f7 f855 	bl	8000acc <__aeabi_d2iz>
 8009a22:	ab0c      	add	r3, sp, #48	; 0x30
 8009a24:	46a3      	mov	fp, r4
 8009a26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a2a:	e722      	b.n	8009872 <__kernel_rem_pio2+0x2a2>
 8009a2c:	ab70      	add	r3, sp, #448	; 0x1c0
 8009a2e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009a32:	ab0c      	add	r3, sp, #48	; 0x30
 8009a34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009a38:	f7f6 fd44 	bl	80004c4 <__aeabi_i2d>
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	462b      	mov	r3, r5
 8009a40:	f7f6 fdaa 	bl	8000598 <__aeabi_dmul>
 8009a44:	4632      	mov	r2, r6
 8009a46:	e9c9 0100 	strd	r0, r1, [r9]
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	4629      	mov	r1, r5
 8009a50:	f7f6 fda2 	bl	8000598 <__aeabi_dmul>
 8009a54:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a58:	4604      	mov	r4, r0
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	e713      	b.n	8009886 <__kernel_rem_pio2+0x2b6>
 8009a5e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009a62:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009a66:	f7f6 fd97 	bl	8000598 <__aeabi_dmul>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f6 fbdb 	bl	800022c <__adddf3>
 8009a76:	3601      	adds	r6, #1
 8009a78:	4604      	mov	r4, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	9b04      	ldr	r3, [sp, #16]
 8009a7e:	429e      	cmp	r6, r3
 8009a80:	dc01      	bgt.n	8009a86 <__kernel_rem_pio2+0x4b6>
 8009a82:	45b0      	cmp	r8, r6
 8009a84:	daeb      	bge.n	8009a5e <__kernel_rem_pio2+0x48e>
 8009a86:	ab48      	add	r3, sp, #288	; 0x120
 8009a88:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a8c:	e9c3 4500 	strd	r4, r5, [r3]
 8009a90:	3f01      	subs	r7, #1
 8009a92:	f108 0801 	add.w	r8, r8, #1
 8009a96:	e6ff      	b.n	8009898 <__kernel_rem_pio2+0x2c8>
 8009a98:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	dc0b      	bgt.n	8009ab6 <__kernel_rem_pio2+0x4e6>
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	dc6e      	bgt.n	8009b80 <__kernel_rem_pio2+0x5b0>
 8009aa2:	d045      	beq.n	8009b30 <__kernel_rem_pio2+0x560>
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	f003 0007 	and.w	r0, r3, #7
 8009aaa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009aae:	ecbd 8b02 	vpop	{d8}
 8009ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d1f3      	bne.n	8009aa4 <__kernel_rem_pio2+0x4d4>
 8009abc:	ab48      	add	r3, sp, #288	; 0x120
 8009abe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009ac2:	46d0      	mov	r8, sl
 8009ac4:	46d9      	mov	r9, fp
 8009ac6:	f1b9 0f00 	cmp.w	r9, #0
 8009aca:	f1a8 0808 	sub.w	r8, r8, #8
 8009ace:	dc64      	bgt.n	8009b9a <__kernel_rem_pio2+0x5ca>
 8009ad0:	465c      	mov	r4, fp
 8009ad2:	2c01      	cmp	r4, #1
 8009ad4:	f1aa 0a08 	sub.w	sl, sl, #8
 8009ad8:	dc7e      	bgt.n	8009bd8 <__kernel_rem_pio2+0x608>
 8009ada:	2000      	movs	r0, #0
 8009adc:	2100      	movs	r1, #0
 8009ade:	f1bb 0f01 	cmp.w	fp, #1
 8009ae2:	f300 8097 	bgt.w	8009c14 <__kernel_rem_pio2+0x644>
 8009ae6:	9b02      	ldr	r3, [sp, #8]
 8009ae8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009aec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f040 8099 	bne.w	8009c28 <__kernel_rem_pio2+0x658>
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	e9c3 5600 	strd	r5, r6, [r3]
 8009afc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009b00:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009b04:	e7ce      	b.n	8009aa4 <__kernel_rem_pio2+0x4d4>
 8009b06:	ab48      	add	r3, sp, #288	; 0x120
 8009b08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f7f6 fb8c 	bl	800022c <__adddf3>
 8009b14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b18:	f1bb 0f00 	cmp.w	fp, #0
 8009b1c:	daf3      	bge.n	8009b06 <__kernel_rem_pio2+0x536>
 8009b1e:	9b02      	ldr	r3, [sp, #8]
 8009b20:	b113      	cbz	r3, 8009b28 <__kernel_rem_pio2+0x558>
 8009b22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b26:	4619      	mov	r1, r3
 8009b28:	9b01      	ldr	r3, [sp, #4]
 8009b2a:	e9c3 0100 	strd	r0, r1, [r3]
 8009b2e:	e7b9      	b.n	8009aa4 <__kernel_rem_pio2+0x4d4>
 8009b30:	2000      	movs	r0, #0
 8009b32:	2100      	movs	r1, #0
 8009b34:	e7f0      	b.n	8009b18 <__kernel_rem_pio2+0x548>
 8009b36:	ab48      	add	r3, sp, #288	; 0x120
 8009b38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fb74 	bl	800022c <__adddf3>
 8009b44:	3c01      	subs	r4, #1
 8009b46:	2c00      	cmp	r4, #0
 8009b48:	daf5      	bge.n	8009b36 <__kernel_rem_pio2+0x566>
 8009b4a:	9b02      	ldr	r3, [sp, #8]
 8009b4c:	b1e3      	cbz	r3, 8009b88 <__kernel_rem_pio2+0x5b8>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b54:	9c01      	ldr	r4, [sp, #4]
 8009b56:	e9c4 2300 	strd	r2, r3, [r4]
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009b62:	f7f6 fb61 	bl	8000228 <__aeabi_dsub>
 8009b66:	ad4a      	add	r5, sp, #296	; 0x128
 8009b68:	2401      	movs	r4, #1
 8009b6a:	45a3      	cmp	fp, r4
 8009b6c:	da0f      	bge.n	8009b8e <__kernel_rem_pio2+0x5be>
 8009b6e:	9b02      	ldr	r3, [sp, #8]
 8009b70:	b113      	cbz	r3, 8009b78 <__kernel_rem_pio2+0x5a8>
 8009b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b76:	4619      	mov	r1, r3
 8009b78:	9b01      	ldr	r3, [sp, #4]
 8009b7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009b7e:	e791      	b.n	8009aa4 <__kernel_rem_pio2+0x4d4>
 8009b80:	465c      	mov	r4, fp
 8009b82:	2000      	movs	r0, #0
 8009b84:	2100      	movs	r1, #0
 8009b86:	e7de      	b.n	8009b46 <__kernel_rem_pio2+0x576>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	e7e2      	b.n	8009b54 <__kernel_rem_pio2+0x584>
 8009b8e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009b92:	f7f6 fb4b 	bl	800022c <__adddf3>
 8009b96:	3401      	adds	r4, #1
 8009b98:	e7e7      	b.n	8009b6a <__kernel_rem_pio2+0x59a>
 8009b9a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009b9e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f7f6 fb3f 	bl	800022c <__adddf3>
 8009bae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	4629      	mov	r1, r5
 8009bba:	f7f6 fb35 	bl	8000228 <__aeabi_dsub>
 8009bbe:	4632      	mov	r2, r6
 8009bc0:	463b      	mov	r3, r7
 8009bc2:	f7f6 fb33 	bl	800022c <__adddf3>
 8009bc6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009bca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009bce:	ed88 7b00 	vstr	d7, [r8]
 8009bd2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009bd6:	e776      	b.n	8009ac6 <__kernel_rem_pio2+0x4f6>
 8009bd8:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bdc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009be0:	4640      	mov	r0, r8
 8009be2:	4632      	mov	r2, r6
 8009be4:	463b      	mov	r3, r7
 8009be6:	4649      	mov	r1, r9
 8009be8:	f7f6 fb20 	bl	800022c <__adddf3>
 8009bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	f7f6 fb16 	bl	8000228 <__aeabi_dsub>
 8009bfc:	4632      	mov	r2, r6
 8009bfe:	463b      	mov	r3, r7
 8009c00:	f7f6 fb14 	bl	800022c <__adddf3>
 8009c04:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009c08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009c0c:	ed8a 7b00 	vstr	d7, [sl]
 8009c10:	3c01      	subs	r4, #1
 8009c12:	e75e      	b.n	8009ad2 <__kernel_rem_pio2+0x502>
 8009c14:	ab48      	add	r3, sp, #288	; 0x120
 8009c16:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fb05 	bl	800022c <__adddf3>
 8009c22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c26:	e75a      	b.n	8009ade <__kernel_rem_pio2+0x50e>
 8009c28:	9b01      	ldr	r3, [sp, #4]
 8009c2a:	9a01      	ldr	r2, [sp, #4]
 8009c2c:	601d      	str	r5, [r3, #0]
 8009c2e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009c32:	605c      	str	r4, [r3, #4]
 8009c34:	609f      	str	r7, [r3, #8]
 8009c36:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009c3a:	60d3      	str	r3, [r2, #12]
 8009c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c40:	6110      	str	r0, [r2, #16]
 8009c42:	6153      	str	r3, [r2, #20]
 8009c44:	e72e      	b.n	8009aa4 <__kernel_rem_pio2+0x4d4>
 8009c46:	bf00      	nop
 8009c48:	41700000 	.word	0x41700000
 8009c4c:	3e700000 	.word	0x3e700000

08009c50 <__kernel_sin>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	ed2d 8b04 	vpush	{d8-d9}
 8009c58:	eeb0 8a41 	vmov.f32	s16, s2
 8009c5c:	eef0 8a61 	vmov.f32	s17, s3
 8009c60:	ec55 4b10 	vmov	r4, r5, d0
 8009c64:	b083      	sub	sp, #12
 8009c66:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c6a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009c6e:	9001      	str	r0, [sp, #4]
 8009c70:	da06      	bge.n	8009c80 <__kernel_sin+0x30>
 8009c72:	ee10 0a10 	vmov	r0, s0
 8009c76:	4629      	mov	r1, r5
 8009c78:	f7f6 ff28 	bl	8000acc <__aeabi_d2iz>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d051      	beq.n	8009d24 <__kernel_sin+0xd4>
 8009c80:	4622      	mov	r2, r4
 8009c82:	462b      	mov	r3, r5
 8009c84:	4620      	mov	r0, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	f7f6 fc86 	bl	8000598 <__aeabi_dmul>
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	468b      	mov	fp, r1
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	4620      	mov	r0, r4
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7f6 fc7e 	bl	8000598 <__aeabi_dmul>
 8009c9c:	a341      	add	r3, pc, #260	; (adr r3, 8009da4 <__kernel_sin+0x154>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	4689      	mov	r9, r1
 8009ca6:	4650      	mov	r0, sl
 8009ca8:	4659      	mov	r1, fp
 8009caa:	f7f6 fc75 	bl	8000598 <__aeabi_dmul>
 8009cae:	a33f      	add	r3, pc, #252	; (adr r3, 8009dac <__kernel_sin+0x15c>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f7f6 fab8 	bl	8000228 <__aeabi_dsub>
 8009cb8:	4652      	mov	r2, sl
 8009cba:	465b      	mov	r3, fp
 8009cbc:	f7f6 fc6c 	bl	8000598 <__aeabi_dmul>
 8009cc0:	a33c      	add	r3, pc, #240	; (adr r3, 8009db4 <__kernel_sin+0x164>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	f7f6 fab1 	bl	800022c <__adddf3>
 8009cca:	4652      	mov	r2, sl
 8009ccc:	465b      	mov	r3, fp
 8009cce:	f7f6 fc63 	bl	8000598 <__aeabi_dmul>
 8009cd2:	a33a      	add	r3, pc, #232	; (adr r3, 8009dbc <__kernel_sin+0x16c>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 faa6 	bl	8000228 <__aeabi_dsub>
 8009cdc:	4652      	mov	r2, sl
 8009cde:	465b      	mov	r3, fp
 8009ce0:	f7f6 fc5a 	bl	8000598 <__aeabi_dmul>
 8009ce4:	a337      	add	r3, pc, #220	; (adr r3, 8009dc4 <__kernel_sin+0x174>)
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	f7f6 fa9f 	bl	800022c <__adddf3>
 8009cee:	9b01      	ldr	r3, [sp, #4]
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	460f      	mov	r7, r1
 8009cf4:	b9eb      	cbnz	r3, 8009d32 <__kernel_sin+0xe2>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4650      	mov	r0, sl
 8009cfc:	4659      	mov	r1, fp
 8009cfe:	f7f6 fc4b 	bl	8000598 <__aeabi_dmul>
 8009d02:	a325      	add	r3, pc, #148	; (adr r3, 8009d98 <__kernel_sin+0x148>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f7f6 fa8e 	bl	8000228 <__aeabi_dsub>
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	f7f6 fc42 	bl	8000598 <__aeabi_dmul>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4620      	mov	r0, r4
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	f7f6 fa86 	bl	800022c <__adddf3>
 8009d20:	4604      	mov	r4, r0
 8009d22:	460d      	mov	r5, r1
 8009d24:	ec45 4b10 	vmov	d0, r4, r5
 8009d28:	b003      	add	sp, #12
 8009d2a:	ecbd 8b04 	vpop	{d8-d9}
 8009d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d32:	4b1b      	ldr	r3, [pc, #108]	; (8009da0 <__kernel_sin+0x150>)
 8009d34:	ec51 0b18 	vmov	r0, r1, d8
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f7f6 fc2d 	bl	8000598 <__aeabi_dmul>
 8009d3e:	4632      	mov	r2, r6
 8009d40:	ec41 0b19 	vmov	d9, r0, r1
 8009d44:	463b      	mov	r3, r7
 8009d46:	4640      	mov	r0, r8
 8009d48:	4649      	mov	r1, r9
 8009d4a:	f7f6 fc25 	bl	8000598 <__aeabi_dmul>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	ec51 0b19 	vmov	r0, r1, d9
 8009d56:	f7f6 fa67 	bl	8000228 <__aeabi_dsub>
 8009d5a:	4652      	mov	r2, sl
 8009d5c:	465b      	mov	r3, fp
 8009d5e:	f7f6 fc1b 	bl	8000598 <__aeabi_dmul>
 8009d62:	ec53 2b18 	vmov	r2, r3, d8
 8009d66:	f7f6 fa5f 	bl	8000228 <__aeabi_dsub>
 8009d6a:	a30b      	add	r3, pc, #44	; (adr r3, 8009d98 <__kernel_sin+0x148>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	4606      	mov	r6, r0
 8009d72:	460f      	mov	r7, r1
 8009d74:	4640      	mov	r0, r8
 8009d76:	4649      	mov	r1, r9
 8009d78:	f7f6 fc0e 	bl	8000598 <__aeabi_dmul>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4630      	mov	r0, r6
 8009d82:	4639      	mov	r1, r7
 8009d84:	f7f6 fa52 	bl	800022c <__adddf3>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fa4a 	bl	8000228 <__aeabi_dsub>
 8009d94:	e7c4      	b.n	8009d20 <__kernel_sin+0xd0>
 8009d96:	bf00      	nop
 8009d98:	55555549 	.word	0x55555549
 8009d9c:	3fc55555 	.word	0x3fc55555
 8009da0:	3fe00000 	.word	0x3fe00000
 8009da4:	5acfd57c 	.word	0x5acfd57c
 8009da8:	3de5d93a 	.word	0x3de5d93a
 8009dac:	8a2b9ceb 	.word	0x8a2b9ceb
 8009db0:	3e5ae5e6 	.word	0x3e5ae5e6
 8009db4:	57b1fe7d 	.word	0x57b1fe7d
 8009db8:	3ec71de3 	.word	0x3ec71de3
 8009dbc:	19c161d5 	.word	0x19c161d5
 8009dc0:	3f2a01a0 	.word	0x3f2a01a0
 8009dc4:	1110f8a6 	.word	0x1110f8a6
 8009dc8:	3f811111 	.word	0x3f811111

08009dcc <fabs>:
 8009dcc:	ec51 0b10 	vmov	r0, r1, d0
 8009dd0:	ee10 2a10 	vmov	r2, s0
 8009dd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dd8:	ec43 2b10 	vmov	d0, r2, r3
 8009ddc:	4770      	bx	lr
	...

08009de0 <floor>:
 8009de0:	ec51 0b10 	vmov	r0, r1, d0
 8009de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009dec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009df0:	2e13      	cmp	r6, #19
 8009df2:	ee10 5a10 	vmov	r5, s0
 8009df6:	ee10 8a10 	vmov	r8, s0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	dc32      	bgt.n	8009e64 <floor+0x84>
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	da14      	bge.n	8009e2c <floor+0x4c>
 8009e02:	a333      	add	r3, pc, #204	; (adr r3, 8009ed0 <floor+0xf0>)
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	f7f6 fa10 	bl	800022c <__adddf3>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f7f6 fe52 	bl	8000ab8 <__aeabi_dcmpgt>
 8009e14:	b138      	cbz	r0, 8009e26 <floor+0x46>
 8009e16:	2c00      	cmp	r4, #0
 8009e18:	da57      	bge.n	8009eca <floor+0xea>
 8009e1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009e1e:	431d      	orrs	r5, r3
 8009e20:	d001      	beq.n	8009e26 <floor+0x46>
 8009e22:	4c2d      	ldr	r4, [pc, #180]	; (8009ed8 <floor+0xf8>)
 8009e24:	2500      	movs	r5, #0
 8009e26:	4621      	mov	r1, r4
 8009e28:	4628      	mov	r0, r5
 8009e2a:	e025      	b.n	8009e78 <floor+0x98>
 8009e2c:	4f2b      	ldr	r7, [pc, #172]	; (8009edc <floor+0xfc>)
 8009e2e:	4137      	asrs	r7, r6
 8009e30:	ea01 0307 	and.w	r3, r1, r7
 8009e34:	4303      	orrs	r3, r0
 8009e36:	d01f      	beq.n	8009e78 <floor+0x98>
 8009e38:	a325      	add	r3, pc, #148	; (adr r3, 8009ed0 <floor+0xf0>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f7f6 f9f5 	bl	800022c <__adddf3>
 8009e42:	2200      	movs	r2, #0
 8009e44:	2300      	movs	r3, #0
 8009e46:	f7f6 fe37 	bl	8000ab8 <__aeabi_dcmpgt>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d0eb      	beq.n	8009e26 <floor+0x46>
 8009e4e:	2c00      	cmp	r4, #0
 8009e50:	bfbe      	ittt	lt
 8009e52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009e56:	fa43 f606 	asrlt.w	r6, r3, r6
 8009e5a:	19a4      	addlt	r4, r4, r6
 8009e5c:	ea24 0407 	bic.w	r4, r4, r7
 8009e60:	2500      	movs	r5, #0
 8009e62:	e7e0      	b.n	8009e26 <floor+0x46>
 8009e64:	2e33      	cmp	r6, #51	; 0x33
 8009e66:	dd0b      	ble.n	8009e80 <floor+0xa0>
 8009e68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009e6c:	d104      	bne.n	8009e78 <floor+0x98>
 8009e6e:	ee10 2a10 	vmov	r2, s0
 8009e72:	460b      	mov	r3, r1
 8009e74:	f7f6 f9da 	bl	800022c <__adddf3>
 8009e78:	ec41 0b10 	vmov	d0, r0, r1
 8009e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009e84:	f04f 33ff 	mov.w	r3, #4294967295
 8009e88:	fa23 f707 	lsr.w	r7, r3, r7
 8009e8c:	4207      	tst	r7, r0
 8009e8e:	d0f3      	beq.n	8009e78 <floor+0x98>
 8009e90:	a30f      	add	r3, pc, #60	; (adr r3, 8009ed0 <floor+0xf0>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7f6 f9c9 	bl	800022c <__adddf3>
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f7f6 fe0b 	bl	8000ab8 <__aeabi_dcmpgt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d0bf      	beq.n	8009e26 <floor+0x46>
 8009ea6:	2c00      	cmp	r4, #0
 8009ea8:	da02      	bge.n	8009eb0 <floor+0xd0>
 8009eaa:	2e14      	cmp	r6, #20
 8009eac:	d103      	bne.n	8009eb6 <floor+0xd6>
 8009eae:	3401      	adds	r4, #1
 8009eb0:	ea25 0507 	bic.w	r5, r5, r7
 8009eb4:	e7b7      	b.n	8009e26 <floor+0x46>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009ebc:	fa03 f606 	lsl.w	r6, r3, r6
 8009ec0:	4435      	add	r5, r6
 8009ec2:	4545      	cmp	r5, r8
 8009ec4:	bf38      	it	cc
 8009ec6:	18e4      	addcc	r4, r4, r3
 8009ec8:	e7f2      	b.n	8009eb0 <floor+0xd0>
 8009eca:	2500      	movs	r5, #0
 8009ecc:	462c      	mov	r4, r5
 8009ece:	e7aa      	b.n	8009e26 <floor+0x46>
 8009ed0:	8800759c 	.word	0x8800759c
 8009ed4:	7e37e43c 	.word	0x7e37e43c
 8009ed8:	bff00000 	.word	0xbff00000
 8009edc:	000fffff 	.word	0x000fffff

08009ee0 <scalbn>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	ec55 4b10 	vmov	r4, r5, d0
 8009ee6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009eea:	4606      	mov	r6, r0
 8009eec:	462b      	mov	r3, r5
 8009eee:	b99a      	cbnz	r2, 8009f18 <scalbn+0x38>
 8009ef0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009ef4:	4323      	orrs	r3, r4
 8009ef6:	d036      	beq.n	8009f66 <scalbn+0x86>
 8009ef8:	4b39      	ldr	r3, [pc, #228]	; (8009fe0 <scalbn+0x100>)
 8009efa:	4629      	mov	r1, r5
 8009efc:	ee10 0a10 	vmov	r0, s0
 8009f00:	2200      	movs	r2, #0
 8009f02:	f7f6 fb49 	bl	8000598 <__aeabi_dmul>
 8009f06:	4b37      	ldr	r3, [pc, #220]	; (8009fe4 <scalbn+0x104>)
 8009f08:	429e      	cmp	r6, r3
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	da10      	bge.n	8009f32 <scalbn+0x52>
 8009f10:	a32b      	add	r3, pc, #172	; (adr r3, 8009fc0 <scalbn+0xe0>)
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	e03a      	b.n	8009f8e <scalbn+0xae>
 8009f18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009f1c:	428a      	cmp	r2, r1
 8009f1e:	d10c      	bne.n	8009f3a <scalbn+0x5a>
 8009f20:	ee10 2a10 	vmov	r2, s0
 8009f24:	4620      	mov	r0, r4
 8009f26:	4629      	mov	r1, r5
 8009f28:	f7f6 f980 	bl	800022c <__adddf3>
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	460d      	mov	r5, r1
 8009f30:	e019      	b.n	8009f66 <scalbn+0x86>
 8009f32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f36:	460b      	mov	r3, r1
 8009f38:	3a36      	subs	r2, #54	; 0x36
 8009f3a:	4432      	add	r2, r6
 8009f3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009f40:	428a      	cmp	r2, r1
 8009f42:	dd08      	ble.n	8009f56 <scalbn+0x76>
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	a120      	add	r1, pc, #128	; (adr r1, 8009fc8 <scalbn+0xe8>)
 8009f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f4c:	da1c      	bge.n	8009f88 <scalbn+0xa8>
 8009f4e:	a120      	add	r1, pc, #128	; (adr r1, 8009fd0 <scalbn+0xf0>)
 8009f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f54:	e018      	b.n	8009f88 <scalbn+0xa8>
 8009f56:	2a00      	cmp	r2, #0
 8009f58:	dd08      	ble.n	8009f6c <scalbn+0x8c>
 8009f5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009f66:	ec45 4b10 	vmov	d0, r4, r5
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009f70:	da19      	bge.n	8009fa6 <scalbn+0xc6>
 8009f72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f76:	429e      	cmp	r6, r3
 8009f78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009f7c:	dd0a      	ble.n	8009f94 <scalbn+0xb4>
 8009f7e:	a112      	add	r1, pc, #72	; (adr r1, 8009fc8 <scalbn+0xe8>)
 8009f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e2      	bne.n	8009f4e <scalbn+0x6e>
 8009f88:	a30f      	add	r3, pc, #60	; (adr r3, 8009fc8 <scalbn+0xe8>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 fb03 	bl	8000598 <__aeabi_dmul>
 8009f92:	e7cb      	b.n	8009f2c <scalbn+0x4c>
 8009f94:	a10a      	add	r1, pc, #40	; (adr r1, 8009fc0 <scalbn+0xe0>)
 8009f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0b8      	beq.n	8009f10 <scalbn+0x30>
 8009f9e:	a10e      	add	r1, pc, #56	; (adr r1, 8009fd8 <scalbn+0xf8>)
 8009fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa4:	e7b4      	b.n	8009f10 <scalbn+0x30>
 8009fa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009faa:	3236      	adds	r2, #54	; 0x36
 8009fac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <scalbn+0x108>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	e7e8      	b.n	8009f8e <scalbn+0xae>
 8009fbc:	f3af 8000 	nop.w
 8009fc0:	c2f8f359 	.word	0xc2f8f359
 8009fc4:	01a56e1f 	.word	0x01a56e1f
 8009fc8:	8800759c 	.word	0x8800759c
 8009fcc:	7e37e43c 	.word	0x7e37e43c
 8009fd0:	8800759c 	.word	0x8800759c
 8009fd4:	fe37e43c 	.word	0xfe37e43c
 8009fd8:	c2f8f359 	.word	0xc2f8f359
 8009fdc:	81a56e1f 	.word	0x81a56e1f
 8009fe0:	43500000 	.word	0x43500000
 8009fe4:	ffff3cb0 	.word	0xffff3cb0
 8009fe8:	3c900000 	.word	0x3c900000

08009fec <_init>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	bf00      	nop
 8009ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff2:	bc08      	pop	{r3}
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	4770      	bx	lr

08009ff8 <_fini>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	bf00      	nop
 8009ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffe:	bc08      	pop	{r3}
 800a000:	469e      	mov	lr, r3
 800a002:	4770      	bx	lr
